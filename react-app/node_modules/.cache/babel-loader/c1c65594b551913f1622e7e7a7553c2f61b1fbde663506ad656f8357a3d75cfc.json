{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire-selection/QuestionnaireSelection.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography } from \"@mui/material\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../../../hooks/useQuestionnaires\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionnaireSelection = () => {\n  _s();\n  const {\n    questionnaires,\n    loading,\n    error\n  } = useQuestionnaires(); // Use the custom hook to get data from context\n  const {\n    questionResponses,\n    refetch\n  } = useQuestionResponses(); // Add refetch to update context\n  const location = useLocation(); // Get the location object to access passed state\n\n  // Check if the user navigated back from completing a questionnaire\n  useEffect(() => {\n    if (location.state && location.state.fromCompletion) {\n      // Refetch the question responses when navigating back after completion\n      refetch();\n    }\n  }, [location.state, refetch]);\n\n  // Collect unique questionnaire IDs from the responses\n  const uniqueQuestionnaireIds = new Set();\n  for (const qRes of questionResponses) {\n    if (!uniqueQuestionnaireIds.has(qRes.questionnaireId)) {\n      uniqueQuestionnaireIds.add(qRes.questionnaireId);\n    }\n  }\n  for (const qRes of questionResponses) if (!uniqueQuestionnaireIds.has(qRes.questionnaireId)) uniqueQuestionnaireIds.add(qRes.questionnaireId);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Questionnaires Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Link\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: questionnaires.map((questionnaire, i) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: questionnaire.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: questionnaire.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: uniqueQuestionnaireIds.has(questionnaire.id) ? /*#__PURE__*/_jsxDEV(Typography, {\n                children: \"Questionnaire completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(Link, {\n                to: `/questionnaire/${questionnaire.id}`,\n                state: {\n                  questionnaire\n                },\n                children: questionnaire.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, questionnaire.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionnaireSelection, \"mVAVdy6qvoPWQZ9VGvf1Kwumci8=\", false, function () {\n  return [useQuestionnaires, useQuestionResponses, useLocation];\n});\n_c = QuestionnaireSelection;\nvar _c;\n$RefreshReg$(_c, \"QuestionnaireSelection\");","map":{"version":3,"names":["React","useEffect","Container","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Typography","Link","useLocation","useQuestionnaires","useQuestionResponses","jsxDEV","_jsxDEV","QuestionnaireSelection","_s","questionnaires","loading","error","questionResponses","refetch","location","state","fromCompletion","uniqueQuestionnaireIds","Set","qRes","has","questionnaireId","add","children","fileName","_jsxFileName","lineNumber","columnNumber","component","map","questionnaire","i","id","name","to","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire-selection/QuestionnaireSelection.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n} from \"@mui/material\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../../../hooks/useQuestionnaires\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\n\nexport const QuestionnaireSelection: React.FC = () => {\n  const { questionnaires, loading, error } = useQuestionnaires(); // Use the custom hook to get data from context\n  const { questionResponses, refetch } = useQuestionResponses(); // Add refetch to update context\n  const location = useLocation(); // Get the location object to access passed state\n\n  // Check if the user navigated back from completing a questionnaire\n  useEffect(() => {\n    if (location.state && location.state.fromCompletion) {\n      // Refetch the question responses when navigating back after completion\n      refetch();\n    }\n  }, [location.state, refetch]);\n\n  // Collect unique questionnaire IDs from the responses\n  const uniqueQuestionnaireIds: Set<number> = new Set();\n  for (const qRes of questionResponses) {\n    if (!uniqueQuestionnaireIds.has(qRes.questionnaireId)) {\n      uniqueQuestionnaireIds.add(qRes.questionnaireId);\n    }\n  }\n  for (const qRes of questionResponses)\n    if (!uniqueQuestionnaireIds.has(qRes.questionnaireId))\n      uniqueQuestionnaireIds.add(qRes.questionnaireId);\n  if (loading) {\n    return (\n      <Container>\n        <h1>Loading...</h1>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container>\n        <h1>Error: {error}</h1>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <h1>Questionnaires Dashboard</h1>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>ID</TableCell>\n              <TableCell>Title</TableCell>\n              <TableCell>Link</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {questionnaires.map((questionnaire, i) => (\n              <TableRow key={questionnaire.id}>\n                <TableCell>{questionnaire.id}</TableCell>\n                <TableCell>{questionnaire.name}</TableCell>\n                <TableCell>\n                  {uniqueQuestionnaireIds.has(questionnaire.id) ? (\n                    <Typography>Questionnaire completed</Typography>\n                  ) : (\n                    <Link\n                      to={`/questionnaire/${questionnaire.id}`}\n                      state={{ questionnaire }}\n                    >\n                      {questionnaire.name}\n                    </Link>\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}