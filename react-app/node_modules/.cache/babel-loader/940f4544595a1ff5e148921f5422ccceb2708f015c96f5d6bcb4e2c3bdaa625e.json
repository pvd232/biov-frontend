{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../../../hooks/useQuestionnaires\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _useUser$user, _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const navigate = useNavigate();\n  const user = (_useUser$user = useUser().user) !== null && _useUser$user !== void 0 ? _useUser$user : navigate(\"/login\");\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  if (!questionnaire) return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Questionnaire not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n  const handleAnswerChange = (questionId, answerType, singleOptionId, multiOptionId, shortAnswer) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n\n      // Handle multi select questions\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && multiOptionId !== null) {\n        // Update curr answer if it exists, else create a new answer\n        if (answerIndex > -1 && prevAnswers[answerIndex].multiOptionIds != null) {\n          for (let optionId of prevAnswers[answerIndex].multiOptionIds) {\n            // If the option is already selected, remove it from the array of selected options\n            if (optionId === multiOptionId) {\n              prevAnswers[answerIndex].multiOptionIds = prevAnswers[answerIndex].multiOptionIds.filter(optionId => optionId !== multiOptionId);\n              return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n            }\n          }\n          // If the option is not already selected, add it to the array of selected options\n          prevAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n\n          // Insert the updated answer into the answer array\n        } else {\n          var _user$id;\n          let updatedMultiOptions = [];\n          updatedMultiOptions.push(multiOptionId);\n          // Add the new answer to the previous answers\n          return [...prevAnswers, {\n            userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: updatedMultiOptions,\n            shortAnswer: null\n          }];\n        }\n      }\n\n      // Handle single select questions\n      else if (answerType === QuestionCategory.MultipleChoice && singleOptionId != null) {\n        // If the answer already exists, update the singleOption value\n        if (answerIndex > -1) {\n          const updatedAnswer = {\n            ...prevAnswers[answerIndex],\n            singleOptionId: singleOptionId\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id2;\n          const updatedAnswer = {\n            userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && shortAnswer != null) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = shortAnswer;\n          return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id3;\n          const updatedAnswer = {\n            userId: (_user$id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id3 !== void 0 ? _user$id3 : \"\",\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) setErrors(prevErrors => ({\n      ...prevErrors,\n      [questionId]: \"\"\n    }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) setCurrentQuestionIndex(currentQuestionIndex + 1);else handleSubmit();\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[currentQuestionIndex].singleOptionId || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoice, Number(e.target.value), null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.id,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map((option, i) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox\n          // checked={\n          //   answers[currentQuestionIndex]?.multiOptions?.[i] ??\n          //   false\n          // }\n          , {\n            onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoiceSelectAll, null, option.id, null)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 21\n          }, this),\n          label: option.text\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, QuestionCategory.ShortAnswer, null, null, e.target.value);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"QRA1LzcYYnVZo+wfER0Ilh8cG8M=\", false, function () {\n  return [useParams, useQuestionnaires, useNavigate, useUser];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","useNavigate","jsxDEV","_jsxDEV","Questionnaire","_s","_useUser$user","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest","id","questionnaires","navigate","user","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","answerType","singleOptionId","multiOptionId","shortAnswer","prevAnswers","answerIndex","findIndex","answer","MultipleChoiceSelectAll","multiOptionIds","optionId","filter","slice","push","_user$id","updatedMultiOptions","userId","type","MultipleChoice","updatedAnswer","_user$id2","ShortAnswer","_user$id3","prevErrors","validateAnswer","trim","length","handleNext","currentQuestion","questions","handleSubmit","handlePrevious","progress","postQuestionResponse","name","mt","sx","marginBottom","text","value","onChange","e","target","options","map","option","control","label","i","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../../../hooks/useQuestionnaires\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponse } from \"../../../types/domains/QuestionResponse\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { QuestionOption } from \"../../../types/domains/QuestionOption\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const Questionnaire: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n  const navigate = useNavigate();\n  const user = useUser().user ?? navigate(\"/login\");\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponse[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  if (!questionnaire)\n    return (\n      <Container>\n        <Typography variant=\"h6\">Questionnaire not found</Typography>\n      </Container>\n    );\n  const handleAnswerChange = (\n    questionId: number,\n    answerType: QuestionCategory,\n    singleOptionId: number | null,\n    multiOptionId: number | null,\n    shortAnswer: string | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      // Handle multi select questions\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        multiOptionId !== null\n      ) {\n        // Update curr answer if it exists, else create a new answer\n        if (\n          answerIndex > -1 &&\n          prevAnswers[answerIndex].multiOptionIds != null\n        ) {\n          for (let optionId of prevAnswers[answerIndex].multiOptionIds) {\n            // If the option is already selected, remove it from the array of selected options\n            if (optionId === multiOptionId) {\n              prevAnswers[answerIndex].multiOptionIds = prevAnswers[\n                answerIndex\n              ].multiOptionIds.filter(\n                (optionId: number) => optionId !== multiOptionId\n              );\n              return [\n                ...prevAnswers.slice(0, answerIndex),\n                prevAnswers[answerIndex],\n                ...prevAnswers.slice(answerIndex + 1),\n              ];\n            }\n          }\n          // If the option is not already selected, add it to the array of selected options\n          prevAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n\n          // Insert the updated answer into the answer array\n        } else {\n          let updatedMultiOptions: number[] = [];\n          updatedMultiOptions.push(multiOptionId);\n          // Add the new answer to the previous answers\n          return [\n            ...prevAnswers,\n            {\n              userId: user?.id ?? \"\",\n              questionId: questionId,\n              type: answerType,\n              singleOptionId: null,\n              multiOptionIds: updatedMultiOptions,\n              shortAnswer: null,\n            },\n          ];\n        }\n      }\n\n      // Handle single select questions\n      else if (\n        answerType === QuestionCategory.MultipleChoice &&\n        singleOptionId != null\n      ) {\n        // If the answer already exists, update the singleOption value\n        if (answerIndex > -1) {\n          const updatedAnswer: QuestionResponse = {\n            ...prevAnswers[answerIndex],\n            singleOptionId: singleOptionId,\n          };\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponse = {\n            userId: user?.id ?? \"\",\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        shortAnswer != null\n      ) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = shortAnswer;\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            prevAnswers[answerIndex],\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponse = {\n            userId: user?.id ?? \"\",\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId])\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    )\n      return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1)\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    else handleSubmit();\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0)\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers);\n  };\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex].singleOptionId || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.MultipleChoice,\n                  Number(e.target.value),\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option: QuestionOption) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.id}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map(\n              (option: QuestionOption, i: number) => (\n                <FormControlLabel\n                  key={option.id}\n                  control={\n                    <Checkbox\n                      // checked={\n                      //   answers[currentQuestionIndex]?.multiOptions?.[i] ??\n                      //   false\n                      // }\n                      onChange={(e) =>\n                        handleAnswerChange(\n                          currentQuestion.id,\n                          QuestionCategory.MultipleChoiceSelectAll,\n                          null,\n                          option.id,\n                          null\n                        )\n                      }\n                    />\n                  }\n                  label={option.text}\n                />\n              )\n            )\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.ShortAnswer,\n                  null,\n                  null,\n                  e.target.value\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}