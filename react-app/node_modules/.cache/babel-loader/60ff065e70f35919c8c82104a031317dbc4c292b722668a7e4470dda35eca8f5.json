{"ast":null,"code":"import { createNoise2D } from 'simplex-noise';\nimport { mapValues } from './mapValues';\nexport const updateOrb = (xOff, yOff, bounds, inc) => {\n  // self similar \"psuedo-random\" or noise values at a given point in \"time\"\n  const createXNoise = createNoise2D();\n  const createYNoise = createNoise2D();\n  const createScaleNoise = createNoise2D();\n  const xNoise = createXNoise(xOff, xOff);\n  const yNoise = createYNoise(yOff, yOff);\n  const scaleNoise = createScaleNoise(xOff, yOff);\n\n  // map the xNoise/yNoise values (between -1 and 1) to a point within the orb's bounds\n  const xPosition = mapValues(xNoise, -1, 1, bounds['x'].min, bounds['x'].max);\n  const yPosition = mapValues(yNoise, -1, 1, bounds['y'].min, bounds['y'].max);\n  // map scaleNoise (between -1 and 1) to a scale value somewhere between half of the orb's original size, and 100% of it's original size\n  const scale = mapValues(scaleNoise, -1, 1, 0.5, 1);\n\n  // step through \"time\"\n  const xOffSet = xOff + inc;\n  const yOffSet = yOff + inc;\n  return {\n    xPosition,\n    yPosition,\n    xOffSet,\n    yOffSet,\n    scale\n  };\n};","map":{"version":3,"names":["createNoise2D","mapValues","updateOrb","xOff","yOff","bounds","inc","createXNoise","createYNoise","createScaleNoise","xNoise","yNoise","scaleNoise","xPosition","min","max","yPosition","scale","xOffSet","yOffSet"],"sources":["/Users/machina/Developer/biov-front/src/components/pages/splash/landing_page/helpers/updateOrb.ts"],"sourcesContent":["import { createNoise2D } from 'simplex-noise';\nimport { mapValues } from './mapValues';\nimport OrbBounds from '../types/OrbBounds';\nimport ExtendedOrbPosition from '../types/RelativeOrbPosition';\nexport const updateOrb = (\n  xOff: number,\n  yOff: number,\n  bounds: OrbBounds,\n  inc: number\n): ExtendedOrbPosition => {\n  // self similar \"psuedo-random\" or noise values at a given point in \"time\"\n  const createXNoise = createNoise2D();\n  const createYNoise = createNoise2D();\n  const createScaleNoise = createNoise2D();\n  const xNoise = createXNoise(xOff, xOff);\n  const yNoise = createYNoise(yOff, yOff);\n  const scaleNoise = createScaleNoise(xOff, yOff);\n\n  // map the xNoise/yNoise values (between -1 and 1) to a point within the orb's bounds\n  const xPosition = mapValues(xNoise, -1, 1, bounds['x'].min, bounds['x'].max);\n  const yPosition = mapValues(yNoise, -1, 1, bounds['y'].min, bounds['y'].max);\n  // map scaleNoise (between -1 and 1) to a scale value somewhere between half of the orb's original size, and 100% of it's original size\n  const scale = mapValues(scaleNoise, -1, 1, 0.5, 1);\n\n  // step through \"time\"\n  const xOffSet = xOff + inc;\n  const yOffSet = yOff + inc;\n  return {\n    xPosition,\n    yPosition,\n    xOffSet,\n    yOffSet,\n    scale,\n  };\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,SAAS,QAAQ,aAAa;AAGvC,OAAO,MAAMC,SAAS,GAAGA,CACvBC,IAAY,EACZC,IAAY,EACZC,MAAiB,EACjBC,GAAW,KACa;EACxB;EACA,MAAMC,YAAY,GAAGP,aAAa,CAAC,CAAC;EACpC,MAAMQ,YAAY,GAAGR,aAAa,CAAC,CAAC;EACpC,MAAMS,gBAAgB,GAAGT,aAAa,CAAC,CAAC;EACxC,MAAMU,MAAM,GAAGH,YAAY,CAACJ,IAAI,EAAEA,IAAI,CAAC;EACvC,MAAMQ,MAAM,GAAGH,YAAY,CAACJ,IAAI,EAAEA,IAAI,CAAC;EACvC,MAAMQ,UAAU,GAAGH,gBAAgB,CAACN,IAAI,EAAEC,IAAI,CAAC;;EAE/C;EACA,MAAMS,SAAS,GAAGZ,SAAS,CAACS,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEL,MAAM,CAAC,GAAG,CAAC,CAACS,GAAG,EAAET,MAAM,CAAC,GAAG,CAAC,CAACU,GAAG,CAAC;EAC5E,MAAMC,SAAS,GAAGf,SAAS,CAACU,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEN,MAAM,CAAC,GAAG,CAAC,CAACS,GAAG,EAAET,MAAM,CAAC,GAAG,CAAC,CAACU,GAAG,CAAC;EAC5E;EACA,MAAME,KAAK,GAAGhB,SAAS,CAACW,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;;EAElD;EACA,MAAMM,OAAO,GAAGf,IAAI,GAAGG,GAAG;EAC1B,MAAMa,OAAO,GAAGf,IAAI,GAAGE,GAAG;EAC1B,OAAO;IACLO,SAAS;IACTG,SAAS;IACTE,OAAO;IACPC,OAAO;IACPF;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}