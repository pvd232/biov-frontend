{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _location$state, _answers$currentQuest, _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest2;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // const questionnaires = useQuestionnaires();\n  const userId = useUser().userId;\n  const prevQuestionResponses = useQuestionResponses();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.questionnaire;\n  useEffect(() => {\n    const questionId = questionnaire.questions[currentQuestionIndex].id;\n    for (let response of prevQuestionResponses.questionResponses) {\n      if (response.questionId === questionId) {\n        switch (response.type) {\n          case QuestionCategory.MultipleChoice:\n            setAnswers(prevAnswers => [...prevAnswers, {\n              userId: userId,\n              questionId: questionId,\n              type: QuestionCategory.MultipleChoice,\n              singleOptionId: response.singleOptionId,\n              multiOptionIds: null,\n              shortAnswer: null\n            }]);\n            break;\n          case QuestionCategory.MultipleChoiceSelectAll:\n            setAnswers(prevAnswers => [...prevAnswers, {\n              userId: userId,\n              questionId: questionId,\n              type: QuestionCategory.MultipleChoice,\n              singleOptionId: null,\n              multiOptionIds: response.multiOptionIds,\n              shortAnswer: null\n            }]);\n            break;\n          case QuestionCategory.ShortAnswer:\n            setAnswers(prevAnswers => [...prevAnswers, {\n              userId: userId,\n              questionId: questionId,\n              type: QuestionCategory.MultipleChoice,\n              singleOptionId: null,\n              multiOptionIds: null,\n              shortAnswer: response.shortAnswer\n            }]);\n            break;\n        }\n      }\n    }\n  }, [currentQuestionIndex, questionnaire, userId, prevQuestionResponses, navigate]);\n  const handleAnswerChange = (questionId, answerType, singleOptionId, multiOptionId, shortAnswer) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n\n      // Handle multi select questions\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && multiOptionId !== null) {\n        // Update curr answer if it exists, else create a new answer\n        if (answerIndex > -1 && prevAnswers[answerIndex].multiOptionIds != null) {\n          for (let optionId of prevAnswers[answerIndex].multiOptionIds) {\n            // If the option is already selected, remove it from the array of selected options\n            if (optionId === multiOptionId) {\n              prevAnswers[answerIndex].multiOptionIds = prevAnswers[answerIndex].multiOptionIds.filter(optionId => optionId !== multiOptionId);\n              return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n            }\n          }\n          // If the option is not already selected, add it to the array of selected options\n          prevAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n\n          // Insert the updated answer into the answer array\n        } else {\n          let updatedMultiOptions = [];\n          updatedMultiOptions.push(multiOptionId);\n          // Add the new answer to the previous answers\n          return [...prevAnswers, {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: updatedMultiOptions,\n            shortAnswer: null\n          }];\n        }\n      }\n\n      // Handle single select questions\n      else if (answerType === QuestionCategory.MultipleChoice && singleOptionId != null) {\n        // If the answer already exists, update the singleOption value\n        if (answerIndex > -1) {\n          const updatedAnswer = {\n            ...prevAnswers[answerIndex],\n            singleOptionId: singleOptionId\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          const updatedAnswer = {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && shortAnswer != null) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = shortAnswer;\n          return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          const updatedAnswer = {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) setErrors(prevErrors => ({\n      ...prevErrors,\n      [questionId]: \"\"\n    }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) setCurrentQuestionIndex(currentQuestionIndex + 1);else handleSubmit();\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers).then(() => {\n      navigate(\"/questionnaire-home\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: ((_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.singleOptionId) || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoice, Number(e.target.value), null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.id,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map((option, i) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoiceSelectAll, null, option.id, null)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 21\n          }, this),\n          label: option.text\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : _answers$currentQuest2.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, QuestionCategory.ShortAnswer, null, null, e.target.value);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"4TjmX+U9XLgONcoixooh7j65NPg=\", false, function () {\n  return [useParams, useNavigate, useUser, useQuestionResponses, useLocation];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useEffect","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useLocation","useParams","QuestionCategory","APIClient","useUser","useNavigate","useQuestionResponses","jsxDEV","_jsxDEV","Questionnaire","_s","_location$state","_answers$currentQuest","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest2","id","navigate","userId","prevQuestionResponses","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","location","questionnaire","state","questionId","questions","response","questionResponses","type","MultipleChoice","prevAnswers","singleOptionId","multiOptionIds","shortAnswer","MultipleChoiceSelectAll","ShortAnswer","handleAnswerChange","answerType","multiOptionId","answerIndex","findIndex","answer","optionId","filter","slice","push","updatedMultiOptions","updatedAnswer","prevErrors","validateAnswer","trim","length","handleNext","currentQuestion","handleSubmit","handlePrevious","progress","postQuestionResponse","then","children","variant","name","fileName","_jsxFileName","lineNumber","columnNumber","mt","sx","marginBottom","text","value","onChange","e","Number","target","options","map","option","control","label","i","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../../../hooks/useQuestionnaires\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponse } from \"../../../helpers/QuestionResponse\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { QuestionOption } from \"../../../types/domains/QuestionOption\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\n\nexport const Questionnaire: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n\n  // const questionnaires = useQuestionnaires();\n  const userId = useUser().userId!;\n  const prevQuestionResponses = useQuestionResponses();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponse[]>([]);\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = location.state?.questionnaire;\n\n  useEffect(() => {\n    const questionId = questionnaire!.questions[currentQuestionIndex].id;\n    for (let response of prevQuestionResponses.questionResponses) {\n      if (response.questionId === questionId) {\n        switch (response.type) {\n          case QuestionCategory.MultipleChoice:\n            setAnswers((prevAnswers) => [\n              ...prevAnswers,\n              {\n                userId: userId,\n                questionId: questionId,\n                type: QuestionCategory.MultipleChoice,\n                singleOptionId: response.singleOptionId,\n                multiOptionIds: null,\n                shortAnswer: null,\n              },\n            ]);\n            break;\n          case QuestionCategory.MultipleChoiceSelectAll:\n            setAnswers((prevAnswers) => [\n              ...prevAnswers,\n              {\n                userId: userId,\n                questionId: questionId,\n                type: QuestionCategory.MultipleChoice,\n                singleOptionId: null,\n                multiOptionIds: response.multiOptionIds,\n                shortAnswer: null,\n              },\n            ]);\n            break;\n          case QuestionCategory.ShortAnswer:\n            setAnswers((prevAnswers) => [\n              ...prevAnswers,\n              {\n                userId: userId,\n                questionId: questionId,\n                type: QuestionCategory.MultipleChoice,\n                singleOptionId: null,\n                multiOptionIds: null,\n                shortAnswer: response.shortAnswer,\n              },\n            ]);\n            break;\n        }\n      }\n    }\n  }, [\n    currentQuestionIndex,\n    questionnaire,\n    userId,\n    prevQuestionResponses,\n    navigate,\n  ]);\n\n  const handleAnswerChange = (\n    questionId: number,\n    answerType: QuestionCategory,\n    singleOptionId: number | null,\n    multiOptionId: number | null,\n    shortAnswer: string | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      // Handle multi select questions\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        multiOptionId !== null\n      ) {\n        // Update curr answer if it exists, else create a new answer\n        if (\n          answerIndex > -1 &&\n          prevAnswers[answerIndex].multiOptionIds != null\n        ) {\n          for (let optionId of prevAnswers[answerIndex].multiOptionIds) {\n            // If the option is already selected, remove it from the array of selected options\n            if (optionId === multiOptionId) {\n              prevAnswers[answerIndex].multiOptionIds = prevAnswers[\n                answerIndex\n              ].multiOptionIds.filter(\n                (optionId: number) => optionId !== multiOptionId\n              );\n              return [\n                ...prevAnswers.slice(0, answerIndex),\n                prevAnswers[answerIndex],\n                ...prevAnswers.slice(answerIndex + 1),\n              ];\n            }\n          }\n          // If the option is not already selected, add it to the array of selected options\n          prevAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n\n          // Insert the updated answer into the answer array\n        } else {\n          let updatedMultiOptions: number[] = [];\n          updatedMultiOptions.push(multiOptionId);\n          // Add the new answer to the previous answers\n          return [\n            ...prevAnswers,\n            {\n              userId: userId,\n              questionId: questionId,\n              type: answerType,\n              singleOptionId: null,\n              multiOptionIds: updatedMultiOptions,\n              shortAnswer: null,\n            },\n          ];\n        }\n      }\n\n      // Handle single select questions\n      else if (\n        answerType === QuestionCategory.MultipleChoice &&\n        singleOptionId != null\n      ) {\n        // If the answer already exists, update the singleOption value\n        if (answerIndex > -1) {\n          const updatedAnswer: QuestionResponse = {\n            ...prevAnswers[answerIndex],\n            singleOptionId: singleOptionId,\n          };\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponse = {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        shortAnswer != null\n      ) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = shortAnswer;\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            prevAnswers[answerIndex],\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponse = {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId])\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    )\n      return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire!.questions.length - 1)\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    else handleSubmit();\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0)\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire!.questions.length) * 100;\n\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers).then(() => {\n      navigate(\"/questionnaire-home\");\n    });\n  };\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire!.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex]?.singleOptionId || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.MultipleChoice,\n                  Number(e.target.value),\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option: QuestionOption) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.id}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map(\n              (option: QuestionOption, i: number) => (\n                <FormControlLabel\n                  key={option.id}\n                  control={\n                    <Checkbox\n                      onChange={(e) =>\n                        handleAnswerChange(\n                          currentQuestion.id,\n                          QuestionCategory.MultipleChoiceSelectAll,\n                          null,\n                          option.id,\n                          null\n                        )\n                      }\n                    />\n                  }\n                  label={option.text}\n                />\n              )\n            )\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.ShortAnswer,\n                  null,\n                  null,\n                  e.target.value\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire!.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}