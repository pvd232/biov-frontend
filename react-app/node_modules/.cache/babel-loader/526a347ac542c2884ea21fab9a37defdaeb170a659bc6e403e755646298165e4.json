{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire-context-provider/QuestionnaireContextProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { APIClient } from \"./APIC\";\nimport { QuestionnaireJunction } from \"../../../data-models/QuestionnaireJunction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionnaireContext = /*#__PURE__*/createContext(undefined);\nexport const QuestionnaireContextProvider = ({\n  children\n}) => {\n  _s();\n  const [questionnaires, setQuestionnaires] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        console.log(\"Fetching questionnaires\");\n        const response = await new APIClient().fetchQuestionnaires();\n        if (!response.ok) {\n          console.log(response);\n          throw new Error(\"Failed to fetch questionnaires\");\n        }\n        const data = await response.json();\n        const questionnaires = data.map(questionnaire => new QuestionnaireJunction({\n          id: questionnaire.id,\n          name: questionnaire.name,\n          description: questionnaire.description,\n          questions: questionnaire.questions\n        }));\n        setQuestionnaires(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(QuestionnaireContext.Provider, {\n    value: {\n      questionnaires,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionnaireContextProvider, \"E3ZCfxmHFdtp3QtJGzaK3wL3mmk=\");\n_c = QuestionnaireContextProvider;\nvar _c;\n$RefreshReg$(_c, \"QuestionnaireContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","APIClient","QuestionnaireJunction","jsxDEV","_jsxDEV","QuestionnaireContext","undefined","QuestionnaireContextProvider","children","_s","questionnaires","setQuestionnaires","loading","setLoading","error","setError","fetchData","console","log","response","fetchQuestionnaires","ok","Error","data","json","map","questionnaire","id","name","description","questions","err","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire-context-provider/QuestionnaireContextProvider.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { QuestionnaireType } from \"../types/QuestionnaireType\";\nimport { QuestionnaireContextType } from \"../types/QuestionnaireContextType\";\nimport { QuestionnaireProviderProps } from \"../types/QuestionnaireProviderProps\";\nimport { APIClient } from \"./APIC\";\nimport { QuestionnaireJunction } from \"../../../data-models/QuestionnaireJunction\";\n\nexport const QuestionnaireContext = createContext<\n  QuestionnaireContextType | undefined\n>(undefined);\n\nexport const QuestionnaireContextProvider: React.FC<\n  QuestionnaireProviderProps\n> = ({ children }) => {\n  const [questionnaires, setQuestionnaires] = useState<QuestionnaireType[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        console.log(\"Fetching questionnaires\");\n        const response = await new APIClient().fetchQuestionnaires();\n        if (!response.ok) {\n          console.log(response);\n          throw new Error(\"Failed to fetch questionnaires\");\n        }\n        const data = await response.json();\n        const questionnaires = data.map(\n          (questionnaire: any) =>\n            new QuestionnaireJunction({\n              id: questionnaire.id,\n              name: questionnaire.name,\n              description: questionnaire.description,\n              questions: questionnaire.questions,\n            })\n        );\n        setQuestionnaires(data);\n      } catch (err: any) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <QuestionnaireContext.Provider value={{ questionnaires, loading, error }}>\n      {children}\n    </QuestionnaireContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAIjE,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,qBAAqB,QAAQ,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnF,OAAO,MAAMC,oBAAoB,gBAAGP,aAAa,CAE/CQ,SAAS,CAAC;AAEZ,OAAO,MAAMC,4BAEZ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAsB,EAAE,CAAC;EAC7E,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,eAAegB,SAASA,CAAA,EAAG;MACzB,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtC,MAAMC,QAAQ,GAAG,MAAM,IAAIlB,SAAS,CAAC,CAAC,CAACmB,mBAAmB,CAAC,CAAC;QAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChBJ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;UACrB,MAAM,IAAIG,KAAK,CAAC,gCAAgC,CAAC;QACnD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC,MAAMd,cAAc,GAAGa,IAAI,CAACE,GAAG,CAC5BC,aAAkB,IACjB,IAAIxB,qBAAqB,CAAC;UACxByB,EAAE,EAAED,aAAa,CAACC,EAAE;UACpBC,IAAI,EAAEF,aAAa,CAACE,IAAI;UACxBC,WAAW,EAAEH,aAAa,CAACG,WAAW;UACtCC,SAAS,EAAEJ,aAAa,CAACI;QAC3B,CAAC,CACL,CAAC;QACDnB,iBAAiB,CAACY,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOQ,GAAQ,EAAE;QACjBhB,QAAQ,CAACgB,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRnB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;IAEAG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA,CAACC,oBAAoB,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAExB,cAAc;MAAEE,OAAO;MAAEE;IAAM,CAAE;IAAAN,QAAA,EACtEA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACoB,CAAC;AAEpC,CAAC;AAAC7B,EAAA,CA1CWF,4BAEZ;AAAAgC,EAAA,GAFYhC,4BAEZ;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}