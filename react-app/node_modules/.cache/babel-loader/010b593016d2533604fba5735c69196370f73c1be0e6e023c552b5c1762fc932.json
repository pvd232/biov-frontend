{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../types/UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest3;\n  const user = useUser().user;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  if (!questionnaire) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Questionnaire not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  const handleAnswerChange = (questionId, value, answerType, optionIndex, optionChecked) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && optionChecked !== null && optionIndex !== null) {\n        let updateOptionsChecked = [];\n        if (answerIndex > -1) {\n          const existingAnswer = prevAnswers[answerIndex];\n          for (let i = 0; i < existingAnswer.optionsChecked.length; i++) updateOptionsChecked[i] = existingAnswer.optionsChecked[i];\n          updateOptionsChecked[optionIndex] = optionChecked;\n          const updatedAnswer = {\n            ...existingAnswer,\n            optionsChecked: updateOptionsChecked\n          };\n          // insert the updated answer into the answer array\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id;\n          // Initialize the optionsChecked array\n          for (let i = 0; i < currentQuestion.options.length; i++) updateOptionsChecked[i] = false;\n          updateOptionsChecked[optionIndex] = optionChecked;\n\n          // Add the new answer to the previous answers\n          return [...prevAnswers, {\n            userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n            questionId,\n            shortAnswer: \"\",\n            optionsChecked: updateOptionsChecked,\n            type: answerType\n          }];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && typeof value === \"string\") {\n        var _user$id2;\n        // Handle short-response\n        const updatedAnswer = {\n          userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n          questionId: questionId,\n          type: answerType,\n          shortAnswer: value,\n          optionsChecked: []\n        };\n        if (answerIndex > -1) {\n          const newShort = prevAnswers[answerIndex].shortAnswer.concat(value);\n          updatedAnswer.shortAnswer = newShort;\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else return [...prevAnswers, updatedAnswer];\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"\"\n      }));\n    }\n  };\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && answer.shortAnswer.trim().length === 0) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = () => {\n    return Object.keys(answers).map(questionId => {\n      var _user$id3;\n      const question = questionnaire.questions.find(q => q.id === Number(questionId));\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n      const response = {\n        userId: (_user$id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id3 !== void 0 ? _user$id3 : \"\",\n        // Replace with actual user ID\n        questionId: question.id,\n        optionsChecked: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type\n      };\n      return response;\n    });\n  };\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) {\n      return; // Prevent moving to the next question if validation fails\n    }\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[currentQuestionIndex] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, e.target.value, QuestionCategory.MultipleChoice, null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.text,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map((option, i) => {\n          var _answers$currentQuest, _answers$currentQuest2;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: (_answers$currentQuest = (_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : _answers$currentQuest2.optionsChecked[i]) !== null && _answers$currentQuest !== void 0 ? _answers$currentQuest : false,\n              onChange: e => handleAnswerChange(currentQuestion.id, \"\", QuestionCategory.MultipleChoiceSelectAll, i, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest3 = answers[currentQuestionIndex]) === null || _answers$currentQuest3 === void 0 ? void 0 : _answers$currentQuest3.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, e.target.value, QuestionCategory.ShortAnswer, null, null);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"gREewYr41+kU2wZV4lpa9tvoqWQ=\", false, function () {\n  return [useUser, useParams, useQuestionnaires];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","jsxDEV","_jsxDEV","Questionnaire","_s","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest3","user","id","questionnaires","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","value","answerType","optionIndex","optionChecked","prevAnswers","answerIndex","findIndex","answer","MultipleChoiceSelectAll","updateOptionsChecked","existingAnswer","i","optionsChecked","length","updatedAnswer","slice","_user$id","currentQuestion","options","userId","shortAnswer","type","ShortAnswer","_user$id2","newShort","concat","prevErrors","validateAnswer","trim","formatAnswersAsQuestionResponse","Object","keys","map","_user$id3","question","questions","Error","response","handleSubmit","formattedAnswers","postQuestionResponse","handleNext","console","log","handlePrevious","progress","name","mt","sx","marginBottom","text","MultipleChoice","onChange","e","target","option","control","label","_answers$currentQuest","_answers$currentQuest2","checked","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponseType } from \"../types/QuestionResponseType\";\nimport { useUser } from \"../../../types/UserContextProvider\";\n\nexport const Questionnaire: React.FC = () => {\n  const user = useUser().user;\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponseType[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  if (!questionnaire) {\n    return (\n      <Container>\n        <Typography variant=\"h6\">Questionnaire not found</Typography>\n      </Container>\n    );\n  }\n\n  const handleAnswerChange = (\n    questionId: number,\n    value: string,\n    answerType: QuestionCategory,\n    optionIndex: number | null,\n    optionChecked: boolean | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        optionChecked !== null &&\n        optionIndex !== null\n      ) {\n        let updateOptionsChecked: boolean[] = [];\n        if (answerIndex > -1) {\n          const existingAnswer = prevAnswers[answerIndex];\n\n          for (let i = 0; i < existingAnswer.optionsChecked.length; i++)\n            updateOptionsChecked[i] = existingAnswer.optionsChecked[i];\n          updateOptionsChecked[optionIndex] = optionChecked;\n\n          const updatedAnswer: QuestionResponseType = {\n            ...existingAnswer,\n            optionsChecked: updateOptionsChecked,\n          };\n          // insert the updated answer into the answer array\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          // Initialize the optionsChecked array\n          for (let i = 0; i < currentQuestion.options.length; i++)\n            updateOptionsChecked[i] = false;\n          updateOptionsChecked[optionIndex] = optionChecked;\n\n          // Add the new answer to the previous answers\n          return [\n            ...prevAnswers,\n            {\n              userId: user?.id ?? \"\",\n              questionId,\n              shortAnswer: \"\",\n              optionsChecked: updateOptionsChecked,\n              type: answerType,\n            },\n          ];\n        }\n      } else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        typeof value === \"string\"\n      ) {\n        // Handle short-response\n        const updatedAnswer: QuestionResponseType = {\n          userId: user?.id ?? \"\",\n          questionId: questionId,\n          type: answerType,\n          shortAnswer: value,\n          optionsChecked: [],\n        };\n        if (answerIndex > -1) {\n          const newShort = prevAnswers[answerIndex].shortAnswer.concat(value);\n          updatedAnswer.shortAnswer = newShort;\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else return [...prevAnswers, updatedAnswer];\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n    }\n  };\n\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      answer.shortAnswer.trim().length === 0\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = (): QuestionResponseType[] => {\n    return Object.keys(answers).map((questionId) => {\n      const question = questionnaire.questions.find(\n        (q) => q.id === Number(questionId)\n      );\n\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n\n      const response: QuestionResponseType = {\n        userId: user?.id ?? \"\", // Replace with actual user ID\n        questionId: question.id,\n        optionsChecked: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type,\n      };\n\n      return response;\n    });\n  };\n\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    ) {\n      return; // Prevent moving to the next question if validation fails\n    }\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  QuestionCategory.MultipleChoice,\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.text}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option, i) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      answers[currentQuestionIndex]?.optionsChecked[i] ?? false\n                    }\n                    onChange={(e) =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        \"\",\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        i,\n                        e.target.checked\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  QuestionCategory.ShortAnswer,\n                  null,\n                  null\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,SAAS,EACTC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,gBAAgB,EAChBC,MAAM,EACNC,cAAc,EACdC,GAAG,EACHC,SAAS,QACJ,eAAe;AACtB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,OAAO,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,OAAO,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EAC3C,MAAMC,IAAI,GAAGR,OAAO,CAAC,CAAC,CAACQ,IAAI;EAC3B,MAAM;IAAEC;EAAG,CAAC,GAAGb,SAAS,CAAiB,CAAC;EAC1C,MAAMc,cAAc,GAAGb,iBAAiB,CAAC,CAAC;EAE1C,MAAM,CAACc,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC4B,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAyB,EAAE,CAAC;EAElE,MAAM,CAAC8B,MAAM,EAAEC,SAAS,CAAC,GAAG/B,QAAQ,CAAyB,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAMgC,aAAa,GAAGP,cAAc,CAACA,cAAc,CAACQ,IAAI,CACrDC,CAAC,IAAKA,CAAC,CAACV,EAAE,KAAKW,MAAM,CAACX,EAAE,CAC3B,CAAC;EACD,IAAI,CAACQ,aAAa,EAAE;IAClB,oBACEf,OAAA,CAAChB,SAAS;MAAAmC,QAAA,eACRnB,OAAA,CAACf,UAAU;QAACmC,OAAO,EAAC,IAAI;QAAAD,QAAA,EAAC;MAAuB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC;EAEhB;EAEA,MAAMC,kBAAkB,GAAGA,CACzBC,UAAkB,EAClBC,KAAa,EACbC,UAA4B,EAC5BC,WAA0B,EAC1BC,aAA6B,KAC1B;IACHlB,UAAU,CAAEmB,WAAW,IAAK;MAC1B,MAAMC,WAAW,GAAGD,WAAW,CAACE,SAAS,CACtCC,MAAM,IAAKA,MAAM,CAACR,UAAU,KAAKA,UACpC,CAAC;MACD,IACEE,UAAU,KAAKhC,gBAAgB,CAACuC,uBAAuB,IACvDL,aAAa,KAAK,IAAI,IACtBD,WAAW,KAAK,IAAI,EACpB;QACA,IAAIO,oBAA+B,GAAG,EAAE;QACxC,IAAIJ,WAAW,GAAG,CAAC,CAAC,EAAE;UACpB,MAAMK,cAAc,GAAGN,WAAW,CAACC,WAAW,CAAC;UAE/C,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,cAAc,CAACE,cAAc,CAACC,MAAM,EAAEF,CAAC,EAAE,EAC3DF,oBAAoB,CAACE,CAAC,CAAC,GAAGD,cAAc,CAACE,cAAc,CAACD,CAAC,CAAC;UAC5DF,oBAAoB,CAACP,WAAW,CAAC,GAAGC,aAAa;UAEjD,MAAMW,aAAmC,GAAG;YAC1C,GAAGJ,cAAc;YACjBE,cAAc,EAAEH;UAClB,CAAC;UACD;UACA,OAAO,CACL,GAAGL,WAAW,CAACW,KAAK,CAAC,CAAC,EAAEV,WAAW,CAAC,EACpCS,aAAa,EACb,GAAGV,WAAW,CAACW,KAAK,CAACV,WAAW,GAAG,CAAC,CAAC,CACtC;QACH,CAAC,MAAM;UAAA,IAAAW,QAAA;UACL;UACA,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,eAAe,CAACC,OAAO,CAACL,MAAM,EAAEF,CAAC,EAAE,EACrDF,oBAAoB,CAACE,CAAC,CAAC,GAAG,KAAK;UACjCF,oBAAoB,CAACP,WAAW,CAAC,GAAGC,aAAa;;UAEjD;UACA,OAAO,CACL,GAAGC,WAAW,EACd;YACEe,MAAM,GAAAH,QAAA,GAAErC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAAoC,QAAA,cAAAA,QAAA,GAAI,EAAE;YACtBjB,UAAU;YACVqB,WAAW,EAAE,EAAE;YACfR,cAAc,EAAEH,oBAAoB;YACpCY,IAAI,EAAEpB;UACR,CAAC,CACF;QACH;MACF,CAAC,MAAM,IACLA,UAAU,KAAKhC,gBAAgB,CAACqD,WAAW,IAC3C,OAAOtB,KAAK,KAAK,QAAQ,EACzB;QAAA,IAAAuB,SAAA;QACA;QACA,MAAMT,aAAmC,GAAG;UAC1CK,MAAM,GAAAI,SAAA,GAAE5C,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAA2C,SAAA,cAAAA,SAAA,GAAI,EAAE;UACtBxB,UAAU,EAAEA,UAAU;UACtBsB,IAAI,EAAEpB,UAAU;UAChBmB,WAAW,EAAEpB,KAAK;UAClBY,cAAc,EAAE;QAClB,CAAC;QACD,IAAIP,WAAW,GAAG,CAAC,CAAC,EAAE;UACpB,MAAMmB,QAAQ,GAAGpB,WAAW,CAACC,WAAW,CAAC,CAACe,WAAW,CAACK,MAAM,CAACzB,KAAK,CAAC;UACnEc,aAAa,CAACM,WAAW,GAAGI,QAAQ;UACpC,OAAO,CACL,GAAGpB,WAAW,CAACW,KAAK,CAAC,CAAC,EAAEV,WAAW,CAAC,EACpCS,aAAa,EACb,GAAGV,WAAW,CAACW,KAAK,CAACV,WAAW,GAAG,CAAC,CAAC,CACtC;QACH,CAAC,MAAM,OAAO,CAAC,GAAGD,WAAW,EAAEU,aAAa,CAAC;MAC/C;MACA,OAAOV,WAAW;IACpB,CAAC,CAAC;;IAEF;IACA,IAAIlB,MAAM,CAACa,UAAU,CAAC,EAAE;MACtBZ,SAAS,CAAEuC,UAAU,KAAM;QACzB,GAAGA,UAAU;QACb,CAAC3B,UAAU,GAAG;MAChB,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAM4B,cAAc,GAAI5B,UAAkB,IAAK;IAC7C,MAAMQ,MAAM,GAAGvB,OAAO,CAACe,UAAU,CAAC,IAAI,EAAE;IACxC,IACEQ,MAAM,CAACc,IAAI,KAAKpD,gBAAgB,CAACqD,WAAW,IAC5Cf,MAAM,CAACa,WAAW,CAACQ,IAAI,CAAC,CAAC,CAACf,MAAM,KAAK,CAAC,EACtC;MACA1B,SAAS,CAAEuC,UAAU,KAAM;QACzB,GAAGA,UAAU;QACb,CAAC3B,UAAU,GACT;MACJ,CAAC,CAAC,CAAC;MACH,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC;EACD,MAAM8B,+BAA+B,GAAGA,CAAA,KAA8B;IACpE,OAAOC,MAAM,CAACC,IAAI,CAAC/C,OAAO,CAAC,CAACgD,GAAG,CAAEjC,UAAU,IAAK;MAAA,IAAAkC,SAAA;MAC9C,MAAMC,QAAQ,GAAG9C,aAAa,CAAC+C,SAAS,CAAC9C,IAAI,CAC1CC,CAAC,IAAKA,CAAC,CAACV,EAAE,KAAKW,MAAM,CAACQ,UAAU,CACnC,CAAC;MAED,IAAI,CAACmC,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,oBAAoBrC,UAAU,YAAY,CAAC;MAC7D;MAEA,MAAMsC,QAA8B,GAAG;QACrClB,MAAM,GAAAc,SAAA,GAAEtD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAAqD,SAAA,cAAAA,SAAA,GAAI,EAAE;QAAE;QACxBlC,UAAU,EAAEmC,QAAQ,CAACtD,EAAE;QACvBgC,cAAc,EAAE,EAAE;QAClBQ,WAAW,EAAEpC,OAAO,CAACkD,QAAQ,CAACtD,EAAE,CAAC,CAACwC,WAAW;QAC7CC,IAAI,EAAEa,QAAQ,CAACb;MACjB,CAAC;MAED,OAAOgB,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,gBAAgB,GAAGV,+BAA+B,CAAC,CAAC;IAC1D,IAAI3D,SAAS,CAAC,CAAC,CAACsE,oBAAoB,CAACD,gBAAgB,CAAC;EACxD,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMxB,eAAe,GAAG7B,aAAa,CAAC+C,SAAS,CAACrD,oBAAoB,CAAC;IACrE;IACA,IACEmC,eAAe,CAACI,IAAI,KAAKpD,gBAAgB,CAACqD,WAAW,IACrD,CAACK,cAAc,CAACV,eAAe,CAACrC,EAAE,CAAC,EACnC;MACA,OAAO,CAAC;IACV;IAEA,IAAIE,oBAAoB,GAAGM,aAAa,CAAC+C,SAAS,CAACtB,MAAM,GAAG,CAAC,EAAE;MAC7D9B,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD,CAAC,MAAM;MACL;MACA4D,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE3D,OAAO,CAAC;MAChDsD,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMM,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI9D,oBAAoB,GAAG,CAAC,EAAE;MAC5BC,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD;EACF,CAAC;EAED,MAAMmC,eAAe,GAAG7B,aAAa,CAAC+C,SAAS,CAACrD,oBAAoB,CAAC;EACrE,MAAM+D,QAAQ,GACX,CAAC/D,oBAAoB,GAAG,CAAC,IAAIM,aAAa,CAAC+C,SAAS,CAACtB,MAAM,GAAI,GAAG;EAErE,oBACExC,OAAA,CAAChB,SAAS;IAAAmC,QAAA,gBACRnB,OAAA,CAACf,UAAU;MAACmC,OAAO,EAAC,IAAI;MAAAD,QAAA,GAAC,iBAAe,EAACJ,aAAa,CAAC0D,IAAI;IAAA;MAAApD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eACzExB,OAAA,CAACR,GAAG;MAACkF,EAAE,EAAE,CAAE;MAAAvD,QAAA,gBACTnB,OAAA,CAACf,UAAU;QAACmC,OAAO,EAAC,IAAI;QAACuD,EAAE,EAAE;UAAEC,YAAY,EAAE;QAAM,CAAE;QAAAzD,QAAA,EAClDyB,eAAe,CAACiC;MAAI;QAAAxD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC,eAEbxB,OAAA,CAACR,GAAG;QAACkF,EAAE,EAAE,CAAE;QAAAvD,QAAA,EACRyB,eAAe,CAACI,IAAI,KAAKpD,gBAAgB,CAACkF,cAAc,gBACvD9E,OAAA,CAACb,UAAU;UACTwC,KAAK,EAAEhB,OAAO,CAACF,oBAAoB,CAAC,IAAI,EAAG;UAC3CsE,QAAQ,EAAGC,CAAC,IACVvD,kBAAkB,CAChBmB,eAAe,CAACrC,EAAE,EAClByE,CAAC,CAACC,MAAM,CAACtD,KAAK,EACd/B,gBAAgB,CAACkF,cAAc,EAC/B,IAAI,EACJ,IACF,CACD;UAAA3D,QAAA,GAAAhB,qBAAA,GAEAyC,eAAe,CAACC,OAAO,cAAA1C,qBAAA,uBAAvBA,qBAAA,CAAyBwD,GAAG,CAAEuB,MAAM,iBACnClF,OAAA,CAACX,gBAAgB;YAEfsC,KAAK,EAAEuD,MAAM,CAACL,IAAK;YACnBM,OAAO,eAAEnF,OAAA,CAACZ,KAAK;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YACnB4D,KAAK,EAAEF,MAAM,CAACL;UAAK,GAHdK,MAAM,CAAC3E,EAAE;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIf,CACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,GACXoB,eAAe,CAACI,IAAI,KACtBpD,gBAAgB,CAACuC,uBAAuB,IAAA/B,sBAAA,GACxCwC,eAAe,CAACC,OAAO,cAAAzC,sBAAA,uBAAvBA,sBAAA,CAAyBuD,GAAG,CAAC,CAACuB,MAAM,EAAE5C,CAAC;UAAA,IAAA+C,qBAAA,EAAAC,sBAAA;UAAA,oBACrCtF,OAAA,CAACX,gBAAgB;YAEf8F,OAAO,eACLnF,OAAA,CAACd,QAAQ;cACPqG,OAAO,GAAAF,qBAAA,IAAAC,sBAAA,GACL3E,OAAO,CAACF,oBAAoB,CAAC,cAAA6E,sBAAA,uBAA7BA,sBAAA,CAA+B/C,cAAc,CAACD,CAAC,CAAC,cAAA+C,qBAAA,cAAAA,qBAAA,GAAI,KACrD;cACDN,QAAQ,EAAGC,CAAC,IACVvD,kBAAkB,CAChBmB,eAAe,CAACrC,EAAE,EAClB,EAAE,EACFX,gBAAgB,CAACuC,uBAAuB,EACxCG,CAAC,EACD0C,CAAC,CAACC,MAAM,CAACM,OACX;YACD;cAAAlE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CACF;YACD4D,KAAK,EAAEF,MAAM,CAACL;UAAK,GAjBdK,MAAM,CAAC3E,EAAE;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAkBf,CAAC;QAAA,CACH,CAAC,gBAEFxB,OAAA,CAACP,SAAS;UACR2B,OAAO,EAAC,UAAU;UAClBoE,SAAS;UACT7D,KAAK,EAAE,EAAAtB,sBAAA,GAAAM,OAAO,CAACF,oBAAoB,CAAC,cAAAJ,sBAAA,uBAA7BA,sBAAA,CAA+B0C,WAAW,KAAI,EAAG;UACxDgC,QAAQ,EAAGC,CAAC,IAAK;YACfvD,kBAAkB,CAChBmB,eAAe,CAACrC,EAAE,EAClByE,CAAC,CAACC,MAAM,CAACtD,KAAK,EACd/B,gBAAgB,CAACqD,WAAW,EAC5B,IAAI,EACJ,IACF,CAAC;UACH,CAAE;UACFwC,KAAK,EAAE,CAAC,CAAC5E,MAAM,CAAC+B,eAAe,CAACrC,EAAE,CAAE;UACpCmF,UAAU,EAAE7E,MAAM,CAAC+B,eAAe,CAACrC,EAAE,CAAE;UACvCoF,QAAQ,EAAE;QAAK;UAAAtE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENxB,OAAA,CAACR,GAAG;MAACkF,EAAE,EAAE,CAAE;MAACkB,OAAO,EAAC,MAAM;MAACC,cAAc,EAAC,eAAe;MAAA1E,QAAA,gBACvDnB,OAAA,CAACV,MAAM;QACL8B,OAAO,EAAC,WAAW;QACnB0E,OAAO,EAAEvB,cAAe;QACxBwB,QAAQ,EAAEtF,oBAAoB,KAAK,CAAE;QAAAU,QAAA,EACtC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTxB,OAAA,CAACV,MAAM;QAAC8B,OAAO,EAAC,WAAW;QAAC0E,OAAO,EAAE1B,UAAW;QAAAjD,QAAA,EAAC;MAEjD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNxB,OAAA,CAACR,GAAG;MAACkF,EAAE,EAAE,CAAE;MAAAvD,QAAA,gBACTnB,OAAA,CAACT,cAAc;QAAC6B,OAAO,EAAC,aAAa;QAACO,KAAK,EAAE6C;MAAS;QAAAnD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzDxB,OAAA,CAACf,UAAU;QAACmC,OAAO,EAAC,OAAO;QAAC4E,KAAK,EAAC,eAAe;QAAA7E,QAAA,EAC9C,aAAaV,oBAAoB,GAAG,CAAC,IACpCM,aAAa,CAAC+C,SAAS,CAACtB,MAAM;MAC9B;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB,CAAC;AAACtB,EAAA,CAtRWD,aAAuB;EAAA,QACrBH,OAAO,EACLJ,SAAS,EACDC,iBAAiB;AAAA;AAAAsG,EAAA,GAH7BhG,aAAuB;AAAA,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}