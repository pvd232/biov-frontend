{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Main } from \"./Main\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { CssBaseline } from \"@mui/material\";\nimport { StyledEngineProvider } from \"@mui/material/styles\";\nimport { customTheme } from \"./customTheme\";\nimport { UserContext, UserContextProvider } from \"./context/UserContextProvider\";\nimport { QuestionnaireContextProvider } from \"./context/QuestionnaireContextProvider\";\nimport { QuestionnaireStatsContextProvider } from \"./context/QuestionnaireStatsContextProvider\";\nimport { useContext } from \"react\";\nimport { QuestionResponseContextProvider } from \"./context/QuestionResponseContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  return /*#__PURE__*/_jsxDEV(StyledEngineProvider, {\n    injectFirst: true,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: customTheme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserContextProvider, {\n        children: /*#__PURE__*/_jsxDEV(ConditionalContextWrapper, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n// Wrapper to conditionally load contexts based on user role\n_c = App;\nconst ConditionalContextWrapper = () => {\n  _s();\n  const {\n    role\n  } = useContext(UserContext); // Get user role from context\n  console.log(\"role\", role);\n  return role === \"admin\" ? /*#__PURE__*/_jsxDEV(AdminContextProviders, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this) : role === \"non-admin\" ? /*#__PURE__*/_jsxDEV(NonAdminContextProviders, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(ErrorScreen, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n// Context providers for admin users\n_s(ConditionalContextWrapper, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = ConditionalContextWrapper;\nconst AdminContextProviders = () => /*#__PURE__*/_jsxDEV(QuestionnaireStatsContextProvider, {\n  children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 42,\n  columnNumber: 3\n}, this);\n\n// Context providers for non-admin users\n_c3 = AdminContextProviders;\nconst NonAdminContextProviders = () => /*#__PURE__*/_jsxDEV(QuestionnaireContextProvider, {\n  children: /*#__PURE__*/_jsxDEV(QuestionResponseContextProvider, {\n    children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 3\n}, this);\n// Loading screen or fallback while determining user role\n\n// Error screen if role is unknown\n_c4 = NonAdminContextProviders;\nconst ErrorScreen = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: \"Error determining role\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 58,\n  columnNumber: 27\n}, this);\n_c5 = ErrorScreen;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ConditionalContextWrapper\");\n$RefreshReg$(_c3, \"AdminContextProviders\");\n$RefreshReg$(_c4, \"NonAdminContextProviders\");\n$RefreshReg$(_c5, \"ErrorScreen\");","map":{"version":3,"names":["Main","ThemeProvider","CssBaseline","StyledEngineProvider","customTheme","UserContext","UserContextProvider","QuestionnaireContextProvider","QuestionnaireStatsContextProvider","useContext","QuestionResponseContextProvider","jsxDEV","_jsxDEV","App","injectFirst","children","theme","fileName","_jsxFileName","lineNumber","columnNumber","ConditionalContextWrapper","_c","_s","role","console","log","AdminContextProviders","NonAdminContextProviders","ErrorScreen","_c2","_c3","_c4","_c5","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/App.tsx"],"sourcesContent":["import { Main } from \"./Main\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { CssBaseline } from \"@mui/material\";\nimport { StyledEngineProvider } from \"@mui/material/styles\";\nimport { customTheme } from \"./customTheme\";\nimport {\n  UserContext,\n  UserContextProvider,\n} from \"./context/UserContextProvider\";\nimport { QuestionnaireContextProvider } from \"./context/QuestionnaireContextProvider\";\nimport { QuestionnaireStatsContextProvider } from \"./context/QuestionnaireStatsContextProvider\";\nimport { useContext } from \"react\";\nimport { QuestionResponseContextProvider } from \"./context/QuestionResponseContextProvider\";\n\nexport const App = () => {\n  return (\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={customTheme}>\n        <CssBaseline />\n        <UserContextProvider>\n          <ConditionalContextWrapper />\n        </UserContextProvider>\n      </ThemeProvider>\n    </StyledEngineProvider>\n  );\n};\n// Wrapper to conditionally load contexts based on user role\nconst ConditionalContextWrapper = () => {\n  const { role } = useContext(UserContext)!; // Get user role from context\n  console.log(\"role\", role);\n\n  return role === \"admin\" ? (\n    <AdminContextProviders />\n  ) : role === \"non-admin\" ? (\n    <NonAdminContextProviders />\n  ) : (\n    <ErrorScreen />\n  );\n};\n// Context providers for admin users\nconst AdminContextProviders = () => (\n  <QuestionnaireStatsContextProvider>\n    <Main />\n  </QuestionnaireStatsContextProvider>\n);\n\n// Context providers for non-admin users\nconst NonAdminContextProviders = () => (\n  <QuestionnaireContextProvider>\n    <QuestionResponseContextProvider>\n      <Main />\n    </QuestionResponseContextProvider>\n  </QuestionnaireContextProvider>\n);\n// Loading screen or fallback while determining user role\n\n// Error screen if role is unknown\nconst ErrorScreen = () => <div>Error determining role</div>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}