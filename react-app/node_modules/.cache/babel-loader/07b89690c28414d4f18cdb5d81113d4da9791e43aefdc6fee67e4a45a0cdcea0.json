{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../types/UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _currentQuestion$opti, _currentQuestion$opti2;\n  const user = useUser().user;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  if (!questionnaire) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Questionnaire not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  const handleAnswerChange = (questionId, value, answerType, isChecked) => {\n    console.log(\"value\", value);\n    console.log(\"answerType\", answerType);\n    console.log(\"questionId\", questionId);\n    console.log(\"isChecked\", isChecked);\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && typeof value === \"number\") {\n        // Initialize empty options array if it doesn't exist\n        let updatedOptionIds = [];\n        console.log(\"updatedOptionIds\", updatedOptionIds);\n        if (answerIndex > -1) {\n          const existingAnswer = prevAnswers[answerIndex];\n          console.log(\"existingAnswer\", existingAnswer);\n          const currentOptionIds = existingAnswer.optionIds || [];\n          updatedOptionIds = isChecked ? [...currentOptionIds, value] : currentOptionIds.filter(id => id !== value);\n          const updatedAnswer = {\n            ...existingAnswer,\n            optionIds: updatedOptionIds\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id;\n          return [...prevAnswers, {\n            userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n            questionId,\n            shortAnswer: \"\",\n            optionIds: [value],\n            type: answerType // Add the missing 'type' property\n          }];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && typeof value === \"string\") {\n        var _user$id2, _prevAnswers$answerIn;\n        // Handle short-response\n        const updatedAnswer = {\n          userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n          // Replace with actual user ID\n          questionId: questionId,\n          type: answerType,\n          shortAnswer: value,\n          optionIds: ((_prevAnswers$answerIn = prevAnswers[answerIndex]) === null || _prevAnswers$answerIn === void 0 ? void 0 : _prevAnswers$answerIn.optionIds) || []\n        };\n        console.log(\"updatedAnswer\", updatedAnswer);\n        if (answerIndex > -1) {\n          updatedAnswer.shortAnswer.concat(value);\n          console.log(\"updatedAnswer post\", updatedAnswer);\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          const test = [...prevAnswers, updatedAnswer];\n          console.log(\"test\", test);\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"\"\n      }));\n    }\n  };\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && answer.shortAnswer.trim().length === 0) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = () => {\n    return Object.keys(answers).map(questionId => {\n      var _user$id3;\n      const question = questionnaire.questions.find(q => q.id === Number(questionId));\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n      const response = {\n        userId: (_user$id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id3 !== void 0 ? _user$id3 : \"\",\n        // Replace with actual user ID\n        questionId: question.id,\n        optionIds: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type\n      };\n      return response;\n    });\n  };\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) {\n      return; // Prevent moving to the next question if validation fails\n    }\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => {\n          var _answers$currentQuest;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: ((_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.optionIds[option.id]) === 1 ? true : false,\n              onChange: e => handleAnswerChange(currentQuestion.id, option.id, QuestionCategory.MultipleChoice, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this);\n        }) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map(option => {\n          var _answers$currentQuest2;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: ((_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : _answers$currentQuest2.optionIds[option.id]) === 1 ? true : false,\n              onChange: e => handleAnswerChange(currentQuestion.id, option.id, QuestionCategory.MultipleChoice, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: answers[currentQuestion.id] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, e.target.value, QuestionCategory.ShortAnswer, false),\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"gREewYr41+kU2wZV4lpa9tvoqWQ=\", false, function () {\n  return [useUser, useParams, useQuestionnaires];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","jsxDEV","_jsxDEV","Questionnaire","_s","_currentQuestion$opti","_currentQuestion$opti2","user","id","questionnaires","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","value","answerType","isChecked","console","log","prevAnswers","answerIndex","findIndex","answer","MultipleChoiceSelectAll","updatedOptionIds","existingAnswer","currentOptionIds","optionIds","filter","updatedAnswer","slice","_user$id","userId","shortAnswer","type","ShortAnswer","_user$id2","_prevAnswers$answerIn","concat","test","prevErrors","validateAnswer","trim","length","formatAnswersAsQuestionResponse","Object","keys","map","_user$id3","question","questions","Error","response","handleSubmit","formattedAnswers","postQuestionResponse","handleNext","currentQuestion","handlePrevious","progress","name","mt","sx","marginBottom","text","MultipleChoice","options","option","_answers$currentQuest","control","checked","onChange","e","target","label","_answers$currentQuest2","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponseType } from \"../types/QuestionResponseType\";\nimport { useUser } from \"../../../types/UserContextProvider\";\n\nexport const Questionnaire: React.FC = () => {\n  const user = useUser().user;\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponseType[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  if (!questionnaire) {\n    return (\n      <Container>\n        <Typography variant=\"h6\">Questionnaire not found</Typography>\n      </Container>\n    );\n  }\n\n  const handleAnswerChange = (\n    questionId: number,\n    value: number | string,\n    answerType: QuestionCategory,\n    isChecked: boolean\n  ) => {\n    console.log(\"value\", value);\n    console.log(\"answerType\", answerType);\n    console.log(\"questionId\", questionId);\n    console.log(\"isChecked\", isChecked);\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        typeof value === \"number\"\n      ) {\n        // Initialize empty options array if it doesn't exist\n        let updatedOptionIds: number[] = [];\n        console.log(\"updatedOptionIds\", updatedOptionIds);\n\n        if (answerIndex > -1) {\n          const existingAnswer = prevAnswers[answerIndex];\n          console.log(\"existingAnswer\", existingAnswer);\n          const currentOptionIds = existingAnswer.optionIds || [];\n\n          updatedOptionIds = isChecked\n            ? [...currentOptionIds, value]\n            : currentOptionIds.filter((id) => id !== value);\n\n          const updatedAnswer: QuestionResponseType = {\n            ...existingAnswer,\n            optionIds: updatedOptionIds,\n          };\n\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          return [\n            ...prevAnswers,\n            {\n              userId: user?.id ?? \"\",\n              questionId,\n              shortAnswer: \"\",\n              optionIds: [value],\n              type: answerType, // Add the missing 'type' property\n            },\n          ];\n        }\n      } else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        typeof value === \"string\"\n      ) {\n        // Handle short-response\n        const updatedAnswer: QuestionResponseType = {\n          userId: user?.id ?? \"\", // Replace with actual user ID\n          questionId: questionId,\n          type: answerType,\n          shortAnswer: value,\n          optionIds: prevAnswers[answerIndex]?.optionIds || [],\n        };\n        console.log(\"updatedAnswer\", updatedAnswer);\n        if (answerIndex > -1) {\n          updatedAnswer.shortAnswer.concat(value);\n          console.log(\"updatedAnswer post\", updatedAnswer);\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const test = [...prevAnswers, updatedAnswer];\n          console.log(\"test\", test);\n\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n    }\n  };\n\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      answer.shortAnswer.trim().length === 0\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = (): QuestionResponseType[] => {\n    return Object.keys(answers).map((questionId) => {\n      const question = questionnaire.questions.find(\n        (q) => q.id === Number(questionId)\n      );\n\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n\n      const response: QuestionResponseType = {\n        userId: user?.id ?? \"\", // Replace with actual user ID\n        questionId: question.id,\n        optionIds: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type,\n      };\n\n      return response;\n    });\n  };\n\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    ) {\n      return; // Prevent moving to the next question if validation fails\n    }\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            currentQuestion.options?.map((option) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      answers[currentQuestionIndex]?.optionIds[option.id] === 1\n                        ? true\n                        : false\n                    }\n                    onChange={(e) =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        option.id,\n                        QuestionCategory.MultipleChoice,\n                        e.target.checked\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      answers[currentQuestionIndex]?.optionIds[option.id] === 1\n                        ? true\n                        : false\n                    }\n                    onChange={(e) =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        option.id,\n                        QuestionCategory.MultipleChoice,\n                        e.target.checked\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestion.id] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  QuestionCategory.ShortAnswer,\n                  false\n                )\n              }\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}