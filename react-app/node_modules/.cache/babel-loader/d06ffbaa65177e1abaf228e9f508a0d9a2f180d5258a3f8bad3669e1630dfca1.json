{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../types/UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest;\n  const user = useUser().user;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  if (!questionnaire) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Questionnaire not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  const handleAnswerChange = (questionId, value, answerType, optionChecked) => {\n    console.log(\"value\", value);\n    console.log(\"answerType\", answerType);\n    console.log(\"questionId\", questionId);\n    console.log(\"optionChecked\", optionChecked);\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n      console.log(\"answerIndex\", answerIndex);\n      console.log(\"currentQuestionIndex\", currentQuestionIndex);\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && optionChecked !== null) {\n        let updateOptionsChecked = [];\n        console.log(\"answerIndex\", answerIndex);\n        // Initialize empty options array if it doesn't exist\n        if (answerIndex > -1) {\n          console.log(\"prevAnswers ins\", prevAnswers);\n          for (let i = 0; i < prevAnswers[answerIndex].optionsChecked.length; i++) updateOptionsChecked[i] = prevAnswers[answerIndex].optionsChecked[i];\n          updateOptionsChecked[questionId] = optionChecked;\n          const existingAnswer = prevAnswers[answerIndex];\n          console.log(\"existingAnswer\", existingAnswer);\n          const updatedAnswer = {\n            ...existingAnswer,\n            optionsChecked: updateOptionsChecked\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id;\n          for (let i = 0; i < currentQuestion.options.length; i++) updateOptionsChecked[i] = false;\n          updateOptionsChecked[questionId] = optionChecked;\n          return [...prevAnswers, {\n            userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n            questionId,\n            shortAnswer: \"\",\n            optionsChecked: updateOptionsChecked,\n            type: answerType // Add the missing 'type' property\n          }];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && typeof value === \"string\") {\n        var _user$id2;\n        console.log(\"prevAnswers\", prevAnswers);\n\n        // Handle short-response\n        const updatedAnswer = {\n          userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n          // Replace with actual user ID\n          questionId: questionId,\n          type: answerType,\n          shortAnswer: value,\n          optionsChecked: []\n        };\n        // console.log(\"updatedAnswer\", updatedAnswer);\n        if (answerIndex > -1) {\n          const newShort = prevAnswers[answerIndex].shortAnswer.concat(value);\n          updatedAnswer.shortAnswer = newShort;\n          // console.log(\"updatedAnswer post\", updatedAnswer);\n          const test2 = [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n          console.log(\"test2\", test2);\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          const test = [...prevAnswers, updatedAnswer];\n          console.log(\"test\", test);\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"\"\n      }));\n    }\n  };\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && answer.shortAnswer.trim().length === 0) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = () => {\n    return Object.keys(answers).map(questionId => {\n      var _user$id3;\n      const question = questionnaire.questions.find(q => q.id === Number(questionId));\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n      const response = {\n        userId: (_user$id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id3 !== void 0 ? _user$id3 : \"\",\n        // Replace with actual user ID\n        questionId: question.id,\n        optionsChecked: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type\n      };\n      return response;\n    });\n  };\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) {\n      return; // Prevent moving to the next question if validation fails\n    }\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[currentQuestionIndex] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, e.target.value, QuestionCategory.MultipleChoice, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.text,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map((option, i) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox\n          // checked={\n          //   answers[currentQuestionIndex]?.optionsChecked[i] ?? false\n          // }\n          , {\n            onChange: e => {\n              // let options: boolean[] = [];\n\n              // for (let i = 0; i < currentQuestion.options.length; i++)\n              //   options.push(currentQuestion.options[i].);\n              // console.log(\"options i\", options[i]);\n              // console.log(\"option.id\", option.id);\n              // options[i] = e.target.checked;\n              // console.log(\"options i despues\", options[i]);\n\n              handleAnswerChange(currentQuestion.id, \"\", QuestionCategory.MultipleChoiceSelectAll, e.target.checked);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 19\n          }, this),\n          label: option.text\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.shortAnswer) || \"\",\n          onChange: e => {\n            const tt = answers;\n            console.log(\"tt\", tt);\n            console.log(\"currentQuestionIndex\", currentQuestionIndex);\n            handleAnswerChange(currentQuestion.id, e.target.value, QuestionCategory.ShortAnswer, null);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"gREewYr41+kU2wZV4lpa9tvoqWQ=\", false, function () {\n  return [useUser, useParams, useQuestionnaires];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","jsxDEV","_jsxDEV","Questionnaire","_s","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest","user","id","questionnaires","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","value","answerType","optionChecked","console","log","prevAnswers","answerIndex","findIndex","answer","MultipleChoiceSelectAll","updateOptionsChecked","i","optionsChecked","length","existingAnswer","updatedAnswer","slice","_user$id","currentQuestion","options","userId","shortAnswer","type","ShortAnswer","_user$id2","newShort","concat","test2","test","prevErrors","validateAnswer","trim","formatAnswersAsQuestionResponse","Object","keys","map","_user$id3","question","questions","Error","response","handleSubmit","formattedAnswers","postQuestionResponse","handleNext","handlePrevious","progress","name","mt","sx","marginBottom","text","MultipleChoice","onChange","e","target","option","control","label","checked","fullWidth","tt","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponseType } from \"../types/QuestionResponseType\";\nimport { useUser } from \"../../../types/UserContextProvider\";\n\nexport const Questionnaire: React.FC = () => {\n  const user = useUser().user;\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponseType[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  if (!questionnaire) {\n    return (\n      <Container>\n        <Typography variant=\"h6\">Questionnaire not found</Typography>\n      </Container>\n    );\n  }\n\n  const handleAnswerChange = (\n    questionId: number,\n    value: string,\n    answerType: QuestionCategory,\n    optionChecked: boolean | null\n  ) => {\n    console.log(\"value\", value);\n    console.log(\"answerType\", answerType);\n    console.log(\"questionId\", questionId);\n    console.log(\"optionChecked\", optionChecked);\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n      console.log(\"answerIndex\", answerIndex);\n      console.log(\"currentQuestionIndex\", currentQuestionIndex);\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        optionChecked !== null\n      ) {\n        let updateOptionsChecked: boolean[] = [];\n\n        console.log(\"answerIndex\", answerIndex);\n        // Initialize empty options array if it doesn't exist\n        if (answerIndex > -1) {\n          console.log(\"prevAnswers ins\", prevAnswers);\n\n          for (\n            let i = 0;\n            i < prevAnswers[answerIndex].optionsChecked.length;\n            i++\n          )\n            updateOptionsChecked[i] =\n              prevAnswers[answerIndex].optionsChecked[i];\n          updateOptionsChecked[questionId] = optionChecked;\n          const existingAnswer = prevAnswers[answerIndex];\n          console.log(\"existingAnswer\", existingAnswer);\n          const updatedAnswer: QuestionResponseType = {\n            ...existingAnswer,\n            optionsChecked: updateOptionsChecked,\n          };\n\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          for (let i = 0; i < currentQuestion.options.length; i++)\n            updateOptionsChecked[i] = false;\n          updateOptionsChecked[questionId] = optionChecked;\n          return [\n            ...prevAnswers,\n            {\n              userId: user?.id ?? \"\",\n              questionId,\n              shortAnswer: \"\",\n              optionsChecked: updateOptionsChecked,\n              type: answerType, // Add the missing 'type' property\n            },\n          ];\n        }\n      } else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        typeof value === \"string\"\n      ) {\n        console.log(\"prevAnswers\", prevAnswers);\n\n        // Handle short-response\n        const updatedAnswer: QuestionResponseType = {\n          userId: user?.id ?? \"\", // Replace with actual user ID\n          questionId: questionId,\n          type: answerType,\n          shortAnswer: value,\n          optionsChecked: [],\n        };\n        // console.log(\"updatedAnswer\", updatedAnswer);\n        if (answerIndex > -1) {\n          const newShort = prevAnswers[answerIndex].shortAnswer.concat(value);\n          updatedAnswer.shortAnswer = newShort;\n          // console.log(\"updatedAnswer post\", updatedAnswer);\n          const test2 = [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n          console.log(\"test2\", test2);\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const test = [...prevAnswers, updatedAnswer];\n          console.log(\"test\", test);\n\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n    }\n  };\n\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      answer.shortAnswer.trim().length === 0\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = (): QuestionResponseType[] => {\n    return Object.keys(answers).map((questionId) => {\n      const question = questionnaire.questions.find(\n        (q) => q.id === Number(questionId)\n      );\n\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n\n      const response: QuestionResponseType = {\n        userId: user?.id ?? \"\", // Replace with actual user ID\n        questionId: question.id,\n        optionsChecked: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type,\n      };\n\n      return response;\n    });\n  };\n\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    ) {\n      return; // Prevent moving to the next question if validation fails\n    }\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  QuestionCategory.MultipleChoice,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.text}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option, i) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    // checked={\n                    //   answers[currentQuestionIndex]?.optionsChecked[i] ?? false\n                    // }\n                    onChange={(e) => {\n                      // let options: boolean[] = [];\n\n                      // for (let i = 0; i < currentQuestion.options.length; i++)\n                      //   options.push(currentQuestion.options[i].);\n                      // console.log(\"options i\", options[i]);\n                      // console.log(\"option.id\", option.id);\n                      // options[i] = e.target.checked;\n                      // console.log(\"options i despues\", options[i]);\n\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        \"\",\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        e.target.checked\n                      );\n                    }}\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                const tt = answers;\n                console.log(\"tt\", tt);\n                console.log(\"currentQuestionIndex\", currentQuestionIndex);\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  QuestionCategory.ShortAnswer,\n                  null\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,SAAS,EACTC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,gBAAgB,EAChBC,MAAM,EACNC,cAAc,EACdC,GAAG,EACHC,SAAS,QACJ,eAAe;AACtB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,OAAO,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,OAAO,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA;EAC3C,MAAMC,IAAI,GAAGR,OAAO,CAAC,CAAC,CAACQ,IAAI;EAC3B,MAAM;IAAEC;EAAG,CAAC,GAAGb,SAAS,CAAiB,CAAC;EAC1C,MAAMc,cAAc,GAAGb,iBAAiB,CAAC,CAAC;EAE1C,MAAM,CAACc,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC4B,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAyB,EAAE,CAAC;EAElE,MAAM,CAAC8B,MAAM,EAAEC,SAAS,CAAC,GAAG/B,QAAQ,CAAyB,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAMgC,aAAa,GAAGP,cAAc,CAACA,cAAc,CAACQ,IAAI,CACrDC,CAAC,IAAKA,CAAC,CAACV,EAAE,KAAKW,MAAM,CAACX,EAAE,CAC3B,CAAC;EACD,IAAI,CAACQ,aAAa,EAAE;IAClB,oBACEf,OAAA,CAAChB,SAAS;MAAAmC,QAAA,eACRnB,OAAA,CAACf,UAAU;QAACmC,OAAO,EAAC,IAAI;QAAAD,QAAA,EAAC;MAAuB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC;EAEhB;EAEA,MAAMC,kBAAkB,GAAGA,CACzBC,UAAkB,EAClBC,KAAa,EACbC,UAA4B,EAC5BC,aAA6B,KAC1B;IACHC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEJ,KAAK,CAAC;IAC3BG,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,UAAU,CAAC;IACrCE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEL,UAAU,CAAC;IACrCI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,aAAa,CAAC;IAC3CjB,UAAU,CAAEoB,WAAW,IAAK;MAC1B,MAAMC,WAAW,GAAGD,WAAW,CAACE,SAAS,CACtCC,MAAM,IAAKA,MAAM,CAACT,UAAU,KAAKA,UACpC,CAAC;MACDI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEE,WAAW,CAAC;MACvCH,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEtB,oBAAoB,CAAC;MACzD,IACEmB,UAAU,KAAKhC,gBAAgB,CAACwC,uBAAuB,IACvDP,aAAa,KAAK,IAAI,EACtB;QACA,IAAIQ,oBAA+B,GAAG,EAAE;QAExCP,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEE,WAAW,CAAC;QACvC;QACA,IAAIA,WAAW,GAAG,CAAC,CAAC,EAAE;UACpBH,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,WAAW,CAAC;UAE3C,KACE,IAAIM,CAAC,GAAG,CAAC,EACTA,CAAC,GAAGN,WAAW,CAACC,WAAW,CAAC,CAACM,cAAc,CAACC,MAAM,EAClDF,CAAC,EAAE,EAEHD,oBAAoB,CAACC,CAAC,CAAC,GACrBN,WAAW,CAACC,WAAW,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC;UAC9CD,oBAAoB,CAACX,UAAU,CAAC,GAAGG,aAAa;UAChD,MAAMY,cAAc,GAAGT,WAAW,CAACC,WAAW,CAAC;UAC/CH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEU,cAAc,CAAC;UAC7C,MAAMC,aAAmC,GAAG;YAC1C,GAAGD,cAAc;YACjBF,cAAc,EAAEF;UAClB,CAAC;UAED,OAAO,CACL,GAAGL,WAAW,CAACW,KAAK,CAAC,CAAC,EAAEV,WAAW,CAAC,EACpCS,aAAa,EACb,GAAGV,WAAW,CAACW,KAAK,CAACV,WAAW,GAAG,CAAC,CAAC,CACtC;QACH,CAAC,MAAM;UAAA,IAAAW,QAAA;UACL,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,eAAe,CAACC,OAAO,CAACN,MAAM,EAAEF,CAAC,EAAE,EACrDD,oBAAoB,CAACC,CAAC,CAAC,GAAG,KAAK;UACjCD,oBAAoB,CAACX,UAAU,CAAC,GAAGG,aAAa;UAChD,OAAO,CACL,GAAGG,WAAW,EACd;YACEe,MAAM,GAAAH,QAAA,GAAEtC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAAqC,QAAA,cAAAA,QAAA,GAAI,EAAE;YACtBlB,UAAU;YACVsB,WAAW,EAAE,EAAE;YACfT,cAAc,EAAEF,oBAAoB;YACpCY,IAAI,EAAErB,UAAU,CAAE;UACpB,CAAC,CACF;QACH;MACF,CAAC,MAAM,IACLA,UAAU,KAAKhC,gBAAgB,CAACsD,WAAW,IAC3C,OAAOvB,KAAK,KAAK,QAAQ,EACzB;QAAA,IAAAwB,SAAA;QACArB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,WAAW,CAAC;;QAEvC;QACA,MAAMU,aAAmC,GAAG;UAC1CK,MAAM,GAAAI,SAAA,GAAE7C,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAA4C,SAAA,cAAAA,SAAA,GAAI,EAAE;UAAE;UACxBzB,UAAU,EAAEA,UAAU;UACtBuB,IAAI,EAAErB,UAAU;UAChBoB,WAAW,EAAErB,KAAK;UAClBY,cAAc,EAAE;QAClB,CAAC;QACD;QACA,IAAIN,WAAW,GAAG,CAAC,CAAC,EAAE;UACpB,MAAMmB,QAAQ,GAAGpB,WAAW,CAACC,WAAW,CAAC,CAACe,WAAW,CAACK,MAAM,CAAC1B,KAAK,CAAC;UACnEe,aAAa,CAACM,WAAW,GAAGI,QAAQ;UACpC;UACA,MAAME,KAAK,GAAG,CACZ,GAAGtB,WAAW,CAACW,KAAK,CAAC,CAAC,EAAEV,WAAW,CAAC,EACpCS,aAAa,EACb,GAAGV,WAAW,CAACW,KAAK,CAACV,WAAW,GAAG,CAAC,CAAC,CACtC;UACDH,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEuB,KAAK,CAAC;UAC3B,OAAO,CACL,GAAGtB,WAAW,CAACW,KAAK,CAAC,CAAC,EAAEV,WAAW,CAAC,EACpCS,aAAa,EACb,GAAGV,WAAW,CAACW,KAAK,CAACV,WAAW,GAAG,CAAC,CAAC,CACtC;QACH,CAAC,MAAM;UACL,MAAMsB,IAAI,GAAG,CAAC,GAAGvB,WAAW,EAAEU,aAAa,CAAC;UAC5CZ,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEwB,IAAI,CAAC;UAEzB,OAAO,CAAC,GAAGvB,WAAW,EAAEU,aAAa,CAAC;QACxC;MACF;MAEA,OAAOV,WAAW;IACpB,CAAC,CAAC;;IAEF;IACA,IAAInB,MAAM,CAACa,UAAU,CAAC,EAAE;MACtBZ,SAAS,CAAE0C,UAAU,KAAM;QACzB,GAAGA,UAAU;QACb,CAAC9B,UAAU,GAAG;MAChB,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAM+B,cAAc,GAAI/B,UAAkB,IAAK;IAC7C,MAAMS,MAAM,GAAGxB,OAAO,CAACe,UAAU,CAAC,IAAI,EAAE;IACxC,IACES,MAAM,CAACc,IAAI,KAAKrD,gBAAgB,CAACsD,WAAW,IAC5Cf,MAAM,CAACa,WAAW,CAACU,IAAI,CAAC,CAAC,CAAClB,MAAM,KAAK,CAAC,EACtC;MACA1B,SAAS,CAAE0C,UAAU,KAAM;QACzB,GAAGA,UAAU;QACb,CAAC9B,UAAU,GACT;MACJ,CAAC,CAAC,CAAC;MACH,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC;EACD,MAAMiC,+BAA+B,GAAGA,CAAA,KAA8B;IACpE,OAAOC,MAAM,CAACC,IAAI,CAAClD,OAAO,CAAC,CAACmD,GAAG,CAAEpC,UAAU,IAAK;MAAA,IAAAqC,SAAA;MAC9C,MAAMC,QAAQ,GAAGjD,aAAa,CAACkD,SAAS,CAACjD,IAAI,CAC1CC,CAAC,IAAKA,CAAC,CAACV,EAAE,KAAKW,MAAM,CAACQ,UAAU,CACnC,CAAC;MAED,IAAI,CAACsC,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,oBAAoBxC,UAAU,YAAY,CAAC;MAC7D;MAEA,MAAMyC,QAA8B,GAAG;QACrCpB,MAAM,GAAAgB,SAAA,GAAEzD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAAwD,SAAA,cAAAA,SAAA,GAAI,EAAE;QAAE;QACxBrC,UAAU,EAAEsC,QAAQ,CAACzD,EAAE;QACvBgC,cAAc,EAAE,EAAE;QAClBS,WAAW,EAAErC,OAAO,CAACqD,QAAQ,CAACzD,EAAE,CAAC,CAACyC,WAAW;QAC7CC,IAAI,EAAEe,QAAQ,CAACf;MACjB,CAAC;MAED,OAAOkB,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,gBAAgB,GAAGV,+BAA+B,CAAC,CAAC;IAC1D,IAAI9D,SAAS,CAAC,CAAC,CAACyE,oBAAoB,CAACD,gBAAgB,CAAC;EACxD,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAM1B,eAAe,GAAG9B,aAAa,CAACkD,SAAS,CAACxD,oBAAoB,CAAC;IACrE;IACA,IACEoC,eAAe,CAACI,IAAI,KAAKrD,gBAAgB,CAACsD,WAAW,IACrD,CAACO,cAAc,CAACZ,eAAe,CAACtC,EAAE,CAAC,EACnC;MACA,OAAO,CAAC;IACV;IAEA,IAAIE,oBAAoB,GAAGM,aAAa,CAACkD,SAAS,CAACzB,MAAM,GAAG,CAAC,EAAE;MAC7D9B,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD,CAAC,MAAM;MACL;MACAqB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEpB,OAAO,CAAC;MAChDyD,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI/D,oBAAoB,GAAG,CAAC,EAAE;MAC5BC,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD;EACF,CAAC;EAED,MAAMoC,eAAe,GAAG9B,aAAa,CAACkD,SAAS,CAACxD,oBAAoB,CAAC;EACrE,MAAMgE,QAAQ,GACX,CAAChE,oBAAoB,GAAG,CAAC,IAAIM,aAAa,CAACkD,SAAS,CAACzB,MAAM,GAAI,GAAG;EAErE,oBACExC,OAAA,CAAChB,SAAS;IAAAmC,QAAA,gBACRnB,OAAA,CAACf,UAAU;MAACmC,OAAO,EAAC,IAAI;MAAAD,QAAA,GAAC,iBAAe,EAACJ,aAAa,CAAC2D,IAAI;IAAA;MAAArD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eACzExB,OAAA,CAACR,GAAG;MAACmF,EAAE,EAAE,CAAE;MAAAxD,QAAA,gBACTnB,OAAA,CAACf,UAAU;QAACmC,OAAO,EAAC,IAAI;QAACwD,EAAE,EAAE;UAAEC,YAAY,EAAE;QAAM,CAAE;QAAA1D,QAAA,EAClD0B,eAAe,CAACiC;MAAI;QAAAzD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC,eAEbxB,OAAA,CAACR,GAAG;QAACmF,EAAE,EAAE,CAAE;QAAAxD,QAAA,EACR0B,eAAe,CAACI,IAAI,KAAKrD,gBAAgB,CAACmF,cAAc,gBACvD/E,OAAA,CAACb,UAAU;UACTwC,KAAK,EAAEhB,OAAO,CAACF,oBAAoB,CAAC,IAAI,EAAG;UAC3CuE,QAAQ,EAAGC,CAAC,IACVxD,kBAAkB,CAChBoB,eAAe,CAACtC,EAAE,EAClB0E,CAAC,CAACC,MAAM,CAACvD,KAAK,EACd/B,gBAAgB,CAACmF,cAAc,EAC/B,IACF,CACD;UAAA5D,QAAA,GAAAhB,qBAAA,GAEA0C,eAAe,CAACC,OAAO,cAAA3C,qBAAA,uBAAvBA,qBAAA,CAAyB2D,GAAG,CAAEqB,MAAM,iBACnCnF,OAAA,CAACX,gBAAgB;YAEfsC,KAAK,EAAEwD,MAAM,CAACL,IAAK;YACnBM,OAAO,eAAEpF,OAAA,CAACZ,KAAK;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YACnB6D,KAAK,EAAEF,MAAM,CAACL;UAAK,GAHdK,MAAM,CAAC5E,EAAE;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIf,CACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,GACXqB,eAAe,CAACI,IAAI,KACtBrD,gBAAgB,CAACwC,uBAAuB,IAAAhC,sBAAA,GACxCyC,eAAe,CAACC,OAAO,cAAA1C,sBAAA,uBAAvBA,sBAAA,CAAyB0D,GAAG,CAAC,CAACqB,MAAM,EAAE7C,CAAC,kBACrCtC,OAAA,CAACX,gBAAgB;UAEf+F,OAAO,eACLpF,OAAA,CAACd;UACC;UACA;UACA;UAAA;YACA8F,QAAQ,EAAGC,CAAC,IAAK;cACf;;cAEA;cACA;cACA;cACA;cACA;cACA;;cAEAxD,kBAAkB,CAChBoB,eAAe,CAACtC,EAAE,EAClB,EAAE,EACFX,gBAAgB,CAACwC,uBAAuB,EACxC6C,CAAC,CAACC,MAAM,CAACI,OACX,CAAC;YACH;UAAE;YAAAjE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACF;UACD6D,KAAK,EAAEF,MAAM,CAACL;QAAK,GAzBdK,MAAM,CAAC5E,EAAE;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA0Bf,CACF,CAAC,gBAEFxB,OAAA,CAACP,SAAS;UACR2B,OAAO,EAAC,UAAU;UAClBmE,SAAS;UACT5D,KAAK,EAAE,EAAAtB,qBAAA,GAAAM,OAAO,CAACF,oBAAoB,CAAC,cAAAJ,qBAAA,uBAA7BA,qBAAA,CAA+B2C,WAAW,KAAI,EAAG;UACxDgC,QAAQ,EAAGC,CAAC,IAAK;YACf,MAAMO,EAAE,GAAG7E,OAAO;YAClBmB,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEyD,EAAE,CAAC;YACrB1D,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEtB,oBAAoB,CAAC;YACzDgB,kBAAkB,CAChBoB,eAAe,CAACtC,EAAE,EAClB0E,CAAC,CAACC,MAAM,CAACvD,KAAK,EACd/B,gBAAgB,CAACsD,WAAW,EAC5B,IACF,CAAC;UACH,CAAE;UACFuC,KAAK,EAAE,CAAC,CAAC5E,MAAM,CAACgC,eAAe,CAACtC,EAAE,CAAE;UACpCmF,UAAU,EAAE7E,MAAM,CAACgC,eAAe,CAACtC,EAAE,CAAE;UACvCoF,QAAQ,EAAE;QAAK;UAAAtE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENxB,OAAA,CAACR,GAAG;MAACmF,EAAE,EAAE,CAAE;MAACiB,OAAO,EAAC,MAAM;MAACC,cAAc,EAAC,eAAe;MAAA1E,QAAA,gBACvDnB,OAAA,CAACV,MAAM;QACL8B,OAAO,EAAC,WAAW;QACnB0E,OAAO,EAAEtB,cAAe;QACxBuB,QAAQ,EAAEtF,oBAAoB,KAAK,CAAE;QAAAU,QAAA,EACtC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTxB,OAAA,CAACV,MAAM;QAAC8B,OAAO,EAAC,WAAW;QAAC0E,OAAO,EAAEvB,UAAW;QAAApD,QAAA,EAAC;MAEjD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNxB,OAAA,CAACR,GAAG;MAACmF,EAAE,EAAE,CAAE;MAAAxD,QAAA,gBACTnB,OAAA,CAACT,cAAc;QAAC6B,OAAO,EAAC,aAAa;QAACO,KAAK,EAAE8C;MAAS;QAAApD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzDxB,OAAA,CAACf,UAAU;QAACmC,OAAO,EAAC,OAAO;QAAC4E,KAAK,EAAC,eAAe;QAAA7E,QAAA,EAC9C,aAAaV,oBAAoB,GAAG,CAAC,IACpCM,aAAa,CAACkD,SAAS,CAACzB,MAAM;MAC9B;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB,CAAC;AAACtB,EAAA,CAzTWD,aAAuB;EAAA,QACrBH,OAAO,EACLJ,SAAS,EACDC,iBAAiB;AAAA;AAAAsG,EAAA,GAH7BhG,aAAuB;AAAA,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}