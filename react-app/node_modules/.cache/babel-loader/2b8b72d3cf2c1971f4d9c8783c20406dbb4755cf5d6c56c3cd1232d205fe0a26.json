{"ast":null,"code":"import getBaseURL from \"./getBaseURL\";\nexport class APIClient {\n  constructor() {\n    this.env = void 0;\n    this.baseUrl = void 0;\n    this.frontEndBaseUrl = void 0;\n    this.mode = void 0;\n    this.fetchQuestionnaires = async () => {\n      const request = new Request(`${this.baseUrl}/questionnaire_junction`, {\n        method: \"GET\",\n        mode: this.mode\n      });\n      const response = await fetch(request);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch questionnaires\");\n      }\n      return response;\n    };\n    this.postQuestionResponse = async questionResponse => {\n      const request = new Request(`${this.baseUrl}/questionnaire_junction`, {\n        method: \"GET\",\n        mode: this.mode\n      });\n      const response = await fetch(request);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch questionnaires\");\n      }\n      return response;\n    };\n    // Host name will be localhost when running async tests in jest\n    if (window.location.host === \"localhost:3000\" || window.location.host === \"localhost\") {\n      this.env = \"debug\";\n      this.baseUrl = getBaseURL(\"api\");\n      this.frontEndBaseUrl = getBaseURL(\"frontend\");\n      this.mode = \"cors\";\n    } else if (window.location.host === \"staging.cherahealth.com\") {\n      this.env = \"staging\";\n      this.baseUrl = getBaseURL(\"api\");\n      this.frontEndBaseUrl = getBaseURL(\"frontend\");\n      this.mode = \"same-origin\";\n    } else {\n      this.env = \"production\";\n      this.baseUrl = getBaseURL(\"api\");\n      this.frontEndBaseUrl = getBaseURL(\"frontend\");\n      this.mode = \"same-origin\";\n    }\n  }\n}","map":{"version":3,"names":["getBaseURL","APIClient","constructor","env","baseUrl","frontEndBaseUrl","mode","fetchQuestionnaires","request","Request","method","response","fetch","ok","Error","postQuestionResponse","questionResponse","window","location","host"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire-context-provider/APIC.ts"],"sourcesContent":["import { QuestionResponse } from \"../types/QuestionResponse\";\nimport getBaseURL from \"./getBaseURL\";\nexport class APIClient {\n  env: string;\n  baseUrl: string;\n  frontEndBaseUrl: string;\n  mode: RequestMode;\n\n  constructor() {\n    // Host name will be localhost when running async tests in jest\n    if (\n      window.location.host === \"localhost:3000\" ||\n      window.location.host === \"localhost\"\n    ) {\n      this.env = \"debug\";\n      this.baseUrl = getBaseURL(\"api\");\n      this.frontEndBaseUrl = getBaseURL(\"frontend\");\n      this.mode = \"cors\";\n    } else if (window.location.host === \"staging.cherahealth.com\") {\n      this.env = \"staging\";\n      this.baseUrl = getBaseURL(\"api\");\n      this.frontEndBaseUrl = getBaseURL(\"frontend\");\n      this.mode = \"same-origin\";\n    } else {\n      this.env = \"production\";\n      this.baseUrl = getBaseURL(\"api\");\n      this.frontEndBaseUrl = getBaseURL(\"frontend\");\n      this.mode = \"same-origin\";\n    }\n  }\n  fetchQuestionnaires = async () => {\n    const request = new Request(`${this.baseUrl}/questionnaire_junction`, {\n      method: \"GET\",\n      mode: this.mode,\n    });\n    const response = await fetch(request);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch questionnaires\");\n    }\n    return response;\n  };\n  postQuestionResponse = async (questionResponse: QuestionResponse) => {\n    const request = new Request(`${this.baseUrl}/questionnaire_junction`, {\n      method: \"GET\",\n      mode: this.mode,\n    });\n    const response = await fetch(request);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch questionnaires\");\n    }\n    return response;\n  };\n}\n"],"mappings":"AACA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAO,MAAMC,SAAS,CAAC;EAMrBC,WAAWA,CAAA,EAAG;IAAA,KALdC,GAAG;IAAA,KACHC,OAAO;IAAA,KACPC,eAAe;IAAA,KACfC,IAAI;IAAA,KAwBJC,mBAAmB,GAAG,YAAY;MAChC,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,GAAG,IAAI,CAACL,OAAO,yBAAyB,EAAE;QACpEM,MAAM,EAAE,KAAK;QACbJ,IAAI,EAAE,IAAI,CAACA;MACb,CAAC,CAAC;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAO,CAAC;MACrC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACnD;MACA,OAAOH,QAAQ;IACjB,CAAC;IAAA,KACDI,oBAAoB,GAAG,MAAOC,gBAAkC,IAAK;MACnE,MAAMR,OAAO,GAAG,IAAIC,OAAO,CAAC,GAAG,IAAI,CAACL,OAAO,yBAAyB,EAAE;QACpEM,MAAM,EAAE,KAAK;QACbJ,IAAI,EAAE,IAAI,CAACA;MACb,CAAC,CAAC;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAO,CAAC;MACrC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACnD;MACA,OAAOH,QAAQ;IACjB,CAAC;IA1CC;IACA,IACEM,MAAM,CAACC,QAAQ,CAACC,IAAI,KAAK,gBAAgB,IACzCF,MAAM,CAACC,QAAQ,CAACC,IAAI,KAAK,WAAW,EACpC;MACA,IAAI,CAAChB,GAAG,GAAG,OAAO;MAClB,IAAI,CAACC,OAAO,GAAGJ,UAAU,CAAC,KAAK,CAAC;MAChC,IAAI,CAACK,eAAe,GAAGL,UAAU,CAAC,UAAU,CAAC;MAC7C,IAAI,CAACM,IAAI,GAAG,MAAM;IACpB,CAAC,MAAM,IAAIW,MAAM,CAACC,QAAQ,CAACC,IAAI,KAAK,yBAAyB,EAAE;MAC7D,IAAI,CAAChB,GAAG,GAAG,SAAS;MACpB,IAAI,CAACC,OAAO,GAAGJ,UAAU,CAAC,KAAK,CAAC;MAChC,IAAI,CAACK,eAAe,GAAGL,UAAU,CAAC,UAAU,CAAC;MAC7C,IAAI,CAACM,IAAI,GAAG,aAAa;IAC3B,CAAC,MAAM;MACL,IAAI,CAACH,GAAG,GAAG,YAAY;MACvB,IAAI,CAACC,OAAO,GAAGJ,UAAU,CAAC,KAAK,CAAC;MAChC,IAAI,CAACK,eAAe,GAAGL,UAAU,CAAC,UAAU,CAAC;MAC7C,IAAI,CAACM,IAAI,GAAG,aAAa;IAC3B;EACF;AAuBF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}