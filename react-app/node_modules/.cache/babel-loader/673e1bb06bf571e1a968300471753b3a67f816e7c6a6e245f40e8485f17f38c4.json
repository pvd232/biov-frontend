{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useLocation } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _location$state, _answers$currentQuest, _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest4;\n  const navigate = useNavigate();\n  const userId = useUser().userId;\n  const prevQuestionResponses = useQuestionResponses();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.questionnaire;\n\n  // useEffect(() => {\n  //   const questionId = questionnaire!.questions[currentQuestionIndex].id;\n  //   console.log(\n  //     \"prevQuestionResponses\",\n  //     prevQuestionResponses.questionResponses\n  //   );\n  //   for (let response of prevQuestionResponses.questionResponses) {\n  //     if (response.questionId === questionId) {\n  //       console.log(\"found\");\n  //       switch (response.type) {\n  //         case QuestionCategory.MultipleChoice:\n  //           console.log(\"singleOptionId\", response.singleOptionId);\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoice,\n  //               singleOptionId: response.singleOptionId,\n  //               multiOptionIds: null,\n  //               shortAnswer: null,\n  //             },\n  //           ]);\n  //           break;\n  //         case QuestionCategory.MultipleChoiceSelectAll:\n  //           console.log(\"multiOptionIds\", response.multiOptionIds);\n\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoiceSelectAll,\n  //               singleOptionId: null,\n  //               multiOptionIds: response.multiOptionIds,\n  //               shortAnswer: null,\n  //             },\n  //           ]);\n  //           break;\n  //         case QuestionCategory.ShortAnswer:\n  //           console.log(\"shortAnswer 1\", response.shortAnswer);\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.ShortAnswer,\n  //               singleOptionId: null,\n  //               multiOptionIds: null,\n  //               shortAnswer: response.shortAnswer,\n  //             },\n  //           ]);\n  //           break;\n  //       }\n  //     }\n  //   }\n  // }, [\n  //   currentQuestionIndex,\n  //   // questionnaire,\n  //   // userId,\n  //   prevQuestionResponses,\n  //   // navigate,\n  // ]);\n  // };\n\n  const handleAnswerChange = (questionId, answerType, singleOptionId, multiOptionId, shortAnswer) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n\n      // Clone the answers to avoid mutating state directly, will return empty array if there are no answers\n      const updatedAnswers = [...prevAnswers];\n      console.log(\"updatedAnswers\", updatedAnswers);\n\n      // Handle multi select questions\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && multiOptionId !== null) {\n        console.log(\"multiOptionId\", multiOptionId);\n        if (answerIndex > -1 && updatedAnswers[answerIndex].multiOptionIds) {\n          // Check if option is already selected\n          const optionIndex = updatedAnswers[answerIndex].multiOptionIds.indexOf(multiOptionId);\n          if (optionIndex > -1) {\n            // Remove the option if it's already selected\n            updatedAnswers[answerIndex].multiOptionIds = updatedAnswers[answerIndex].multiOptionIds.filter(id => id !== multiOptionId);\n          } else {\n            // Add the option if it's not already selected\n            updatedAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n          }\n        } else {\n          // If the answer doesn't exist, create it with the selected option\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: [multiOptionId],\n            shortAnswer: null\n          });\n        }\n      }\n\n      // Handle single select questions\n      else if (answerType === QuestionCategory.MultipleChoice && singleOptionId != null) {\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].singleOptionId = singleOptionId;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null\n          });\n        }\n      }\n\n      // Handle short answer questions\n      else if (answerType === QuestionCategory.ShortAnswer && shortAnswer != null) {\n        console.log(\"shortAnswer 2\", shortAnswer);\n        const testa = updatedAnswers[answerIndex].shortAnswer;\n        console.log(\"testa\", testa);\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].shortAnswer = shortAnswer;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer\n          });\n        }\n      }\n      console.log(\"updatedAnswers\", updatedAnswers);\n      return updatedAnswers;\n    });\n    // Reset error if there was one\n    if (errors[questionId]) setErrors(prevErrors => ({\n      ...prevErrors,\n      [questionId]: \"\"\n    }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) setCurrentQuestionIndex(currentQuestionIndex + 1);else handleSubmit();\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n  const getPrevAnswer = questionId => prevQuestionResponses.questionResponses.find(prevResponse => prevResponse.questionId === questionId);\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const prevAnswer = getPrevAnswer(currentQuestion.id);\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers).then(() => {\n      navigate(\"/questionnaire-home\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: (prevAnswer === null || prevAnswer === void 0 ? void 0 : prevAnswer.singleOptionId) || ((_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.singleOptionId) || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoice, Number(e.target.value), null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.id,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map(option => {\n          var _prevAnswer$multiOpti, _answers$currentQuest2, _answers$currentQuest3;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: (prevAnswer === null || prevAnswer === void 0 ? void 0 : (_prevAnswer$multiOpti = prevAnswer.multiOptionIds) === null || _prevAnswer$multiOpti === void 0 ? void 0 : _prevAnswer$multiOpti.includes(option.id)) || ((_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : (_answers$currentQuest3 = _answers$currentQuest2.multiOptionIds) === null || _answers$currentQuest3 === void 0 ? void 0 : _answers$currentQuest3.includes(option.id)) || false,\n              onChange: () => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoiceSelectAll, null, option.id, null)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: (prevAnswer === null || prevAnswer === void 0 ? void 0 : prevAnswer.shortAnswer) || ((_answers$currentQuest4 = answers[currentQuestionIndex]) === null || _answers$currentQuest4 === void 0 ? void 0 : _answers$currentQuest4.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, QuestionCategory.ShortAnswer, null, null, e.target.value);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"1RyS/FH5O8SNPhJhm4oUyn77ttg=\", false, function () {\n  return [useNavigate, useUser, useQuestionResponses, useLocation];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useLocation","QuestionCategory","APIClient","useUser","useNavigate","useQuestionResponses","jsxDEV","_jsxDEV","Questionnaire","_s","_location$state","_answers$currentQuest","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest4","navigate","userId","prevQuestionResponses","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","location","questionnaire","state","handleAnswerChange","questionId","answerType","singleOptionId","multiOptionId","shortAnswer","prevAnswers","answerIndex","findIndex","answer","updatedAnswers","console","log","MultipleChoiceSelectAll","multiOptionIds","optionIndex","indexOf","filter","id","push","type","MultipleChoice","ShortAnswer","testa","prevErrors","validateAnswer","trim","length","handleNext","currentQuestion","questions","handleSubmit","handlePrevious","getPrevAnswer","questionResponses","find","prevResponse","prevAnswer","progress","postQuestionResponse","then","children","variant","name","fileName","_jsxFileName","lineNumber","columnNumber","mt","sx","marginBottom","text","value","onChange","e","Number","target","options","map","option","control","label","_prevAnswer$multiOpti","_answers$currentQuest2","_answers$currentQuest3","checked","includes","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useLocation } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponse } from \"../../../helpers/QuestionResponse\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { QuestionOption } from \"../../../types/domains/QuestionOption\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\n\nexport const Questionnaire: React.FC = () => {\n  const navigate = useNavigate();\n\n  const userId = useUser().userId!;\n  const prevQuestionResponses = useQuestionResponses();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponse[]>([]);\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = location.state?.questionnaire;\n\n  // useEffect(() => {\n  //   const questionId = questionnaire!.questions[currentQuestionIndex].id;\n  //   console.log(\n  //     \"prevQuestionResponses\",\n  //     prevQuestionResponses.questionResponses\n  //   );\n  //   for (let response of prevQuestionResponses.questionResponses) {\n  //     if (response.questionId === questionId) {\n  //       console.log(\"found\");\n  //       switch (response.type) {\n  //         case QuestionCategory.MultipleChoice:\n  //           console.log(\"singleOptionId\", response.singleOptionId);\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoice,\n  //               singleOptionId: response.singleOptionId,\n  //               multiOptionIds: null,\n  //               shortAnswer: null,\n  //             },\n  //           ]);\n  //           break;\n  //         case QuestionCategory.MultipleChoiceSelectAll:\n  //           console.log(\"multiOptionIds\", response.multiOptionIds);\n\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoiceSelectAll,\n  //               singleOptionId: null,\n  //               multiOptionIds: response.multiOptionIds,\n  //               shortAnswer: null,\n  //             },\n  //           ]);\n  //           break;\n  //         case QuestionCategory.ShortAnswer:\n  //           console.log(\"shortAnswer 1\", response.shortAnswer);\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.ShortAnswer,\n  //               singleOptionId: null,\n  //               multiOptionIds: null,\n  //               shortAnswer: response.shortAnswer,\n  //             },\n  //           ]);\n  //           break;\n  //       }\n  //     }\n  //   }\n  // }, [\n  //   currentQuestionIndex,\n  //   // questionnaire,\n  //   // userId,\n  //   prevQuestionResponses,\n  //   // navigate,\n  // ]);\n  // };\n\n  const handleAnswerChange = (\n    questionId: number,\n    answerType: QuestionCategory,\n    singleOptionId: number | null,\n    multiOptionId: number | null,\n    shortAnswer: string | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      // Clone the answers to avoid mutating state directly, will return empty array if there are no answers\n      const updatedAnswers: QuestionResponse[] = [...prevAnswers];\n      console.log(\"updatedAnswers\", updatedAnswers);\n\n      // Handle multi select questions\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        multiOptionId !== null\n      ) {\n        console.log(\"multiOptionId\", multiOptionId);\n        if (answerIndex > -1 && updatedAnswers[answerIndex].multiOptionIds) {\n          // Check if option is already selected\n          const optionIndex =\n            updatedAnswers[answerIndex].multiOptionIds!.indexOf(multiOptionId);\n\n          if (optionIndex > -1) {\n            // Remove the option if it's already selected\n            updatedAnswers[answerIndex].multiOptionIds = updatedAnswers[\n              answerIndex\n            ].multiOptionIds!.filter((id) => id !== multiOptionId);\n          } else {\n            // Add the option if it's not already selected\n            updatedAnswers[answerIndex].multiOptionIds!.push(multiOptionId);\n          }\n        } else {\n          // If the answer doesn't exist, create it with the selected option\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: [multiOptionId],\n            shortAnswer: null,\n          });\n        }\n      }\n\n      // Handle single select questions\n      else if (\n        answerType === QuestionCategory.MultipleChoice &&\n        singleOptionId != null\n      ) {\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].singleOptionId = singleOptionId;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null,\n          });\n        }\n      }\n\n      // Handle short answer questions\n      else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        shortAnswer != null\n      ) {\n        console.log(\"shortAnswer 2\", shortAnswer);\n        const testa = updatedAnswers[answerIndex].shortAnswer;\n        console.log(\"testa\", testa);\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].shortAnswer = shortAnswer;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer,\n          });\n        }\n      }\n      console.log(\"updatedAnswers\", updatedAnswers);\n      return updatedAnswers;\n    });\n    // Reset error if there was one\n    if (errors[questionId])\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    )\n      return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire!.questions.length - 1)\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    else handleSubmit();\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0)\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n  const getPrevAnswer = (questionId: number) =>\n    prevQuestionResponses.questionResponses.find(\n      (prevResponse: QuestionResponse) => prevResponse.questionId === questionId\n    );\n\n  const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n  const prevAnswer = getPrevAnswer(currentQuestion.id);\n\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire!.questions.length) * 100;\n\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers).then(() => {\n      navigate(\"/questionnaire-home\");\n    });\n  };\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire!.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={\n                prevAnswer?.singleOptionId ||\n                answers[currentQuestionIndex]?.singleOptionId ||\n                \"\"\n              }\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.MultipleChoice,\n                  Number(e.target.value),\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option: QuestionOption) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.id}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option: QuestionOption) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      prevAnswer?.multiOptionIds?.includes(option.id) ||\n                      answers[currentQuestionIndex]?.multiOptionIds?.includes(\n                        option.id\n                      ) ||\n                      false\n                    }\n                    onChange={() =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        null,\n                        option.id,\n                        null\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={\n                prevAnswer?.shortAnswer ||\n                answers[currentQuestionIndex]?.shortAnswer ||\n                \"\"\n              }\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.ShortAnswer,\n                  null,\n                  null,\n                  e.target.value\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire!.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}