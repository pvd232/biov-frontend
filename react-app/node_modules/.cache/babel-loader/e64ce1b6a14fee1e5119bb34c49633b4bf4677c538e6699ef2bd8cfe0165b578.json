{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/context/QuestionResponseContextProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { APIClient } from \"../helpers/APIC\";\nimport { UserSession } from \"./UserSession\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionResponseContext = /*#__PURE__*/createContext(undefined);\nexport const QuestionResponseContextProvider = ({\n  children\n}) => {\n  _s();\n  const [questionResponses, setQuestionResponses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const userId = new UserSession().getUserId();\n  useEffect(() => {\n    try {\n      APIClient.fetchQuestionResponse(userId).then(response => {\n        if (!response) {\n          throw new Error(\"Failed to fetch questionResponses\");\n        }\n        response.json().then(data => {\n          const questionResponses = data.map(QuestionResponse => QuestionResponse);\n          setQuestionResponses(questionResponses);\n        });\n      });\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [questionResponses, userId]);\n  return /*#__PURE__*/_jsxDEV(QuestionResponseContext.Provider, {\n    value: {\n      questionResponses,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionResponseContextProvider, \"rf7HTmHF9p9o2J46B6GWDPrfl2E=\");\n_c = QuestionResponseContextProvider;\nvar _c;\n$RefreshReg$(_c, \"QuestionResponseContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","APIClient","UserSession","jsxDEV","_jsxDEV","QuestionResponseContext","undefined","QuestionResponseContextProvider","children","_s","questionResponses","setQuestionResponses","loading","setLoading","error","setError","userId","getUserId","fetchQuestionResponse","then","response","Error","json","data","map","QuestionResponse","err","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/context/QuestionResponseContextProvider.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { QuestionResponseContextType } from \"../types/context/QuestionResponseContextType\";\nimport { QuestionResponseContextProviderProps } from \"../types/context/QuestionResponseContextProviderProps\";\nimport { APIClient } from \"../helpers/APIC\";\nimport { QuestionResponse } from \"../types/domains/QuestionResponse\";\nimport { UserSession } from \"./UserSession\";\n\nexport const QuestionResponseContext = createContext<\n  QuestionResponseContextType | undefined\n>(undefined);\n\nexport const QuestionResponseContextProvider: React.FC<\n  QuestionResponseContextProviderProps\n> = ({ children }) => {\n  const [questionResponses, setQuestionResponses] = useState<\n    QuestionResponse[]\n  >([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const userId = new UserSession().getUserId()!;\n  useEffect(() => {\n    try {\n      APIClient.fetchQuestionResponse(userId).then((response) => {\n        if (!response) {\n          throw new Error(\"Failed to fetch questionResponses\");\n        }\n\n        response.json().then((data) => {\n          const questionResponses = data.map(\n            (QuestionResponse: any) => QuestionResponse as QuestionResponse\n          );\n          setQuestionResponses(questionResponses);\n        });\n      });\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [questionResponses, userId]);\n  return (\n    <QuestionResponseContext.Provider\n      value={{ questionResponses, loading, error }}\n    >\n      {children}\n    </QuestionResponseContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAGjE,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,uBAAuB,gBAAGP,aAAa,CAElDQ,SAAS,CAAC;AAEZ,OAAO,MAAMC,+BAEZ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpB,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGZ,QAAQ,CAExD,EAAE,CAAC;EACL,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMiB,MAAM,GAAG,IAAId,WAAW,CAAC,CAAC,CAACe,SAAS,CAAC,CAAE;EAC7CjB,SAAS,CAAC,MAAM;IACd,IAAI;MACFC,SAAS,CAACiB,qBAAqB,CAACF,MAAM,CAAC,CAACG,IAAI,CAAEC,QAAQ,IAAK;QACzD,IAAI,CAACA,QAAQ,EAAE;UACb,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;QACtD;QAEAD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,IAAI,IAAK;UAC7B,MAAMb,iBAAiB,GAAGa,IAAI,CAACC,GAAG,CAC/BC,gBAAqB,IAAKA,gBAC7B,CAAC;UACDd,oBAAoB,CAACD,iBAAiB,CAAC;QACzC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOgB,GAAQ,EAAE;MACjBX,QAAQ,CAACW,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRd,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACH,iBAAiB,EAAEM,MAAM,CAAC,CAAC;EAC/B,oBACEZ,OAAA,CAACC,uBAAuB,CAACuB,QAAQ;IAC/BC,KAAK,EAAE;MAAEnB,iBAAiB;MAAEE,OAAO;MAAEE;IAAM,CAAE;IAAAN,QAAA,EAE5CA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACuB,CAAC;AAEvC,CAAC;AAACxB,EAAA,CApCWF,+BAEZ;AAAA2B,EAAA,GAFY3B,+BAEZ;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}