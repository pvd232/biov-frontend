{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _location$state, _answers$currentQuest, _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest4;\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const userId = useUser().userId;\n  const {\n    questionResponses,\n    refetch\n  } = useQuestionResponses();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.questionnaire;\n  const handleAnswerChange = (questionId, answerType, singleOptionId, multiOptionId, shortAnswer) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n\n      // Clone the answers to avoid mutating state directly, will return empty array if there are no answers\n      const updatedAnswers = [...prevAnswers];\n\n      // Handle multi select questions\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && multiOptionId !== null) {\n        if (answerIndex > -1 && updatedAnswers[answerIndex].multiOptionIds) {\n          // Check if option is already selected\n          const optionIndex = updatedAnswers[answerIndex].multiOptionIds.indexOf(multiOptionId);\n          if (optionIndex > -1) {\n            // Remove the option if it's already selected\n            updatedAnswers[answerIndex].multiOptionIds = updatedAnswers[answerIndex].multiOptionIds.filter(id => id !== multiOptionId);\n          } else {\n            // Add the option if it's not already selected\n            updatedAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n          }\n        } else {\n          // If the answer doesn't exist, create it with the selected option\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            questionnaireId: Number(id),\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: [multiOptionId],\n            shortAnswer: null\n          });\n        }\n      }\n\n      // Handle single select questions\n      else if (answerType === QuestionCategory.MultipleChoice && singleOptionId != null) {\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].singleOptionId = singleOptionId;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            questionnaireId: Number(id),\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null\n          });\n        }\n      }\n\n      // Handle short answer questions\n      else if (answerType === QuestionCategory.ShortAnswer && shortAnswer != null) {\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].shortAnswer = shortAnswer;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            questionnaireId: Number(id),\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer\n          });\n        }\n      }\n      return updatedAnswers;\n    });\n    // Reset error if there was one\n    if (errors[questionId]) setErrors(prevErrors => ({\n      ...prevErrors,\n      [questionId]: \"\"\n    }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) return; // Prevent moving to the next question if validation fails\n\n    // If the user did not change their answer, add it to the answers array\n    if (answers.length === currentQuestionIndex && prevAnswer) setAnswers(prev => [...prev, prevAnswer]);\n    if (currentQuestionIndex < questionnaire.questions.length - 1) setCurrentQuestionIndex(currentQuestionIndex + 1);else handleSubmit();\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n  const getPrevAnswer = questionId => questionResponses.find(prevResponse => prevResponse.questionId === questionId);\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const prevAnswer = getPrevAnswer(currentQuestion.id);\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  const handleSubmit = () => {\n    // Trigger browser refresh to update already answered questionnaires\n    APIClient.postQuestionResponse(answers).then(() => {\n      refetch().then(() => navigate(\"questionnaire-home\"));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: (prevAnswer === null || prevAnswer === void 0 ? void 0 : prevAnswer.singleOptionId) || ((_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.singleOptionId) || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoice, Number(e.target.value), null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.id,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map(option => {\n          var _prevAnswer$multiOpti, _answers$currentQuest2, _answers$currentQuest3;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: (prevAnswer === null || prevAnswer === void 0 ? void 0 : (_prevAnswer$multiOpti = prevAnswer.multiOptionIds) === null || _prevAnswer$multiOpti === void 0 ? void 0 : _prevAnswer$multiOpti.includes(option.id)) || ((_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : (_answers$currentQuest3 = _answers$currentQuest2.multiOptionIds) === null || _answers$currentQuest3 === void 0 ? void 0 : _answers$currentQuest3.includes(option.id)) || false,\n              onChange: () => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoiceSelectAll, null, option.id, null)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: (prevAnswer === null || prevAnswer === void 0 ? void 0 : prevAnswer.shortAnswer) || ((_answers$currentQuest4 = answers[currentQuestionIndex]) === null || _answers$currentQuest4 === void 0 ? void 0 : _answers$currentQuest4.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, QuestionCategory.ShortAnswer, null, null, e.target.value);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"DnvG6lLGBl574xpsH7gs9D9smfw=\", false, function () {\n  return [useNavigate, useParams, useUser, useQuestionResponses, useLocation];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useLocation","useParams","QuestionCategory","APIClient","useUser","useNavigate","useQuestionResponses","jsxDEV","_jsxDEV","Questionnaire","_s","_location$state","_answers$currentQuest","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest4","navigate","id","userId","questionResponses","refetch","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","location","questionnaire","state","handleAnswerChange","questionId","answerType","singleOptionId","multiOptionId","shortAnswer","prevAnswers","answerIndex","findIndex","answer","updatedAnswers","MultipleChoiceSelectAll","multiOptionIds","optionIndex","indexOf","filter","push","questionnaireId","Number","type","MultipleChoice","ShortAnswer","prevErrors","validateAnswer","trim","length","handleNext","currentQuestion","questions","prevAnswer","prev","handleSubmit","handlePrevious","getPrevAnswer","find","prevResponse","progress","postQuestionResponse","then","children","variant","name","fileName","_jsxFileName","lineNumber","columnNumber","mt","sx","marginBottom","text","value","onChange","e","target","options","map","option","control","label","_prevAnswer$multiOpti","_answers$currentQuest2","_answers$currentQuest3","checked","includes","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponse } from \"../../../helpers/QuestionResponse\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { QuestionOption } from \"../../../types/domains/QuestionOption\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\n\ntype QuestionnaireParams = {\n  id: string;\n};\n\nexport const Questionnaire: React.FC = () => {\n  const navigate = useNavigate();\n  const { id } = useParams<QuestionnaireParams>();\n  const userId = useUser().userId!;\n  const { questionResponses, refetch } = useQuestionResponses();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponse[]>([]);\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = location.state?.questionnaire;\n\n  const handleAnswerChange = (\n    questionId: number,\n    answerType: QuestionCategory,\n    singleOptionId: number | null,\n    multiOptionId: number | null,\n    shortAnswer: string | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      // Clone the answers to avoid mutating state directly, will return empty array if there are no answers\n      const updatedAnswers: QuestionResponse[] = [...prevAnswers];\n\n      // Handle multi select questions\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        multiOptionId !== null\n      ) {\n        if (answerIndex > -1 && updatedAnswers[answerIndex].multiOptionIds) {\n          // Check if option is already selected\n          const optionIndex =\n            updatedAnswers[answerIndex].multiOptionIds!.indexOf(multiOptionId);\n\n          if (optionIndex > -1) {\n            // Remove the option if it's already selected\n            updatedAnswers[answerIndex].multiOptionIds = updatedAnswers[\n              answerIndex\n            ].multiOptionIds!.filter((id) => id !== multiOptionId);\n          } else {\n            // Add the option if it's not already selected\n            updatedAnswers[answerIndex].multiOptionIds!.push(multiOptionId);\n          }\n        } else {\n          // If the answer doesn't exist, create it with the selected option\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            questionnaireId: Number(id),\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: [multiOptionId],\n            shortAnswer: null,\n          });\n        }\n      }\n\n      // Handle single select questions\n      else if (\n        answerType === QuestionCategory.MultipleChoice &&\n        singleOptionId != null\n      ) {\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].singleOptionId = singleOptionId;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            questionnaireId: Number(id),\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null,\n          });\n        }\n      }\n\n      // Handle short answer questions\n      else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        shortAnswer != null\n      ) {\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].shortAnswer = shortAnswer;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            questionnaireId: Number(id),\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer,\n          });\n        }\n      }\n      return updatedAnswers;\n    });\n    // Reset error if there was one\n    if (errors[questionId])\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    )\n      return; // Prevent moving to the next question if validation fails\n\n    // If the user did not change their answer, add it to the answers array\n    if (answers.length === currentQuestionIndex && prevAnswer)\n      setAnswers((prev) => [...prev, prevAnswer]);\n\n    if (currentQuestionIndex < questionnaire!.questions.length - 1)\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    else handleSubmit();\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0)\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const getPrevAnswer = (questionId: number) =>\n    questionResponses.find(\n      (prevResponse: QuestionResponse) => prevResponse.questionId === questionId\n    );\n\n  const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n  const prevAnswer = getPrevAnswer(currentQuestion.id);\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire!.questions.length) * 100;\n\n  const handleSubmit = () => {\n    // Trigger browser refresh to update already answered questionnaires\n    APIClient.postQuestionResponse(answers).then(() => {\n      refetch().then(() => navigate(\"questionnaire-home\"));\n    });\n  };\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire!.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={\n                prevAnswer?.singleOptionId ||\n                answers[currentQuestionIndex]?.singleOptionId ||\n                \"\"\n              }\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.MultipleChoice,\n                  Number(e.target.value),\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option: QuestionOption) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.id}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option: QuestionOption) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      prevAnswer?.multiOptionIds?.includes(option.id) ||\n                      answers[currentQuestionIndex]?.multiOptionIds?.includes(\n                        option.id\n                      ) ||\n                      false\n                    }\n                    onChange={() =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        null,\n                        option.id,\n                        null\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={\n                prevAnswer?.shortAnswer ||\n                answers[currentQuestionIndex]?.shortAnswer ||\n                \"\"\n              }\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.ShortAnswer,\n                  null,\n                  null,\n                  e.target.value\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire!.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}