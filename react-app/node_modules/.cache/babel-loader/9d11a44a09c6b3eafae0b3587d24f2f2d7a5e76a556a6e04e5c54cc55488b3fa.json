{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../types/UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _currentQuestion$opti;\n  const user = useUser().user;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  if (!questionnaire) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Questionnaire not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n  const handleAnswerChange = (questionId, value, answerType, isChecked) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n      if (typeof value === \"number\" && typeof isChecked === \"boolean\") {\n        var _user$id;\n        // Handle multiple-choice (checkbox)\n        const existingAnswer = prevAnswers[answerIndex];\n        const currentOptionIds = (existingAnswer === null || existingAnswer === void 0 ? void 0 : existingAnswer.optionIds) || [];\n        const updatedOptionIds = isChecked ? [...currentOptionIds, value] : currentOptionIds.filter(id => id !== value);\n        const updatedAnswer = {\n          userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n          // Replace with actual user ID\n          questionId,\n          optionIds: updatedOptionIds,\n          type: answerType,\n          shortAnswer: (existingAnswer === null || existingAnswer === void 0 ? void 0 : existingAnswer.shortAnswer) || \"\" // Preserve existing shortAnswer\n        };\n        if (answerIndex > -1) {\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (typeof value === \"string\") {\n        var _user$id2;\n        // Handle short-response\n        const existingAnswer = prevAnswers[answerIndex];\n        const updatedAnswer = {\n          questionId,\n          userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n          // Replace with actual user ID\n          type: answerType,\n          shortAnswer: value,\n          optionIds: (existingAnswer === null || existingAnswer === void 0 ? void 0 : existingAnswer.optionIds) || [] // Preserve existing optionIds\n        };\n        if (answerIndex > -1) {\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"\"\n      }));\n    }\n  };\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && answer.shortAnswer.trim().length === 0) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = () => {\n    return Object.keys(answers).map(questionId => {\n      var _user$id3;\n      const question = questionnaire.questions.find(q => q.id === Number(questionId));\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n      const response = {\n        userId: (_user$id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id3 !== void 0 ? _user$id3 : \"\",\n        // Replace with actual user ID\n        questionId: question.id,\n        optionIds: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type\n      };\n      return response;\n    });\n  };\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) {\n      return; // Prevent moving to the next question if validation fails\n    }\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === \"mcq\" ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[currentQuestion.id] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, e.target.value, currentQuestion.type, true),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.text,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: answers[currentQuestion.id] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, e.target.value, currentQuestion.type, true),\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"gREewYr41+kU2wZV4lpa9tvoqWQ=\", false, function () {\n  return [useUser, useParams, useQuestionnaires];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","jsxDEV","_jsxDEV","Questionnaire","_s","_currentQuestion$opti","user","id","questionnaires","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","value","answerType","isChecked","prevAnswers","answerIndex","findIndex","answer","_user$id","existingAnswer","currentOptionIds","optionIds","updatedOptionIds","filter","updatedAnswer","userId","type","shortAnswer","slice","_user$id2","prevErrors","validateAnswer","ShortAnswer","trim","length","formatAnswersAsQuestionResponse","Object","keys","map","_user$id3","question","questions","Error","response","handleSubmit","formattedAnswers","postQuestionResponse","handleNext","currentQuestion","console","log","handlePrevious","progress","name","mt","sx","marginBottom","text","onChange","e","target","options","option","control","label","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponseType } from \"../types/QuestionResponseType\";\nimport { useUser } from \"../../../types/UserContextProvider\";\n\nexport const Questionnaire: React.FC = () => {\n  const user = useUser().user;\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponseType[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  if (!questionnaire) {\n    return (\n      <Container>\n        <Typography variant=\"h6\">Questionnaire not found</Typography>\n      </Container>\n    );\n  }\n\n  const handleAnswerChange = (\n    questionId: number,\n    value: number | string,\n    answerType: QuestionCategory,\n    isChecked?: boolean\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      if (typeof value === \"number\" && typeof isChecked === \"boolean\") {\n        // Handle multiple-choice (checkbox)\n        const existingAnswer = prevAnswers[answerIndex];\n        const currentOptionIds = existingAnswer?.optionIds || [];\n\n        const updatedOptionIds = isChecked\n          ? [...currentOptionIds, value]\n          : currentOptionIds.filter((id) => id !== value);\n\n        const updatedAnswer: QuestionResponseType = {\n          userId: user?.id ?? \"\", // Replace with actual user ID\n          questionId,\n          optionIds: updatedOptionIds,\n          type: answerType,\n          shortAnswer: existingAnswer?.shortAnswer || \"\", // Preserve existing shortAnswer\n        };\n\n        if (answerIndex > -1) {\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (typeof value === \"string\") {\n        // Handle short-response\n        const existingAnswer = prevAnswers[answerIndex];\n\n        const updatedAnswer: QuestionResponseType = {\n          questionId,\n          userId: user?.id ?? \"\", // Replace with actual user ID\n          type: answerType,\n          shortAnswer: value,\n          optionIds: existingAnswer?.optionIds || [], // Preserve existing optionIds\n        };\n\n        if (answerIndex > -1) {\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n    }\n  };\n\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      answer.shortAnswer.trim().length === 0\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = (): QuestionResponseType[] => {\n    return Object.keys(answers).map((questionId) => {\n      const question = questionnaire.questions.find(\n        (q) => q.id === Number(questionId)\n      );\n\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n\n      const response: QuestionResponseType = {\n        userId: user?.id ?? \"\", // Replace with actual user ID\n        questionId: question.id,\n        optionIds: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type,\n      };\n\n      return response;\n    });\n  };\n\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    ) {\n      return; // Prevent moving to the next question if validation fails\n    }\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === \"mcq\" ? (\n            <RadioGroup\n              value={answers[currentQuestion.id] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  currentQuestion.type,\n                  true\n                )\n              }\n            >\n              {currentQuestion.options?.map((option) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.text}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestion.id] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  currentQuestion.type,\n                  true\n                )\n              }\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}