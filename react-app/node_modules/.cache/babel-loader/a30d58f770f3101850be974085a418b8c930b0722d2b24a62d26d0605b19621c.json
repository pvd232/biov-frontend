{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/splash/login/Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Grid from \"@mui/material/Grid2\";\nimport styles from \"./scss/Login.module.scss\";\nimport { CustomTextField } from \"../../shared/custom-text-field/CustomTextField\";\nimport { BlackButton } from \"../../shared/button/BlackButton\";\nimport { Container, Typography } from \"@mui/material\";\nimport { useUser } from \"../../../hooks/useUser\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Login = () => {\n  _s();\n  var _useParams;\n  const {\n    login\n  } = useUser();\n  const {\n    role\n  } = (_useParams = useParams()) !== null && _useParams !== void 0 ? _useParams : \"non-admin\";\n  // State for the form inputs and errors\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const handleLoginClick = () => {\n    // Trim input values to remove leading/trailing whitespace\n    const trimmedUsername = username.trim();\n    const trimmedPassword = password.trim();\n\n    // Validate the inputs\n    if (!trimmedUsername || !trimmedPassword) {\n      setError(\"Username and password cannot be empty or whitespace.\");\n      return;\n    }\n\n    // If validation passes, log the user in\n    const user = {\n      id: trimmedUsername,\n      password: trimmedPassword,\n      role: role\n    };\n    APIClient.authenticateUser(user).then(response => {\n      if (!response) {\n        setError(\"Invalid username or password.\");\n        return;\n      } else {\n        login(user); // Set the user in context after a successful login\n        navigate(\"/questionnaire-home\");\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: styles.pageContainer,\n    id: \"page-container\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      id: \"login-card\",\n      className: styles.loginCard,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        id: \"login-card-content\",\n        container: true,\n        className: styles.loginContent,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          width: \"80%\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            children: \"Welcome back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          width: \"100%\",\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n            sx: {\n              width: \"80%\"\n            },\n            label: \"Username\",\n            value: username,\n            onChange: e => setUsername(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          width: \"100%\",\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n            sx: {\n              width: \"80%\"\n            },\n            label: \"Password\",\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          width: \"100%\",\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"error\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          width: \"100%\",\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(BlackButton, {\n            sx: {\n              width: \"80%\"\n            },\n            onClick: handleLoginClick,\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"GrxMpy0EEdiD0saPYNKHqr1MQrU=\", false, function () {\n  return [useUser, useParams, useNavigate];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Grid","styles","CustomTextField","BlackButton","Container","Typography","useUser","useNavigate","useParams","APIClient","jsxDEV","_jsxDEV","Login","_s","_useParams","login","role","username","setUsername","password","setPassword","error","setError","navigate","handleLoginClick","trimmedUsername","trim","trimmedPassword","user","id","authenticateUser","then","response","className","pageContainer","children","container","loginCard","loginContent","width","variant","fileName","_jsxFileName","lineNumber","columnNumber","justifyContent","sx","label","value","onChange","e","target","type","color","onClick","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/splash/login/Login.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Grid from \"@mui/material/Grid2\";\nimport styles from \"./scss/Login.module.scss\";\nimport { CustomTextField } from \"../../shared/custom-text-field/CustomTextField\";\nimport { BlackButton } from \"../../shared/button/BlackButton\";\nimport { Container, Typography } from \"@mui/material\";\nimport { useUser } from \"../../../hooks/useUser\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { User } from \"../../../types/domains/User\";\nimport { APIClient } from \"../../../helpers/APIC\";\n\ntype LoginParams = {\n  role: \"non-admin\" | \"admin\";\n};\nexport const Login: React.FC = () => {\n  const { login } = useUser();\n  const { role } = useParams<LoginParams>() ?? \"non-admin\";\n  // State for the form inputs and errors\n  const [username, setUsername] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const handleLoginClick = () => {\n    // Trim input values to remove leading/trailing whitespace\n    const trimmedUsername = username.trim();\n    const trimmedPassword = password.trim();\n\n    // Validate the inputs\n    if (!trimmedUsername || !trimmedPassword) {\n      setError(\"Username and password cannot be empty or whitespace.\");\n      return;\n    }\n\n    // If validation passes, log the user in\n    const user: User = {\n      id: trimmedUsername,\n      password: trimmedPassword,\n      role: role,\n    };\n    APIClient.authenticateUser(user).then((response) => {\n      if (!response) {\n        setError(\"Invalid username or password.\");\n        return;\n      } else {\n        login(user); // Set the user in context after a successful login\n        navigate(\"/questionnaire-home\");\n      }\n    });\n  };\n\n  return (\n    <Container className={styles.pageContainer} id=\"page-container\">\n      <Grid container id=\"login-card\" className={styles.loginCard}>\n        <Grid id=\"login-card-content\" container className={styles.loginContent}>\n          <Grid container width={\"80%\"}>\n            <Typography variant={\"h4\"}>Welcome back</Typography>\n          </Grid>\n\n          {/* Username input */}\n          <Grid container width={\"100%\"} justifyContent={\"center\"}>\n            <CustomTextField\n              sx={{ width: \"80%\" }}\n              label={\"Username\"}\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </Grid>\n\n          {/* Password input */}\n          <Grid container width={\"100%\"} justifyContent={\"center\"}>\n            <CustomTextField\n              sx={{ width: \"80%\" }}\n              label={\"Password\"}\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </Grid>\n\n          {/* Error message */}\n          {error && (\n            <Grid container width={\"100%\"} justifyContent={\"center\"}>\n              <Typography color=\"error\">{error}</Typography>\n            </Grid>\n          )}\n\n          {/* Login button */}\n          <Grid container width={\"100%\"} justifyContent={\"center\"}>\n            <BlackButton sx={{ width: \"80%\" }} onClick={handleLoginClick}>\n              Login\n            </BlackButton>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}