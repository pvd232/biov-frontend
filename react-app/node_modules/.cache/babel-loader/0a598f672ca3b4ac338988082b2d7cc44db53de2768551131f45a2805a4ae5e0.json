{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../types/UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest4;\n  const user = useUser().user;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  if (!questionnaire) return;\n  /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Questionnaire not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n  const handleAnswerChange = (questionId, answerType, value, singleOptionIndex, multiOptionIndex, multiOptionChecked) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n\n      // Handle multi select questions\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && multiOptionChecked !== null && multiOptionIndex !== null) {\n        let updateOptionsChecked = [];\n        const existingAnswer = prevAnswers[answerIndex];\n\n        // Update curr answer if it exists, else create a new answer\n        if (answerIndex > -1 && prevAnswers[answerIndex].optionSelected != null) {\n          // for (let i = 0; i < existingAnswer.optionsChecked.length; i++)\n          //   updateOptionsChecked[i] = existingAnswer.optionsChecked[i];\n          prevAnswers[answerIndex].optionSelected[multiOptionIndex] = multiOptionChecked;\n          const updatedAnswer = {\n            ...prevAnswers[answerIndex],\n            optionsChecked: updateOptionsChecked\n          };\n          // insert the updated answer into the answer array\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id;\n          // Initialize the optionsChecked array\n          for (let i = 0; i < currentQuestion.options.length; i++) updateOptionsChecked[i] = false;\n          updateOptionsChecked[multiOptionIndex] = multiOptionChecked;\n\n          // Add the new answer to the previous answers\n          return [...prevAnswers, {\n            userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n            questionId: questionId,\n            type: answerType,\n            optionsChecked: updateOptionsChecked,\n            optionSelected: null,\n            shortAnswer: null\n          }];\n        }\n      }\n\n      // Handle single select questions\n      else if (answerType === QuestionCategory.MultipleChoice && singleOptionIndex != null) {\n        // If the answer already exists, update the optionSelected value\n        if (answerIndex > -1) {\n          const updatedAnswer = {\n            ...prevAnswers[answerIndex],\n            optionSelected: singleOptionIndex\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id2;\n          const updatedAnswer = {\n            userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n            questionId: questionId,\n            type: answerType,\n            optionsChecked: null,\n            optionSelected: singleOptionIndex,\n            shortAnswer: null\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && value != null) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = value;\n          return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id3;\n          const updatedAnswer = {\n            userId: (_user$id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id3 !== void 0 ? _user$id3 : \"\",\n            questionId: questionId,\n            type: answerType,\n            optionsChecked: null,\n            optionSelected: null,\n            shortAnswer: value\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"\"\n      }));\n    }\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && answer.shortAnswer != null && answer.shortAnswer.trim().length === 0) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) {\n      return; // Prevent moving to the next question if validation fails\n    }\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      handleSubmit();\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  const handleSubmit = () => {\n    new APIClient().postQuestionResponse(answers);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[currentQuestionIndex] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoice, e.target.value, null, null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.text,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map((option, i) => {\n          var _answers$currentQuest, _answers$currentQuest2, _answers$currentQuest3;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: (_answers$currentQuest = (_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : (_answers$currentQuest3 = _answers$currentQuest2.optionsChecked) === null || _answers$currentQuest3 === void 0 ? void 0 : _answers$currentQuest3[i]) !== null && _answers$currentQuest !== void 0 ? _answers$currentQuest : false,\n              onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoiceSelectAll, null, null, i, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest4 = answers[currentQuestionIndex]) === null || _answers$currentQuest4 === void 0 ? void 0 : _answers$currentQuest4.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, QuestionCategory.ShortAnswer, e.target.value, null, null, null);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"gREewYr41+kU2wZV4lpa9tvoqWQ=\", false, function () {\n  return [useUser, useParams, useQuestionnaires];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","jsxDEV","_jsxDEV","Questionnaire","_s","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest4","user","id","questionnaires","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","answerType","value","singleOptionIndex","multiOptionIndex","multiOptionChecked","prevAnswers","answerIndex","findIndex","answer","MultipleChoiceSelectAll","updateOptionsChecked","existingAnswer","optionSelected","updatedAnswer","optionsChecked","slice","_user$id","i","currentQuestion","options","length","userId","type","shortAnswer","MultipleChoice","_user$id2","ShortAnswer","_user$id3","prevErrors","validateAnswer","trim","handleNext","questions","handleSubmit","handlePrevious","progress","postQuestionResponse","name","mt","sx","marginBottom","text","onChange","e","target","map","option","control","label","_answers$currentQuest","_answers$currentQuest2","_answers$currentQuest3","checked","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponseType } from \"../types/QuestionResponseType\";\nimport { useUser } from \"../../../types/UserContextProvider\";\n\nexport const Questionnaire: React.FC = () => {\n  const user = useUser().user;\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponseType[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  if (!questionnaire) return;\n  <Container>\n    <Typography variant=\"h6\">Questionnaire not found</Typography>\n  </Container>;\n\n  const handleAnswerChange = (\n    questionId: number,\n    answerType: QuestionCategory,\n    value: string | null,\n    singleOptionIndex: number | null,\n    multiOptionIndex: number | null,\n    multiOptionChecked: boolean | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      // Handle multi select questions\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        multiOptionChecked !== null &&\n        multiOptionIndex !== null\n      ) {\n        let updateOptionsChecked: boolean[] = [];\n        const existingAnswer = prevAnswers[answerIndex];\n\n        // Update curr answer if it exists, else create a new answer\n        if (\n          answerIndex > -1 &&\n          prevAnswers[answerIndex].optionSelected != null\n        ) {\n          // for (let i = 0; i < existingAnswer.optionsChecked.length; i++)\n          //   updateOptionsChecked[i] = existingAnswer.optionsChecked[i];\n          prevAnswers[answerIndex].optionSelected[multiOptionIndex] =\n            multiOptionChecked;\n          const updatedAnswer: QuestionResponseType = {\n            ...prevAnswers[answerIndex],\n            optionsChecked: updateOptionsChecked,\n          };\n          // insert the updated answer into the answer array\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          // Initialize the optionsChecked array\n          for (let i = 0; i < currentQuestion.options.length; i++)\n            updateOptionsChecked[i] = false;\n          updateOptionsChecked[multiOptionIndex] = multiOptionChecked;\n\n          // Add the new answer to the previous answers\n          return [\n            ...prevAnswers,\n            {\n              userId: user?.id ?? \"\",\n              questionId: questionId,\n              type: answerType,\n              optionsChecked: updateOptionsChecked,\n              optionSelected: null,\n              shortAnswer: null,\n            },\n          ];\n        }\n      }\n\n      // Handle single select questions\n      else if (\n        answerType === QuestionCategory.MultipleChoice &&\n        singleOptionIndex != null\n      ) {\n        // If the answer already exists, update the optionSelected value\n        if (answerIndex > -1) {\n          const updatedAnswer: QuestionResponseType = {\n            ...prevAnswers[answerIndex],\n            optionSelected: singleOptionIndex,\n          };\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponseType = {\n            userId: user?.id ?? \"\",\n            questionId: questionId,\n            type: answerType,\n            optionsChecked: null,\n            optionSelected: singleOptionIndex,\n            shortAnswer: null,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && value != null) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = value;\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            prevAnswers[answerIndex],\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponseType = {\n            userId: user?.id ?? \"\",\n            questionId: questionId,\n            type: answerType,\n            optionsChecked: null,\n            optionSelected: null,\n            shortAnswer: value,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n    }\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      answer.shortAnswer != null &&\n      answer.shortAnswer.trim().length === 0\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    ) {\n      return; // Prevent moving to the next question if validation fails\n    }\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      handleSubmit();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  const handleSubmit = () => {\n    new APIClient().postQuestionResponse(answers);\n  };\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.MultipleChoice,\n                  e.target.value,\n                  null,\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.text}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option, i) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      answers[currentQuestionIndex]?.optionsChecked?.[i] ??\n                      false\n                    }\n                    onChange={(e) =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        null,\n                        null,\n                        i,\n                        e.target.checked\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.ShortAnswer,\n                  e.target.value,\n                  null,\n                  null,\n                  null\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,SAAS,EACTC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,gBAAgB,EAChBC,MAAM,EACNC,cAAc,EACdC,GAAG,EACHC,SAAS,QACJ,eAAe;AACtB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,OAAO,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,OAAO,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EAC3C,MAAMC,IAAI,GAAGR,OAAO,CAAC,CAAC,CAACQ,IAAI;EAC3B,MAAM;IAAEC;EAAG,CAAC,GAAGb,SAAS,CAAiB,CAAC;EAC1C,MAAMc,cAAc,GAAGb,iBAAiB,CAAC,CAAC;EAE1C,MAAM,CAACc,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC4B,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAyB,EAAE,CAAC;EAElE,MAAM,CAAC8B,MAAM,EAAEC,SAAS,CAAC,GAAG/B,QAAQ,CAAyB,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAMgC,aAAa,GAAGP,cAAc,CAACA,cAAc,CAACQ,IAAI,CACrDC,CAAC,IAAKA,CAAC,CAACV,EAAE,KAAKW,MAAM,CAACX,EAAE,CAC3B,CAAC;EACD,IAAI,CAACQ,aAAa,EAAE;EACpB,aAAAf,OAAA,CAAChB,SAAS;IAAAmC,QAAA,eACRnB,OAAA,CAACf,UAAU;MAACmC,OAAO,EAAC,IAAI;MAAAD,QAAA,EAAC;IAAuB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;EAEZ,MAAMC,kBAAkB,GAAGA,CACzBC,UAAkB,EAClBC,UAA4B,EAC5BC,KAAoB,EACpBC,iBAAgC,EAChCC,gBAA+B,EAC/BC,kBAAkC,KAC/B;IACHnB,UAAU,CAAEoB,WAAW,IAAK;MAC1B,MAAMC,WAAW,GAAGD,WAAW,CAACE,SAAS,CACtCC,MAAM,IAAKA,MAAM,CAACT,UAAU,KAAKA,UACpC,CAAC;;MAED;MACA,IACEC,UAAU,KAAK/B,gBAAgB,CAACwC,uBAAuB,IACvDL,kBAAkB,KAAK,IAAI,IAC3BD,gBAAgB,KAAK,IAAI,EACzB;QACA,IAAIO,oBAA+B,GAAG,EAAE;QACxC,MAAMC,cAAc,GAAGN,WAAW,CAACC,WAAW,CAAC;;QAE/C;QACA,IACEA,WAAW,GAAG,CAAC,CAAC,IAChBD,WAAW,CAACC,WAAW,CAAC,CAACM,cAAc,IAAI,IAAI,EAC/C;UACA;UACA;UACAP,WAAW,CAACC,WAAW,CAAC,CAACM,cAAc,CAACT,gBAAgB,CAAC,GACvDC,kBAAkB;UACpB,MAAMS,aAAmC,GAAG;YAC1C,GAAGR,WAAW,CAACC,WAAW,CAAC;YAC3BQ,cAAc,EAAEJ;UAClB,CAAC;UACD;UACA,OAAO,CACL,GAAGL,WAAW,CAACU,KAAK,CAAC,CAAC,EAAET,WAAW,CAAC,EACpCO,aAAa,EACb,GAAGR,WAAW,CAACU,KAAK,CAACT,WAAW,GAAG,CAAC,CAAC,CACtC;QACH,CAAC,MAAM;UAAA,IAAAU,QAAA;UACL;UACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,eAAe,CAACC,OAAO,CAACC,MAAM,EAAEH,CAAC,EAAE,EACrDP,oBAAoB,CAACO,CAAC,CAAC,GAAG,KAAK;UACjCP,oBAAoB,CAACP,gBAAgB,CAAC,GAAGC,kBAAkB;;UAE3D;UACA,OAAO,CACL,GAAGC,WAAW,EACd;YACEgB,MAAM,GAAAL,QAAA,GAAErC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAAoC,QAAA,cAAAA,QAAA,GAAI,EAAE;YACtBjB,UAAU,EAAEA,UAAU;YACtBuB,IAAI,EAAEtB,UAAU;YAChBc,cAAc,EAAEJ,oBAAoB;YACpCE,cAAc,EAAE,IAAI;YACpBW,WAAW,EAAE;UACf,CAAC,CACF;QACH;MACF;;MAEA;MAAA,KACK,IACHvB,UAAU,KAAK/B,gBAAgB,CAACuD,cAAc,IAC9CtB,iBAAiB,IAAI,IAAI,EACzB;QACA;QACA,IAAII,WAAW,GAAG,CAAC,CAAC,EAAE;UACpB,MAAMO,aAAmC,GAAG;YAC1C,GAAGR,WAAW,CAACC,WAAW,CAAC;YAC3BM,cAAc,EAAEV;UAClB,CAAC;UACD,OAAO,CACL,GAAGG,WAAW,CAACU,KAAK,CAAC,CAAC,EAAET,WAAW,CAAC,EACpCO,aAAa,EACb,GAAGR,WAAW,CAACU,KAAK,CAACT,WAAW,GAAG,CAAC,CAAC,CACtC;QACH,CAAC,MAAM;UAAA,IAAAmB,SAAA;UACL,MAAMZ,aAAmC,GAAG;YAC1CQ,MAAM,GAAAI,SAAA,GAAE9C,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAA6C,SAAA,cAAAA,SAAA,GAAI,EAAE;YACtB1B,UAAU,EAAEA,UAAU;YACtBuB,IAAI,EAAEtB,UAAU;YAChBc,cAAc,EAAE,IAAI;YACpBF,cAAc,EAAEV,iBAAiB;YACjCqB,WAAW,EAAE;UACf,CAAC;UACD,OAAO,CAAC,GAAGlB,WAAW,EAAEQ,aAAa,CAAC;QACxC;MACF,CAAC,MAAM,IAAIb,UAAU,KAAK/B,gBAAgB,CAACyD,WAAW,IAAIzB,KAAK,IAAI,IAAI,EAAE;QACvE;QACA,IAAIK,WAAW,GAAG,CAAC,CAAC,IAAID,WAAW,CAACC,WAAW,CAAC,CAACiB,WAAW,IAAI,IAAI,EAAE;UACpElB,WAAW,CAACC,WAAW,CAAC,CAACiB,WAAW,GAAGtB,KAAK;UAC5C,OAAO,CACL,GAAGI,WAAW,CAACU,KAAK,CAAC,CAAC,EAAET,WAAW,CAAC,EACpCD,WAAW,CAACC,WAAW,CAAC,EACxB,GAAGD,WAAW,CAACU,KAAK,CAACT,WAAW,GAAG,CAAC,CAAC,CACtC;QACH,CAAC,MAAM;UAAA,IAAAqB,SAAA;UACL,MAAMd,aAAmC,GAAG;YAC1CQ,MAAM,GAAAM,SAAA,GAAEhD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,EAAE,cAAA+C,SAAA,cAAAA,SAAA,GAAI,EAAE;YACtB5B,UAAU,EAAEA,UAAU;YACtBuB,IAAI,EAAEtB,UAAU;YAChBc,cAAc,EAAE,IAAI;YACpBF,cAAc,EAAE,IAAI;YACpBW,WAAW,EAAEtB;UACf,CAAC;UACD,OAAO,CAAC,GAAGI,WAAW,EAAEQ,aAAa,CAAC;QACxC;MACF;MACA,OAAOR,WAAW;IACpB,CAAC,CAAC;;IAEF;IACA,IAAInB,MAAM,CAACa,UAAU,CAAC,EAAE;MACtBZ,SAAS,CAAEyC,UAAU,KAAM;QACzB,GAAGA,UAAU;QACb,CAAC7B,UAAU,GAAG;MAChB,CAAC,CAAC,CAAC;IACL;EACF,CAAC;;EAED;EACA,MAAM8B,cAAc,GAAI9B,UAAkB,IAAK;IAC7C,MAAMS,MAAM,GAAGxB,OAAO,CAACe,UAAU,CAAC,IAAI,EAAE;IACxC,IACES,MAAM,CAACc,IAAI,KAAKrD,gBAAgB,CAACyD,WAAW,IAC5ClB,MAAM,CAACe,WAAW,IAAI,IAAI,IAC1Bf,MAAM,CAACe,WAAW,CAACO,IAAI,CAAC,CAAC,CAACV,MAAM,KAAK,CAAC,EACtC;MACAjC,SAAS,CAAEyC,UAAU,KAAM;QACzB,GAAGA,UAAU;QACb,CAAC7B,UAAU,GACT;MACJ,CAAC,CAAC,CAAC;MACH,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMgC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMb,eAAe,GAAG9B,aAAa,CAAC4C,SAAS,CAAClD,oBAAoB,CAAC;IACrE;IACA,IACEoC,eAAe,CAACI,IAAI,KAAKrD,gBAAgB,CAACyD,WAAW,IACrD,CAACG,cAAc,CAACX,eAAe,CAACtC,EAAE,CAAC,EACnC;MACA,OAAO,CAAC;IACV;IAEA,IAAIE,oBAAoB,GAAGM,aAAa,CAAC4C,SAAS,CAACZ,MAAM,GAAG,CAAC,EAAE;MAC7DrC,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD,CAAC,MAAM;MACL;MACAmD,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIpD,oBAAoB,GAAG,CAAC,EAAE;MAC5BC,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD;EACF,CAAC;EAED,MAAMoC,eAAe,GAAG9B,aAAa,CAAC4C,SAAS,CAAClD,oBAAoB,CAAC;EACrE,MAAMqD,QAAQ,GACX,CAACrD,oBAAoB,GAAG,CAAC,IAAIM,aAAa,CAAC4C,SAAS,CAACZ,MAAM,GAAI,GAAG;EAErE,MAAMa,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI/D,SAAS,CAAC,CAAC,CAACkE,oBAAoB,CAACpD,OAAO,CAAC;EAC/C,CAAC;EACD,oBACEX,OAAA,CAAChB,SAAS;IAAAmC,QAAA,gBACRnB,OAAA,CAACf,UAAU;MAACmC,OAAO,EAAC,IAAI;MAAAD,QAAA,GAAC,iBAAe,EAACJ,aAAa,CAACiD,IAAI;IAAA;MAAA3C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eACzExB,OAAA,CAACR,GAAG;MAACyE,EAAE,EAAE,CAAE;MAAA9C,QAAA,gBACTnB,OAAA,CAACf,UAAU;QAACmC,OAAO,EAAC,IAAI;QAAC8C,EAAE,EAAE;UAAEC,YAAY,EAAE;QAAM,CAAE;QAAAhD,QAAA,EAClD0B,eAAe,CAACuB;MAAI;QAAA/C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC,eAEbxB,OAAA,CAACR,GAAG;QAACyE,EAAE,EAAE,CAAE;QAAA9C,QAAA,EACR0B,eAAe,CAACI,IAAI,KAAKrD,gBAAgB,CAACuD,cAAc,gBACvDnD,OAAA,CAACb,UAAU;UACTyC,KAAK,EAAEjB,OAAO,CAACF,oBAAoB,CAAC,IAAI,EAAG;UAC3C4D,QAAQ,EAAGC,CAAC,IACV7C,kBAAkB,CAChBoB,eAAe,CAACtC,EAAE,EAClBX,gBAAgB,CAACuD,cAAc,EAC/BmB,CAAC,CAACC,MAAM,CAAC3C,KAAK,EACd,IAAI,EACJ,IAAI,EACJ,IACF,CACD;UAAAT,QAAA,GAAAhB,qBAAA,GAEA0C,eAAe,CAACC,OAAO,cAAA3C,qBAAA,uBAAvBA,qBAAA,CAAyBqE,GAAG,CAAEC,MAAM,iBACnCzE,OAAA,CAACX,gBAAgB;YAEfuC,KAAK,EAAE6C,MAAM,CAACL,IAAK;YACnBM,OAAO,eAAE1E,OAAA,CAACZ,KAAK;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAE;YACnBmD,KAAK,EAAEF,MAAM,CAACL;UAAK,GAHdK,MAAM,CAAClE,EAAE;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIf,CACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,GACXqB,eAAe,CAACI,IAAI,KACtBrD,gBAAgB,CAACwC,uBAAuB,IAAAhC,sBAAA,GACxCyC,eAAe,CAACC,OAAO,cAAA1C,sBAAA,uBAAvBA,sBAAA,CAAyBoE,GAAG,CAAC,CAACC,MAAM,EAAE7B,CAAC;UAAA,IAAAgC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;UAAA,oBACrC9E,OAAA,CAACX,gBAAgB;YAEfqF,OAAO,eACL1E,OAAA,CAACd,QAAQ;cACP6F,OAAO,GAAAH,qBAAA,IAAAC,sBAAA,GACLlE,OAAO,CAACF,oBAAoB,CAAC,cAAAoE,sBAAA,wBAAAC,sBAAA,GAA7BD,sBAAA,CAA+BpC,cAAc,cAAAqC,sBAAA,uBAA7CA,sBAAA,CAAgDlC,CAAC,CAAC,cAAAgC,qBAAA,cAAAA,qBAAA,GAClD,KACD;cACDP,QAAQ,EAAGC,CAAC,IACV7C,kBAAkB,CAChBoB,eAAe,CAACtC,EAAE,EAClBX,gBAAgB,CAACwC,uBAAuB,EACxC,IAAI,EACJ,IAAI,EACJQ,CAAC,EACD0B,CAAC,CAACC,MAAM,CAACQ,OACX;YACD;cAAA1D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CACF;YACDmD,KAAK,EAAEF,MAAM,CAACL;UAAK,GAnBdK,MAAM,CAAClE,EAAE;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAoBf,CAAC;QAAA,CACH,CAAC,gBAEFxB,OAAA,CAACP,SAAS;UACR2B,OAAO,EAAC,UAAU;UAClB4D,SAAS;UACTpD,KAAK,EAAE,EAAAvB,sBAAA,GAAAM,OAAO,CAACF,oBAAoB,CAAC,cAAAJ,sBAAA,uBAA7BA,sBAAA,CAA+B6C,WAAW,KAAI,EAAG;UACxDmB,QAAQ,EAAGC,CAAC,IAAK;YACf7C,kBAAkB,CAChBoB,eAAe,CAACtC,EAAE,EAClBX,gBAAgB,CAACyD,WAAW,EAC5BiB,CAAC,CAACC,MAAM,CAAC3C,KAAK,EACd,IAAI,EACJ,IAAI,EACJ,IACF,CAAC;UACH,CAAE;UACFqD,KAAK,EAAE,CAAC,CAACpE,MAAM,CAACgC,eAAe,CAACtC,EAAE,CAAE;UACpC2E,UAAU,EAAErE,MAAM,CAACgC,eAAe,CAACtC,EAAE,CAAE;UACvC4E,QAAQ,EAAE;QAAK;UAAA9D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENxB,OAAA,CAACR,GAAG;MAACyE,EAAE,EAAE,CAAE;MAACmB,OAAO,EAAC,MAAM;MAACC,cAAc,EAAC,eAAe;MAAAlE,QAAA,gBACvDnB,OAAA,CAACV,MAAM;QACL8B,OAAO,EAAC,WAAW;QACnBkE,OAAO,EAAEzB,cAAe;QACxB0B,QAAQ,EAAE9E,oBAAoB,KAAK,CAAE;QAAAU,QAAA,EACtC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTxB,OAAA,CAACV,MAAM;QAAC8B,OAAO,EAAC,WAAW;QAACkE,OAAO,EAAE5B,UAAW;QAAAvC,QAAA,EAAC;MAEjD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNxB,OAAA,CAACR,GAAG;MAACyE,EAAE,EAAE,CAAE;MAAA9C,QAAA,gBACTnB,OAAA,CAACT,cAAc;QAAC6B,OAAO,EAAC,aAAa;QAACQ,KAAK,EAAEkC;MAAS;QAAAzC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzDxB,OAAA,CAACf,UAAU;QAACmC,OAAO,EAAC,OAAO;QAACoE,KAAK,EAAC,eAAe;QAAArE,QAAA,EAC9C,aAAaV,oBAAoB,GAAG,CAAC,IACpCM,aAAa,CAAC4C,SAAS,CAACZ,MAAM;MAC9B;QAAA1B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB,CAAC;AAACtB,EAAA,CArSWD,aAAuB;EAAA,QACrBH,OAAO,EACLJ,SAAS,EACDC,iBAAiB;AAAA;AAAA8F,EAAA,GAH7BxF,aAAuB;AAAA,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}