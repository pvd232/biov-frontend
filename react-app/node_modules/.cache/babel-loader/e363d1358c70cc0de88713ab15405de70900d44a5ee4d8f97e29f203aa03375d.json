{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/context/QuestionResponseContextProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { APIClient } from \"../helpers/APIC\";\nimport { UserSession } from \"./UserSession\";\nimport { QuestionResponse } from \"../helpers/QuestionResponse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionResponseContext = /*#__PURE__*/createContext(undefined);\nexport const QuestionResponseContextProvider = ({\n  children\n}) => {\n  _s();\n  const [questionResponses, setQuestionResponses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const userId = new UserSession().getUserId();\n  useEffect(() => {\n    try {\n      APIClient.fetchQuestionResponse(userId).then(response => {\n        if (!response) {\n          throw new Error(\"Failed to fetch questionResponses\");\n        }\n        response.json().then(data => {\n          const questionResponses = data.map(json => new QuestionResponse(json));\n          setQuestionResponses(questionResponses);\n        });\n      });\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(QuestionResponseContext.Provider, {\n    value: {\n      questionResponses,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionResponseContextProvider, \"rf7HTmHF9p9o2J46B6GWDPrfl2E=\");\n_c = QuestionResponseContextProvider;\nvar _c;\n$RefreshReg$(_c, \"QuestionResponseContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","APIClient","UserSession","QuestionResponse","jsxDEV","_jsxDEV","QuestionResponseContext","undefined","QuestionResponseContextProvider","children","_s","questionResponses","setQuestionResponses","loading","setLoading","error","setError","userId","getUserId","fetchQuestionResponse","then","response","Error","json","data","map","err","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/context/QuestionResponseContextProvider.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { QuestionResponseContextType } from \"../types/context/QuestionResponseContextType\";\nimport { QuestionResponseContextProviderProps } from \"../types/context/QuestionResponseContextProviderProps\";\nimport { APIClient } from \"../helpers/APIC\";\nimport { UserSession } from \"./UserSession\";\nimport { QuestionResponse } from \"../helpers/QuestionResponse\";\nimport { useUser } from \"../hooks/useUser\";\n\nexport const QuestionResponseContext = createContext<\n  QuestionResponseContextType | undefined\n>(undefined);\n\nexport const QuestionResponseContextProvider: React.FC<\n  QuestionResponseContextProviderProps\n> = ({ children }) => {\n  const [questionResponses, setQuestionResponses] = useState<\n    QuestionResponse[]\n  >([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const userId = new UserSession().getUserId()!;\n  useEffect(() => {\n    try {\n      APIClient.fetchQuestionResponse(userId).then((response) => {\n        if (!response) {\n          throw new Error(\"Failed to fetch questionResponses\");\n        }\n\n        response.json().then((data) => {\n          const questionResponses = data.map(\n            (json: any) => new QuestionResponse(json)\n          );\n          setQuestionResponses(questionResponses);\n        });\n      });\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId]);\n  return (\n    <QuestionResponseContext.Provider\n      value={{ questionResponses, loading, error }}\n    >\n      {children}\n    </QuestionResponseContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAGjE,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,gBAAgB,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/D,OAAO,MAAMC,uBAAuB,gBAAGR,aAAa,CAElDS,SAAS,CAAC;AAEZ,OAAO,MAAMC,+BAEZ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpB,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGb,QAAQ,CAExD,EAAE,CAAC;EACL,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMkB,MAAM,GAAG,IAAIf,WAAW,CAAC,CAAC,CAACgB,SAAS,CAAC,CAAE;EAC7ClB,SAAS,CAAC,MAAM;IACd,IAAI;MACFC,SAAS,CAACkB,qBAAqB,CAACF,MAAM,CAAC,CAACG,IAAI,CAAEC,QAAQ,IAAK;QACzD,IAAI,CAACA,QAAQ,EAAE;UACb,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;QACtD;QAEAD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,IAAI,IAAK;UAC7B,MAAMb,iBAAiB,GAAGa,IAAI,CAACC,GAAG,CAC/BF,IAAS,IAAK,IAAIpB,gBAAgB,CAACoB,IAAI,CAC1C,CAAC;UACDX,oBAAoB,CAACD,iBAAiB,CAAC;QACzC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOe,GAAQ,EAAE;MACjBV,QAAQ,CAACU,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACG,MAAM,CAAC,CAAC;EACZ,oBACEZ,OAAA,CAACC,uBAAuB,CAACsB,QAAQ;IAC/BC,KAAK,EAAE;MAAElB,iBAAiB;MAAEE,OAAO;MAAEE;IAAM,CAAE;IAAAN,QAAA,EAE5CA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACuB,CAAC;AAEvC,CAAC;AAACvB,EAAA,CApCWF,+BAEZ;AAAA0B,EAAA,GAFY1B,+BAEZ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}