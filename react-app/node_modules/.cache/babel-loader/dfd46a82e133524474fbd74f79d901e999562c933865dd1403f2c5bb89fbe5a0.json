{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../../../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest4;\n  const user = useUser().user;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  if (!questionnaire) return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Questionnaire not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 7\n  }, this);\n  const handleAnswerChange = (questionId, answerType, value, singleOptionIndex, multiOptionIndex, multiOptionChecked) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n\n      // Handle multi select questions\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && multiOptionChecked !== null && multiOptionIndex !== null) {\n        // Update curr answer if it exists, else create a new answer\n        if (answerIndex > -1 && prevAnswers[answerIndex].multiOptions != null) {\n          prevAnswers[answerIndex].multiOptions[multiOptionIndex] = multiOptionChecked;\n\n          // Insert the updated answer into the answer array\n          return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id;\n          let updatedMultiOptions = [];\n\n          // Initialize the multiOptions array\n          for (let i = 0; i < currentQuestion.options.length; i++) updatedMultiOptions[i] = false;\n          updatedMultiOptions[multiOptionIndex] = multiOptionChecked;\n\n          // Add the new answer to the previous answers\n          return [...prevAnswers, {\n            userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n            questionId: questionId,\n            type: answerType,\n            multiOptions: updatedMultiOptions,\n            singleOption: null,\n            shortAnswer: null\n          }];\n        }\n      }\n\n      // Handle single select questions\n      else if (answerType === QuestionCategory.MultipleChoice && singleOptionIndex != null) {\n        // If the answer already exists, update the singleOption value\n        if (answerIndex > -1) {\n          const updatedAnswer = {\n            ...prevAnswers[answerIndex],\n            singleOption: singleOptionIndex\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id2;\n          const updatedAnswer = {\n            userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n            questionId: questionId,\n            type: answerType,\n            multiOptions: null,\n            singleOption: singleOptionIndex,\n            shortAnswer: null\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && value != null) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = value;\n          return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id3;\n          const updatedAnswer = {\n            userId: (_user$id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id3 !== void 0 ? _user$id3 : \"\",\n            questionId: questionId,\n            type: answerType,\n            multiOptions: null,\n            singleOption: null,\n            shortAnswer: value\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"\"\n      }));\n    }\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) {\n      return; // Prevent moving to the next question if validation fails\n    }\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      handleSubmit();\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  const handleSubmit = () => {\n    new APIClient().postQuestionResponse(answers);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[currentQuestionIndex] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoice, e.target.value, null, null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.text,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map((option, i) => {\n          var _answers$currentQuest, _answers$currentQuest2, _answers$currentQuest3;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: (_answers$currentQuest = (_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : (_answers$currentQuest3 = _answers$currentQuest2.multiOptions) === null || _answers$currentQuest3 === void 0 ? void 0 : _answers$currentQuest3[i]) !== null && _answers$currentQuest !== void 0 ? _answers$currentQuest : false,\n              onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoiceSelectAll, null, null, i, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest4 = answers[currentQuestionIndex]) === null || _answers$currentQuest4 === void 0 ? void 0 : _answers$currentQuest4.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, QuestionCategory.ShortAnswer, e.target.value, null, null, null);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"gREewYr41+kU2wZV4lpa9tvoqWQ=\", false, function () {\n  return [useUser, useParams, useQuestionnaires];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","jsxDEV","_jsxDEV","Questionnaire","_s","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest4","user","id","questionnaires","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","answerType","value","singleOptionIndex","multiOptionIndex","multiOptionChecked","prevAnswers","answerIndex","findIndex","answer","MultipleChoiceSelectAll","multiOptions","slice","_user$id","updatedMultiOptions","i","currentQuestion","options","length","userId","type","singleOption","shortAnswer","MultipleChoice","updatedAnswer","_user$id2","ShortAnswer","_user$id3","prevErrors","validateAnswer","trim","handleNext","questions","handleSubmit","handlePrevious","progress","postQuestionResponse","name","mt","sx","marginBottom","text","onChange","e","target","map","option","control","label","_answers$currentQuest","_answers$currentQuest2","_answers$currentQuest3","checked","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../../../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponseType } from \"../types/QuestionResponseType\";\nimport { useUser } from \"../../../context/UserContextProvider\";\n\nexport const Questionnaire: React.FC = () => {\n  const user = useUser().user;\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponseType[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  if (!questionnaire)\n    return (\n      <Container>\n        <Typography variant=\"h6\">Questionnaire not found</Typography>\n      </Container>\n    );\n  const handleAnswerChange = (\n    questionId: number,\n    answerType: QuestionCategory,\n    value: string | null,\n    singleOptionIndex: number | null,\n    multiOptionIndex: number | null,\n    multiOptionChecked: boolean | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      // Handle multi select questions\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        multiOptionChecked !== null &&\n        multiOptionIndex !== null\n      ) {\n        // Update curr answer if it exists, else create a new answer\n        if (answerIndex > -1 && prevAnswers[answerIndex].multiOptions != null) {\n          prevAnswers[answerIndex].multiOptions[multiOptionIndex] =\n            multiOptionChecked;\n\n          // Insert the updated answer into the answer array\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            prevAnswers[answerIndex],\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          let updatedMultiOptions: boolean[] = [];\n\n          // Initialize the multiOptions array\n          for (let i = 0; i < currentQuestion.options.length; i++)\n            updatedMultiOptions[i] = false;\n          updatedMultiOptions[multiOptionIndex] = multiOptionChecked;\n\n          // Add the new answer to the previous answers\n          return [\n            ...prevAnswers,\n            {\n              userId: user?.id ?? \"\",\n              questionId: questionId,\n              type: answerType,\n              multiOptions: updatedMultiOptions,\n              singleOption: null,\n              shortAnswer: null,\n            },\n          ];\n        }\n      }\n\n      // Handle single select questions\n      else if (\n        answerType === QuestionCategory.MultipleChoice &&\n        singleOptionIndex != null\n      ) {\n        // If the answer already exists, update the singleOption value\n        if (answerIndex > -1) {\n          const updatedAnswer: QuestionResponseType = {\n            ...prevAnswers[answerIndex],\n            singleOption: singleOptionIndex,\n          };\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponseType = {\n            userId: user?.id ?? \"\",\n            questionId: questionId,\n            type: answerType,\n            multiOptions: null,\n            singleOption: singleOptionIndex,\n            shortAnswer: null,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && value != null) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = value;\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            prevAnswers[answerIndex],\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponseType = {\n            userId: user?.id ?? \"\",\n            questionId: questionId,\n            type: answerType,\n            multiOptions: null,\n            singleOption: null,\n            shortAnswer: value,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n    }\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    ) {\n      return; // Prevent moving to the next question if validation fails\n    }\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      handleSubmit();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  const handleSubmit = () => {\n    new APIClient().postQuestionResponse(answers);\n  };\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.MultipleChoice,\n                  e.target.value,\n                  null,\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.text}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option, i) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      answers[currentQuestionIndex]?.multiOptions?.[i] ?? false\n                    }\n                    onChange={(e) =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        null,\n                        null,\n                        i,\n                        e.target.checked\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.ShortAnswer,\n                  e.target.value,\n                  null,\n                  null,\n                  null\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}