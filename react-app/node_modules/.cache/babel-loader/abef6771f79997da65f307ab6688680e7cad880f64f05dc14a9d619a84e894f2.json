{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../types/UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest;\n  const user = useUser().user;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  if (!questionnaire) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Questionnaire not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  const handleAnswerChange = (questionId, value, answerType, optionIndex, optionChecked) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n      console.log(\"answerIndex\", answerIndex);\n      console.log(\"currentQuestionIndex\", currentQuestionIndex);\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && optionChecked !== null && optionIndex !== null) {\n        let updateOptionsChecked = [];\n        console.log(\"answerIndex\", answerIndex);\n        // Initialize empty options array if it doesn't exist\n        if (answerIndex > -1) {\n          // console.log(\"prevAnswers ins\", prevAnswers);\n          const existingAnswer = prevAnswers[answerIndex];\n          console.log(\"existingAnswer ops\", existingAnswer.optionsChecked);\n          for (let i = 0; i < existingAnswer.optionsChecked.length; i++) updateOptionsChecked[i] = existingAnswer.optionsChecked[i];\n          updateOptionsChecked[optionIndex] = optionChecked;\n          const updatedAnswer = {\n            ...existingAnswer,\n            optionsChecked: updateOptionsChecked\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          var _user$id;\n          for (let i = 0; i < currentQuestion.options.length; i++) updateOptionsChecked[i] = false;\n          updateOptionsChecked[optionIndex] = optionChecked;\n          return [...prevAnswers, {\n            userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n            questionId,\n            shortAnswer: \"\",\n            optionsChecked: updateOptionsChecked,\n            type: answerType // Add the missing 'type' property\n          }];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && typeof value === \"string\") {\n        var _user$id2;\n        console.log(\"prevAnswers\", prevAnswers);\n\n        // Handle short-response\n        const updatedAnswer = {\n          userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n          // Replace with actual user ID\n          questionId: questionId,\n          type: answerType,\n          shortAnswer: value,\n          optionsChecked: []\n        };\n        // console.log(\"updatedAnswer\", updatedAnswer);\n        if (answerIndex > -1) {\n          const newShort = prevAnswers[answerIndex].shortAnswer.concat(value);\n          updatedAnswer.shortAnswer = newShort;\n          // console.log(\"updatedAnswer post\", updatedAnswer);\n          const test2 = [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n          console.log(\"test2\", test2);\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          const test = [...prevAnswers, updatedAnswer];\n          console.log(\"test\", test);\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"\"\n      }));\n    }\n  };\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && answer.shortAnswer.trim().length === 0) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = () => {\n    return Object.keys(answers).map(questionId => {\n      var _user$id3;\n      const question = questionnaire.questions.find(q => q.id === Number(questionId));\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n      const response = {\n        userId: (_user$id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id3 !== void 0 ? _user$id3 : \"\",\n        // Replace with actual user ID\n        questionId: question.id,\n        optionsChecked: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type\n      };\n      return response;\n    });\n  };\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) {\n      return; // Prevent moving to the next question if validation fails\n    }\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[currentQuestionIndex] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, e.target.value, QuestionCategory.MultipleChoice, null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.text,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map((option, i) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox\n          // checked={\n          //   answers[currentQuestionIndex]?.optionsChecked[i] ?? false\n          // }\n          , {\n            onChange: e => {\n              // let options: boolean[] = [];\n\n              // for (let i = 0; i < currentQuestion.options.length; i++)\n              //   options.push(currentQuestion.options[i].);\n              // console.log(\"options i\", options[i]);\n              // console.log(\"option.id\", option.id);\n              // options[i] = e.target.checked;\n              // console.log(\"options i despues\", options[i]);\n\n              handleAnswerChange(currentQuestion.id, \"\", QuestionCategory.MultipleChoiceSelectAll, i, e.target.checked);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 19\n          }, this),\n          label: option.text\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.shortAnswer) || \"\",\n          onChange: e => {\n            const tt = answers;\n            console.log(\"tt\", tt);\n            console.log(\"currentQuestionIndex\", currentQuestionIndex);\n            handleAnswerChange(currentQuestion.id, e.target.value, QuestionCategory.ShortAnswer, null, null);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"gREewYr41+kU2wZV4lpa9tvoqWQ=\", false, function () {\n  return [useUser, useParams, useQuestionnaires];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","jsxDEV","_jsxDEV","Questionnaire","_s","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest","user","id","questionnaires","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","value","answerType","optionIndex","optionChecked","prevAnswers","answerIndex","findIndex","answer","console","log","MultipleChoiceSelectAll","updateOptionsChecked","existingAnswer","optionsChecked","i","length","updatedAnswer","slice","_user$id","currentQuestion","options","userId","shortAnswer","type","ShortAnswer","_user$id2","newShort","concat","test2","test","prevErrors","validateAnswer","trim","formatAnswersAsQuestionResponse","Object","keys","map","_user$id3","question","questions","Error","response","handleSubmit","formattedAnswers","postQuestionResponse","handleNext","handlePrevious","progress","name","mt","sx","marginBottom","text","MultipleChoice","onChange","e","target","option","control","label","checked","fullWidth","tt","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponseType } from \"../types/QuestionResponseType\";\nimport { useUser } from \"../../../types/UserContextProvider\";\n\nexport const Questionnaire: React.FC = () => {\n  const user = useUser().user;\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponseType[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  if (!questionnaire) {\n    return (\n      <Container>\n        <Typography variant=\"h6\">Questionnaire not found</Typography>\n      </Container>\n    );\n  }\n\n  const handleAnswerChange = (\n    questionId: number,\n    value: string,\n    answerType: QuestionCategory,\n    optionIndex: number | null,\n    optionChecked: boolean | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n      console.log(\"answerIndex\", answerIndex);\n      console.log(\"currentQuestionIndex\", currentQuestionIndex);\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        optionChecked !== null &&\n        optionIndex !== null\n      ) {\n        let updateOptionsChecked: boolean[] = [];\n\n        console.log(\"answerIndex\", answerIndex);\n        // Initialize empty options array if it doesn't exist\n        if (answerIndex > -1) {\n          // console.log(\"prevAnswers ins\", prevAnswers);\n          const existingAnswer = prevAnswers[answerIndex];\n          console.log(\"existingAnswer ops\", existingAnswer.optionsChecked);\n          for (let i = 0; i < existingAnswer.optionsChecked.length; i++)\n            updateOptionsChecked[i] = existingAnswer.optionsChecked[i];\n          updateOptionsChecked[optionIndex] = optionChecked;\n\n          const updatedAnswer: QuestionResponseType = {\n            ...existingAnswer,\n            optionsChecked: updateOptionsChecked,\n          };\n\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          for (let i = 0; i < currentQuestion.options.length; i++)\n            updateOptionsChecked[i] = false;\n          updateOptionsChecked[optionIndex] = optionChecked;\n          return [\n            ...prevAnswers,\n            {\n              userId: user?.id ?? \"\",\n              questionId,\n              shortAnswer: \"\",\n              optionsChecked: updateOptionsChecked,\n              type: answerType, // Add the missing 'type' property\n            },\n          ];\n        }\n      } else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        typeof value === \"string\"\n      ) {\n        console.log(\"prevAnswers\", prevAnswers);\n\n        // Handle short-response\n        const updatedAnswer: QuestionResponseType = {\n          userId: user?.id ?? \"\", // Replace with actual user ID\n          questionId: questionId,\n          type: answerType,\n          shortAnswer: value,\n          optionsChecked: [],\n        };\n        // console.log(\"updatedAnswer\", updatedAnswer);\n        if (answerIndex > -1) {\n          const newShort = prevAnswers[answerIndex].shortAnswer.concat(value);\n          updatedAnswer.shortAnswer = newShort;\n          // console.log(\"updatedAnswer post\", updatedAnswer);\n          const test2 = [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n          console.log(\"test2\", test2);\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const test = [...prevAnswers, updatedAnswer];\n          console.log(\"test\", test);\n\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n    }\n  };\n\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      answer.shortAnswer.trim().length === 0\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = (): QuestionResponseType[] => {\n    return Object.keys(answers).map((questionId) => {\n      const question = questionnaire.questions.find(\n        (q) => q.id === Number(questionId)\n      );\n\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n\n      const response: QuestionResponseType = {\n        userId: user?.id ?? \"\", // Replace with actual user ID\n        questionId: question.id,\n        optionsChecked: [],\n        shortAnswer: answers[question.id].shortAnswer,\n        type: question.type,\n      };\n\n      return response;\n    });\n  };\n\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    ) {\n      return; // Prevent moving to the next question if validation fails\n    }\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  QuestionCategory.MultipleChoice,\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.text}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option, i) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    // checked={\n                    //   answers[currentQuestionIndex]?.optionsChecked[i] ?? false\n                    // }\n                    onChange={(e) => {\n                      // let options: boolean[] = [];\n\n                      // for (let i = 0; i < currentQuestion.options.length; i++)\n                      //   options.push(currentQuestion.options[i].);\n                      // console.log(\"options i\", options[i]);\n                      // console.log(\"option.id\", option.id);\n                      // options[i] = e.target.checked;\n                      // console.log(\"options i despues\", options[i]);\n\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        \"\",\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        i,\n                        e.target.checked\n                      );\n                    }}\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                const tt = answers;\n                console.log(\"tt\", tt);\n                console.log(\"currentQuestionIndex\", currentQuestionIndex);\n                handleAnswerChange(\n                  currentQuestion.id,\n                  e.target.value,\n                  QuestionCategory.ShortAnswer,\n                  null,\n                  null\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}