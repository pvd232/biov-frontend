{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useLocation } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _location$state, _answers$currentQuest, _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest4;\n  const navigate = useNavigate();\n\n  // const questionnaires = useQuestionnaires();\n  const userId = useUser().userId;\n  const prevQuestionResponses = useQuestionResponses();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.questionnaire;\n\n  // useEffect(() => {\n  //   const questionId = questionnaire!.questions[currentQuestionIndex].id;\n  //   for (let response of prevQuestionResponses.questionResponses) {\n  //     if (response.questionId === questionId) {\n  //       console.log(\"response\", response);\n  //       switch (response.type) {\n  //         case QuestionCategory.MultipleChoice:\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoice,\n  //               singleOptionId: response.singleOptionId,\n  //               multiOptionIds: null,\n  //               shortAnswer: null,\n  //             },\n  //           ]);\n  //           break;\n  //         case QuestionCategory.MultipleChoiceSelectAll:\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoice,\n  //               singleOptionId: null,\n  //               multiOptionIds: response.multiOptionIds,\n  //               shortAnswer: null,\n  //             },\n  //           ]);\n  //           break;\n  //         case QuestionCategory.ShortAnswer:\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoice,\n  //               singleOptionId: null,\n  //               multiOptionIds: null,\n  //               shortAnswer: response.shortAnswer,\n  //             },\n  //           ]);\n  //           break;\n  //       }\n  //     }\n  //   }\n  // }, [\n  //   currentQuestionIndex,\n  //   questionnaire,\n  //   userId,\n  //   prevQuestionResponses,\n  //   navigate,\n  // ]);\n\n  const handleAnswerChange = (questionId, answerType, singleOptionId, multiOptionId, shortAnswer) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n\n      // Handle multi select questions\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && multiOptionId !== null) {\n        // Update curr answer if it exists, else create a new answer\n        if (answerIndex > -1 && prevAnswers[answerIndex].multiOptionIds != null) {\n          for (let optionId of prevAnswers[answerIndex].multiOptionIds) {\n            // If the option is already selected, remove it from the array of selected options\n            if (optionId === multiOptionId) {\n              prevAnswers[answerIndex].multiOptionIds = prevAnswers[answerIndex].multiOptionIds.filter(optionId => optionId !== multiOptionId);\n              return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n            }\n          }\n          // If the option is not already selected, add it to the array of selected options\n          prevAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n\n          // Insert the updated answer into the answer array\n        } else {\n          let updatedMultiOptions = [];\n          updatedMultiOptions.push(multiOptionId);\n          // Add the new answer to the previous answers\n          return [...prevAnswers, {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: updatedMultiOptions,\n            shortAnswer: null\n          }];\n        }\n      }\n\n      // Handle single select questions\n      else if (answerType === QuestionCategory.MultipleChoice && singleOptionId != null) {\n        // If the answer already exists, update the singleOption value\n        if (answerIndex > -1) {\n          const updatedAnswer = {\n            ...prevAnswers[answerIndex],\n            singleOptionId: singleOptionId\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          const updatedAnswer = {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (answerType === QuestionCategory.ShortAnswer && shortAnswer != null) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = shortAnswer;\n          return [...prevAnswers.slice(0, answerIndex), prevAnswers[answerIndex], ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          const updatedAnswer = {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) setErrors(prevErrors => ({\n      ...prevErrors,\n      [questionId]: \"\"\n    }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) setCurrentQuestionIndex(currentQuestionIndex + 1);else handleSubmit();\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers).then(() => {\n      navigate(\"/questionnaire-home\");\n    });\n  };\n  console.log(\"answers\", answers);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: ((_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.singleOptionId) || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoice, Number(e.target.value), null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.id,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map(option => {\n          var _answers$currentQuest2, _answers$currentQuest3;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: ((_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : (_answers$currentQuest3 = _answers$currentQuest2.multiOptionIds) === null || _answers$currentQuest3 === void 0 ? void 0 : _answers$currentQuest3.includes(option.id)) || false,\n              onChange: () => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoiceSelectAll, null, option.id, null)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest4 = answers[currentQuestionIndex]) === null || _answers$currentQuest4 === void 0 ? void 0 : _answers$currentQuest4.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, QuestionCategory.ShortAnswer, null, null, e.target.value);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"1RyS/FH5O8SNPhJhm4oUyn77ttg=\", false, function () {\n  return [useNavigate, useUser, useQuestionResponses, useLocation];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useLocation","QuestionCategory","APIClient","useUser","useNavigate","useQuestionResponses","jsxDEV","_jsxDEV","Questionnaire","_s","_location$state","_answers$currentQuest","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest4","navigate","userId","prevQuestionResponses","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","location","questionnaire","state","handleAnswerChange","questionId","answerType","singleOptionId","multiOptionId","shortAnswer","prevAnswers","answerIndex","findIndex","answer","MultipleChoiceSelectAll","multiOptionIds","optionId","filter","slice","push","updatedMultiOptions","type","MultipleChoice","updatedAnswer","ShortAnswer","prevErrors","validateAnswer","trim","length","handleNext","currentQuestion","questions","id","handleSubmit","handlePrevious","progress","postQuestionResponse","then","console","log","children","variant","name","fileName","_jsxFileName","lineNumber","columnNumber","mt","sx","marginBottom","text","value","onChange","e","Number","target","options","map","option","control","label","_answers$currentQuest2","_answers$currentQuest3","checked","includes","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useLocation } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponse } from \"../../../helpers/QuestionResponse\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { QuestionOption } from \"../../../types/domains/QuestionOption\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\n\nexport const Questionnaire: React.FC = () => {\n  const navigate = useNavigate();\n\n  // const questionnaires = useQuestionnaires();\n  const userId = useUser().userId!;\n  const prevQuestionResponses = useQuestionResponses();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponse[]>([]);\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = location.state?.questionnaire;\n\n  // useEffect(() => {\n  //   const questionId = questionnaire!.questions[currentQuestionIndex].id;\n  //   for (let response of prevQuestionResponses.questionResponses) {\n  //     if (response.questionId === questionId) {\n  //       console.log(\"response\", response);\n  //       switch (response.type) {\n  //         case QuestionCategory.MultipleChoice:\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoice,\n  //               singleOptionId: response.singleOptionId,\n  //               multiOptionIds: null,\n  //               shortAnswer: null,\n  //             },\n  //           ]);\n  //           break;\n  //         case QuestionCategory.MultipleChoiceSelectAll:\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoice,\n  //               singleOptionId: null,\n  //               multiOptionIds: response.multiOptionIds,\n  //               shortAnswer: null,\n  //             },\n  //           ]);\n  //           break;\n  //         case QuestionCategory.ShortAnswer:\n  //           setAnswers((prevAnswers) => [\n  //             ...prevAnswers,\n  //             {\n  //               userId: userId,\n  //               questionId: questionId,\n  //               type: QuestionCategory.MultipleChoice,\n  //               singleOptionId: null,\n  //               multiOptionIds: null,\n  //               shortAnswer: response.shortAnswer,\n  //             },\n  //           ]);\n  //           break;\n  //       }\n  //     }\n  //   }\n  // }, [\n  //   currentQuestionIndex,\n  //   questionnaire,\n  //   userId,\n  //   prevQuestionResponses,\n  //   navigate,\n  // ]);\n\n  const handleAnswerChange = (\n    questionId: number,\n    answerType: QuestionCategory,\n    singleOptionId: number | null,\n    multiOptionId: number | null,\n    shortAnswer: string | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      // Handle multi select questions\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        multiOptionId !== null\n      ) {\n        // Update curr answer if it exists, else create a new answer\n        if (\n          answerIndex > -1 &&\n          prevAnswers[answerIndex].multiOptionIds != null\n        ) {\n          for (let optionId of prevAnswers[answerIndex].multiOptionIds) {\n            // If the option is already selected, remove it from the array of selected options\n            if (optionId === multiOptionId) {\n              prevAnswers[answerIndex].multiOptionIds = prevAnswers[\n                answerIndex\n              ].multiOptionIds.filter(\n                (optionId: number) => optionId !== multiOptionId\n              );\n              return [\n                ...prevAnswers.slice(0, answerIndex),\n                prevAnswers[answerIndex],\n                ...prevAnswers.slice(answerIndex + 1),\n              ];\n            }\n          }\n          // If the option is not already selected, add it to the array of selected options\n          prevAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n\n          // Insert the updated answer into the answer array\n        } else {\n          let updatedMultiOptions: number[] = [];\n          updatedMultiOptions.push(multiOptionId);\n          // Add the new answer to the previous answers\n          return [\n            ...prevAnswers,\n            {\n              userId: userId,\n              questionId: questionId,\n              type: answerType,\n              singleOptionId: null,\n              multiOptionIds: updatedMultiOptions,\n              shortAnswer: null,\n            },\n          ];\n        }\n      }\n\n      // Handle single select questions\n      else if (\n        answerType === QuestionCategory.MultipleChoice &&\n        singleOptionId != null\n      ) {\n        // If the answer already exists, update the singleOption value\n        if (answerIndex > -1) {\n          const updatedAnswer: QuestionResponse = {\n            ...prevAnswers[answerIndex],\n            singleOptionId: singleOptionId,\n          };\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponse = {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      } else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        shortAnswer != null\n      ) {\n        // If the answer already exists, concatenate the new value with the existing one\n        if (answerIndex > -1 && prevAnswers[answerIndex].shortAnswer != null) {\n          prevAnswers[answerIndex].shortAnswer = shortAnswer;\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            prevAnswers[answerIndex],\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          const updatedAnswer: QuestionResponse = {\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer,\n          };\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId])\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    )\n      return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire!.questions.length - 1)\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    else handleSubmit();\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0)\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire!.questions.length) * 100;\n\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers).then(() => {\n      navigate(\"/questionnaire-home\");\n    });\n  };\n  console.log(\"answers\", answers);\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire!.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex]?.singleOptionId || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.MultipleChoice,\n                  Number(e.target.value),\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option: QuestionOption) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.id}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option: QuestionOption) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      answers[currentQuestionIndex]?.multiOptionIds?.includes(\n                        option.id\n                      ) || false\n                    }\n                    onChange={() =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        null,\n                        option.id,\n                        null\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.ShortAnswer,\n                  null,\n                  null,\n                  e.target.value\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire!.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}