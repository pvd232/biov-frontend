{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/context/QuestionResponseContextProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport { APIClient } from \"../helpers/APIC\";\nimport { UserSession } from \"./UserSession\";\nimport { QuestionResponse } from \"../helpers/QuestionResponse\";\nimport { useUser } from \"../hooks/useUser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionResponseContext = /*#__PURE__*/createContext(undefined);\nexport const QuestionResponseContextProvider = ({\n  children\n}) => {\n  _s();\n  var _useUser$userId;\n  const [questionResponses, setQuestionResponses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const userId = (_useUser$userId = useUser().userId) !== null && _useUser$userId !== void 0 ? _useUser$userId : new UserSession().getUserId();\n\n  // Define a function to fetch the question responses (can be reused for refetch)\n  const fetchQuestionResponses = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await APIClient.fetchQuestionResponse(userId);\n      if (!response) {\n        throw new Error(\"Failed to fetch question responses\");\n      }\n      const data = await response.json();\n      const questionResponses = data.map(json => new QuestionResponse(json));\n      setQuestionResponses(questionResponses);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId]);\n\n  // Automatically fetch data on mount\n  useEffect(() => {\n    fetchQuestionResponses();\n  }, [fetchQuestionResponses]);\n  return /*#__PURE__*/_jsxDEV(QuestionResponseContext.Provider, {\n    value: {\n      questionResponses,\n      loading,\n      error,\n      refetch: fetchQuestionResponses\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionResponseContextProvider, \"XYrjhcFoN0XmrAJmnjEfnbDdB8Q=\", false, function () {\n  return [useUser];\n});\n_c = QuestionResponseContextProvider;\nvar _c;\n$RefreshReg$(_c, \"QuestionResponseContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","APIClient","UserSession","QuestionResponse","useUser","jsxDEV","_jsxDEV","QuestionResponseContext","undefined","QuestionResponseContextProvider","children","_s","_useUser$userId","questionResponses","setQuestionResponses","loading","setLoading","error","setError","userId","getUserId","fetchQuestionResponses","response","fetchQuestionResponse","Error","data","json","map","err","message","Provider","value","refetch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/context/QuestionResponseContextProvider.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport { QuestionResponseContextType } from \"../types/context/QuestionResponseContextType\";\nimport { QuestionResponseContextProviderProps } from \"../types/context/QuestionResponseContextProviderProps\";\nimport { APIClient } from \"../helpers/APIC\";\nimport { UserSession } from \"./UserSession\";\nimport { QuestionResponse } from \"../helpers/QuestionResponse\";\nimport { useUser } from \"../hooks/useUser\";\n\nexport const QuestionResponseContext = createContext<\n  QuestionResponseContextType | undefined\n>(undefined);\n\nexport const QuestionResponseContextProvider: React.FC<\n  QuestionResponseContextProviderProps\n> = ({ children }) => {\n  const [questionResponses, setQuestionResponses] = useState<\n    QuestionResponse[]\n  >([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const userId = useUser().userId ?? new UserSession().getUserId()!;\n\n  // Define a function to fetch the question responses (can be reused for refetch)\n  const fetchQuestionResponses = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await APIClient.fetchQuestionResponse(userId);\n      if (!response) {\n        throw new Error(\"Failed to fetch question responses\");\n      }\n      const data = await response.json();\n      const questionResponses = data.map(\n        (json: any) => new QuestionResponse(json)\n      );\n      setQuestionResponses(questionResponses);\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId]);\n\n  // Automatically fetch data on mount\n  useEffect(() => {\n    fetchQuestionResponses();\n  }, [fetchQuestionResponses]);\n\n  return (\n    <QuestionResponseContext.Provider\n      value={{\n        questionResponses,\n        loading,\n        error,\n        refetch: fetchQuestionResponses,\n      }}\n    >\n      {children}\n    </QuestionResponseContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAG9E,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,OAAO,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,OAAO,MAAMC,uBAAuB,gBAAGV,aAAa,CAElDW,SAAS,CAAC;AAEZ,OAAO,MAAMC,+BAEZ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,eAAA;EACpB,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhB,QAAQ,CAExD,EAAE,CAAC;EACL,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMqB,MAAM,IAAAP,eAAA,GAAGR,OAAO,CAAC,CAAC,CAACe,MAAM,cAAAP,eAAA,cAAAA,eAAA,GAAI,IAAIV,WAAW,CAAC,CAAC,CAACkB,SAAS,CAAC,CAAE;;EAEjE;EACA,MAAMC,sBAAsB,GAAGrB,WAAW,CAAC,YAAY;IACrDgB,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMrB,SAAS,CAACsB,qBAAqB,CAACJ,MAAM,CAAC;MAC9D,IAAI,CAACG,QAAQ,EAAE;QACb,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;MACvD;MACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,MAAMb,iBAAiB,GAAGY,IAAI,CAACE,GAAG,CAC/BD,IAAS,IAAK,IAAIvB,gBAAgB,CAACuB,IAAI,CAC1C,CAAC;MACDZ,oBAAoB,CAACD,iBAAiB,CAAC;IACzC,CAAC,CAAC,OAAOe,GAAQ,EAAE;MACjBV,QAAQ,CAACU,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACG,MAAM,CAAC,CAAC;;EAEZ;EACApB,SAAS,CAAC,MAAM;IACdsB,sBAAsB,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACA,sBAAsB,CAAC,CAAC;EAE5B,oBACEf,OAAA,CAACC,uBAAuB,CAACuB,QAAQ;IAC/BC,KAAK,EAAE;MACLlB,iBAAiB;MACjBE,OAAO;MACPE,KAAK;MACLe,OAAO,EAAEX;IACX,CAAE;IAAAX,QAAA,EAEDA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACuB,CAAC;AAEvC,CAAC;AAACzB,EAAA,CAhDWF,+BAEZ;EAAA,QAMgBL,OAAO;AAAA;AAAAiC,EAAA,GARX5B,+BAEZ;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}