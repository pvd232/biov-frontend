{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire-context-provider/QuestionnaireContextProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionnaireContext = /*#__PURE__*/createContext(undefined);\nexport const QuestionnaireContextProvider = ({\n  children\n}) => {\n  _s();\n  const [questionnaires, setQuestionnaires] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        console.log(\"Fetching questionnaires\");\n        const response = await fetch(\"/api/questionnaire_junction\");\n        if (!response.ok) {\n          console.log(response);\n          throw new Error(\"Failed to fetch questionnaires\");\n        }\n        const data = await response.json();\n        // const data = [\n        //   {\n        //     id: 1,\n        //     title: \"Customer Satisfaction Survey\",\n        //     questions: [\n        //       {\n        //         id: 101,\n        //         text: \"How satisfied are you with our service?\",\n        //         options: [\n        //           \"Very satisfied\",\n        //           \"Satisfied\",\n        //           \"Neutral\",\n        //           \"Dissatisfied\",\n        //           \"Very dissatisfied\",\n        //         ],\n        //       },\n        //       {\n        //         id: 102,\n        //         text: \"How would you rate the quality of our products?\",\n        //         options: [\n        //           \"Excellent\",\n        //           \"Good\",\n        //           \"Average\",\n        //           \"Below average\",\n        //           \"Poor\",\n        //         ],\n        //       },\n        //       {\n        //         id: 103,\n        //         text: \"How likely are you to recommend our products to others?\",\n        //         options: [\n        //           \"Very likely\",\n        //           \"Somewhat likely\",\n        //           \"Neutral\",\n        //           \"Somewhat unlikely\",\n        //           \"Very unlikely\",\n        //         ],\n        //       },\n        //     ],\n        //   },\n        //   {\n        //     id: 2,\n        //     title: \"Employee Engagement Survey\",\n        //     questions: [\n        //       {\n        //         id: 201,\n        //         text: \"How meaningful is your work?\",\n        //         options: [\n        //           \"Very meaningful\",\n        //           \"Somewhat meaningful\",\n        //           \"Neutral\",\n        //           \"Not very meaningful\",\n        //           \"Not meaningful at all\",\n        //         ],\n        //       },\n        //       {\n        //         id: 202,\n        //         text: \"How well are you recognized for your contributions?\",\n        //         options: [\n        //           \"Very well\",\n        //           \"Well\",\n        //           \"Moderately\",\n        //           \"Poorly\",\n        //           \"Not at all\",\n        //         ],\n        //       },\n        //     ],\n        //   },\n        //   {\n        //     id: 3,\n        //     title: \"Product Feedback\",\n        //     questions: [\n        //       {\n        //         id: 301,\n        //         text: \"How satisfied are you with our product functionality?\",\n        //         options: [\n        //           \"Very satisfied\",\n        //           \"Satisfied\",\n        //           \"Neutral\",\n        //           \"Dissatisfied\",\n        //           \"Very dissatisfied\",\n        //         ],\n        //       },\n        //       {\n        //         id: 302,\n        //         text: \"How do you rate the usability of our product?\",\n        //         options: [\"Excellent\", \"Good\", \"Average\", \"Poor\", \"Very Poor\"],\n        //       },\n        //     ],\n        //   },\n        // ];\n\n        setQuestionnaires(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(QuestionnaireContext.Provider, {\n    value: {\n      questionnaires,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionnaireContextProvider, \"E3ZCfxmHFdtp3QtJGzaK3wL3mmk=\");\n_c = QuestionnaireContextProvider;\nvar _c;\n$RefreshReg$(_c, \"QuestionnaireContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","QuestionnaireContext","undefined","QuestionnaireContextProvider","children","_s","questionnaires","setQuestionnaires","loading","setLoading","error","setError","fetchData","console","log","response","fetch","ok","Error","data","json","err","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire-context-provider/QuestionnaireContextProvider.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { QuestionnaireType } from \"../types/QuestionnaireType\";\nimport { QuestionnaireContextType } from \"../types/QuestionnaireContextType\";\nimport { QuestionnaireProviderProps } from \"../types/QuestionnaireProviderProps\";\n\nexport const QuestionnaireContext = createContext<\n  QuestionnaireContextType | undefined\n>(undefined);\n\nexport const QuestionnaireContextProvider: React.FC<\n  QuestionnaireProviderProps\n> = ({ children }) => {\n  const [questionnaires, setQuestionnaires] = useState<QuestionnaireType[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        console.log(\"Fetching questionnaires\");\n        const response = await fetch(\"/api/questionnaire_junction\");\n        if (!response.ok) {\n          console.log(response);\n          throw new Error(\"Failed to fetch questionnaires\");\n        }\n        const data = await response.json();\n        // const data = [\n        //   {\n        //     id: 1,\n        //     title: \"Customer Satisfaction Survey\",\n        //     questions: [\n        //       {\n        //         id: 101,\n        //         text: \"How satisfied are you with our service?\",\n        //         options: [\n        //           \"Very satisfied\",\n        //           \"Satisfied\",\n        //           \"Neutral\",\n        //           \"Dissatisfied\",\n        //           \"Very dissatisfied\",\n        //         ],\n        //       },\n        //       {\n        //         id: 102,\n        //         text: \"How would you rate the quality of our products?\",\n        //         options: [\n        //           \"Excellent\",\n        //           \"Good\",\n        //           \"Average\",\n        //           \"Below average\",\n        //           \"Poor\",\n        //         ],\n        //       },\n        //       {\n        //         id: 103,\n        //         text: \"How likely are you to recommend our products to others?\",\n        //         options: [\n        //           \"Very likely\",\n        //           \"Somewhat likely\",\n        //           \"Neutral\",\n        //           \"Somewhat unlikely\",\n        //           \"Very unlikely\",\n        //         ],\n        //       },\n        //     ],\n        //   },\n        //   {\n        //     id: 2,\n        //     title: \"Employee Engagement Survey\",\n        //     questions: [\n        //       {\n        //         id: 201,\n        //         text: \"How meaningful is your work?\",\n        //         options: [\n        //           \"Very meaningful\",\n        //           \"Somewhat meaningful\",\n        //           \"Neutral\",\n        //           \"Not very meaningful\",\n        //           \"Not meaningful at all\",\n        //         ],\n        //       },\n        //       {\n        //         id: 202,\n        //         text: \"How well are you recognized for your contributions?\",\n        //         options: [\n        //           \"Very well\",\n        //           \"Well\",\n        //           \"Moderately\",\n        //           \"Poorly\",\n        //           \"Not at all\",\n        //         ],\n        //       },\n        //     ],\n        //   },\n        //   {\n        //     id: 3,\n        //     title: \"Product Feedback\",\n        //     questions: [\n        //       {\n        //         id: 301,\n        //         text: \"How satisfied are you with our product functionality?\",\n        //         options: [\n        //           \"Very satisfied\",\n        //           \"Satisfied\",\n        //           \"Neutral\",\n        //           \"Dissatisfied\",\n        //           \"Very dissatisfied\",\n        //         ],\n        //       },\n        //       {\n        //         id: 302,\n        //         text: \"How do you rate the usability of our product?\",\n        //         options: [\"Excellent\", \"Good\", \"Average\", \"Poor\", \"Very Poor\"],\n        //       },\n        //     ],\n        //   },\n        // ];\n\n        setQuestionnaires(data);\n      } catch (err: any) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <QuestionnaireContext.Provider value={{ questionnaires, loading, error }}>\n      {children}\n    </QuestionnaireContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKlE,OAAO,MAAMC,oBAAoB,gBAAGL,aAAa,CAE/CM,SAAS,CAAC;AAEZ,OAAO,MAAMC,4BAEZ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAsB,EAAE,CAAC;EAC7E,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,eAAec,SAASA,CAAA,EAAG;MACzB,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;QAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChBJ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;UACrB,MAAM,IAAIG,KAAK,CAAC,gCAAgC,CAAC;QACnD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEAb,iBAAiB,CAACY,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOE,GAAQ,EAAE;QACjBV,QAAQ,CAACU,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRb,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;IAEAG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA,CAACC,oBAAoB,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAElB,cAAc;MAAEE,OAAO;MAAEE;IAAM,CAAE;IAAAN,QAAA,EACtEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACoB,CAAC;AAEpC,CAAC;AAACvB,EAAA,CA7HWF,4BAEZ;AAAA0B,EAAA,GAFY1B,4BAEZ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}