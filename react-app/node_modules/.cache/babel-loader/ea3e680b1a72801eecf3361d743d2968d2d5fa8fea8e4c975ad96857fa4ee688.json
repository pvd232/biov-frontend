{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-front/src/components/pages/questionnaire-selection-container/QuestionnaireSelectionContainer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { CircularProgress, Container } from \"@mui/material\";\nimport QuestionnaireSelection from \"../questionnaire-selection/QuestionnaireSelection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questionnaireData = [{\n  id: 1,\n  title: \"Customer Satisfaction Survey\",\n  link: \"/questionnaires/1\",\n  questions: [{\n    id: 1,\n    text: \"How satisfied are you with our service?\",\n    options: [\"Very satisfied\", \"Satisfied\", \"Neutral\", \"Dissatisfied\", \"Very dissatisfied\"]\n  }, {\n    id: 2,\n    text: \"How likely are you to recommend us to others?\",\n    options: [\"Very likely\", \"Likely\", \"Neutral\", \"Unlikely\", \"Very unlikely\"]\n  }\n  // Add more questions as needed\n  ]\n}, {\n  id: 2,\n  title: \"Product Feedback\",\n  link: \"/questionnaires/2\",\n  questions: [{\n    id: 1,\n    text: \"How satisfied are you with our product?\",\n    options: [\"Very satisfied\", \"Satisfied\", \"Neutral\", \"Dissatisfied\", \"Very dissatisfied\"]\n  }, {\n    id: 2,\n    text: \"How likely are you to recommend us to others?\",\n    options: [\"Very likely\", \"Likely\", \"Neutral\", \"Unlikely\", \"Very unlikely\"]\n  }\n  // Add more questions as needed\n  ]\n}, {\n  id: 3,\n  title: \"Employee Engagement Survey\",\n  link: \"/questionnaires/3\",\n  questions: [{\n    id: 1,\n    text: \"How satisfied are you with our engagement?\",\n    options: [\"Very satisfied\", \"Satisfied\", \"Neutral\", \"Dissatisfied\", \"Very dissatisfied\"]\n  }, {\n    id: 2,\n    text: \"How likely are you to recommend us to others?\",\n    options: [\"Very likely\", \"Likely\", \"Neutral\", \"Unlikely\", \"Very unlikely\"]\n  }\n  // Add more questions as needed\n  ]\n}];\nconst QuestionnaireSelectionContainer = () => {\n  _s();\n  const [questionnaires, setQuestionnaires] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Replace with your API endpoint\n        // const response = await fetch(\"/api/questionnaires\");\n\n        // if (!response.ok) {\n        //   throw new Error(\"Failed to fetch questionnaires\");\n        // }\n        // const data = await response.json();\n\n        setQuestionnaires(questionnaireData);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questionnaires...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(QuestionnaireSelection, {\n      questionnaires: questionnaires\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionnaireSelectionContainer, \"E3ZCfxmHFdtp3QtJGzaK3wL3mmk=\");\n_c = QuestionnaireSelectionContainer;\nexport default QuestionnaireSelectionContainer;\nvar _c;\n$RefreshReg$(_c, \"QuestionnaireSelectionContainer\");","map":{"version":3,"names":["React","useState","useEffect","CircularProgress","Container","QuestionnaireSelection","jsxDEV","_jsxDEV","questionnaireData","id","title","link","questions","text","options","QuestionnaireSelectionContainer","_s","questionnaires","setQuestionnaires","loading","setLoading","error","setError","fetchData","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-front/src/components/pages/questionnaire-selection-container/QuestionnaireSelectionContainer.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { CircularProgress, Container } from \"@mui/material\";\nimport QuestionnaireSelection from \"../questionnaire-selection/QuestionnaireSelection\";\n\ninterface Question {\n  id: number;\n  text: string;\n  options: string[];\n}\n\ninterface Questionnaire {\n  id: number;\n  title: string;\n  link: string;\n  questions?: Question[];\n}\nconst questionnaireData: Questionnaire[] = [\n  {\n    id: 1,\n    title: \"Customer Satisfaction Survey\",\n    link: \"/questionnaires/1\",\n    questions: [\n      {\n        id: 1,\n        text: \"How satisfied are you with our service?\",\n        options: [\n          \"Very satisfied\",\n          \"Satisfied\",\n          \"Neutral\",\n          \"Dissatisfied\",\n          \"Very dissatisfied\",\n        ],\n      },\n      {\n        id: 2,\n        text: \"How likely are you to recommend us to others?\",\n        options: [\n          \"Very likely\",\n          \"Likely\",\n          \"Neutral\",\n          \"Unlikely\",\n          \"Very unlikely\",\n        ],\n      },\n      // Add more questions as needed\n    ],\n  },\n  {\n    id: 2,\n    title: \"Product Feedback\",\n    link: \"/questionnaires/2\",\n    questions: [\n      {\n        id: 1,\n        text: \"How satisfied are you with our product?\",\n        options: [\n          \"Very satisfied\",\n          \"Satisfied\",\n          \"Neutral\",\n          \"Dissatisfied\",\n          \"Very dissatisfied\",\n        ],\n      },\n      {\n        id: 2,\n        text: \"How likely are you to recommend us to others?\",\n        options: [\n          \"Very likely\",\n          \"Likely\",\n          \"Neutral\",\n          \"Unlikely\",\n          \"Very unlikely\",\n        ],\n      },\n      // Add more questions as needed\n    ],\n  },\n  {\n    id: 3,\n    title: \"Employee Engagement Survey\",\n    link: \"/questionnaires/3\",\n    questions: [\n      {\n        id: 1,\n        text: \"How satisfied are you with our engagement?\",\n        options: [\n          \"Very satisfied\",\n          \"Satisfied\",\n          \"Neutral\",\n          \"Dissatisfied\",\n          \"Very dissatisfied\",\n        ],\n      },\n      {\n        id: 2,\n        text: \"How likely are you to recommend us to others?\",\n        options: [\n          \"Very likely\",\n          \"Likely\",\n          \"Neutral\",\n          \"Unlikely\",\n          \"Very unlikely\",\n        ],\n      },\n      // Add more questions as needed\n    ],\n  },\n];\nconst QuestionnaireSelectionContainer: React.FC = () => {\n  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Replace with your API endpoint\n        // const response = await fetch(\"/api/questionnaires\");\n\n        // if (!response.ok) {\n        //   throw new Error(\"Failed to fetch questionnaires\");\n        // }\n        // const data = await response.json();\n\n        setQuestionnaires(questionnaireData);\n      } catch (err: any) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return (\n      <Container>\n        <CircularProgress />\n        <p>Loading questionnaires...</p>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container>\n        <p>Error: {error}</p>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <QuestionnaireSelection questionnaires={questionnaires} />\n    </Container>\n  );\n};\n\nexport default QuestionnaireSelectionContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}