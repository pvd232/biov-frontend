{"ast":null,"code":"export const incrementOrbPosition = (newX, oldX, newY, oldY, newScale, oldScale, xDelta, yDelta, scaleDelta) => {\n  let updatedXPosition = oldX;\n  let updatedYPosition = oldY;\n  let updatedScale = oldScale;\n  if (Math.abs(newX - oldX) > xDelta) {\n    if (newX > oldX) {\n      updatedXPosition += xDelta;\n    } else {\n      updatedXPosition -= xDelta;\n    }\n  } else {\n    updatedXPosition = newX;\n  }\n  if (Math.abs(newY - oldY) > yDelta) {\n    if (newY > oldY) {\n      updatedYPosition += yDelta;\n    } else {\n      updatedYPosition -= yDelta;\n    }\n  } else {\n    updatedYPosition = newY;\n  }\n  if (Math.abs(newScale - oldScale) > scaleDelta) {\n    if (newScale > oldScale) {\n      updatedScale += scaleDelta;\n    } else {\n      updatedScale -= scaleDelta;\n    }\n  } else {\n    updatedScale = newScale;\n  }\n  return {\n    xPosition: updatedXPosition,\n    yPosition: updatedYPosition,\n    scale: updatedScale\n  };\n};","map":{"version":3,"names":["incrementOrbPosition","newX","oldX","newY","oldY","newScale","oldScale","xDelta","yDelta","scaleDelta","updatedXPosition","updatedYPosition","updatedScale","Math","abs","xPosition","yPosition","scale"],"sources":["/Users/machina/Developer/biov-front/src/components/pages/splash/landing_page/helpers/incrementOrbPosition.ts"],"sourcesContent":["import OrbPosition from '../types/OrbPosition';\n\nexport const incrementOrbPosition = (\n  newX: number,\n  oldX: number,\n  newY: number,\n  oldY: number,\n  newScale: number,\n  oldScale: number,\n  xDelta: number,\n  yDelta: number,\n  scaleDelta: number\n): OrbPosition => {\n  let updatedXPosition = oldX;\n  let updatedYPosition = oldY;\n  let updatedScale = oldScale;\n  if (Math.abs(newX - oldX) > xDelta) {\n    if (newX > oldX) {\n      updatedXPosition += xDelta;\n    } else {\n      updatedXPosition -= xDelta;\n    }\n  } else {\n    updatedXPosition = newX;\n  }\n  if (Math.abs(newY - oldY) > yDelta) {\n    if (newY > oldY) {\n      updatedYPosition += yDelta;\n    } else {\n      updatedYPosition -= yDelta;\n    }\n  } else {\n    updatedYPosition = newY;\n  }\n  if (Math.abs(newScale - oldScale) > scaleDelta) {\n    if (newScale > oldScale) {\n      updatedScale += scaleDelta;\n    } else {\n      updatedScale -= scaleDelta;\n    }\n  } else {\n    updatedScale = newScale;\n  }\n  return {\n    xPosition: updatedXPosition,\n    yPosition: updatedYPosition,\n    scale: updatedScale,\n  };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,oBAAoB,GAAGA,CAClCC,IAAY,EACZC,IAAY,EACZC,IAAY,EACZC,IAAY,EACZC,QAAgB,EAChBC,QAAgB,EAChBC,MAAc,EACdC,MAAc,EACdC,UAAkB,KACF;EAChB,IAAIC,gBAAgB,GAAGR,IAAI;EAC3B,IAAIS,gBAAgB,GAAGP,IAAI;EAC3B,IAAIQ,YAAY,GAAGN,QAAQ;EAC3B,IAAIO,IAAI,CAACC,GAAG,CAACb,IAAI,GAAGC,IAAI,CAAC,GAAGK,MAAM,EAAE;IAClC,IAAIN,IAAI,GAAGC,IAAI,EAAE;MACfQ,gBAAgB,IAAIH,MAAM;IAC5B,CAAC,MAAM;MACLG,gBAAgB,IAAIH,MAAM;IAC5B;EACF,CAAC,MAAM;IACLG,gBAAgB,GAAGT,IAAI;EACzB;EACA,IAAIY,IAAI,CAACC,GAAG,CAACX,IAAI,GAAGC,IAAI,CAAC,GAAGI,MAAM,EAAE;IAClC,IAAIL,IAAI,GAAGC,IAAI,EAAE;MACfO,gBAAgB,IAAIH,MAAM;IAC5B,CAAC,MAAM;MACLG,gBAAgB,IAAIH,MAAM;IAC5B;EACF,CAAC,MAAM;IACLG,gBAAgB,GAAGR,IAAI;EACzB;EACA,IAAIU,IAAI,CAACC,GAAG,CAACT,QAAQ,GAAGC,QAAQ,CAAC,GAAGG,UAAU,EAAE;IAC9C,IAAIJ,QAAQ,GAAGC,QAAQ,EAAE;MACvBM,YAAY,IAAIH,UAAU;IAC5B,CAAC,MAAM;MACLG,YAAY,IAAIH,UAAU;IAC5B;EACF,CAAC,MAAM;IACLG,YAAY,GAAGP,QAAQ;EACzB;EACA,OAAO;IACLU,SAAS,EAAEL,gBAAgB;IAC3BM,SAAS,EAAEL,gBAAgB;IAC3BM,KAAK,EAAEL;EACT,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}