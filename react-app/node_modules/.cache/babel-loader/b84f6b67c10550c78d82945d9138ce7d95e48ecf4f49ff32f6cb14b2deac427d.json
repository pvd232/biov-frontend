{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Typography, Checkbox, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useLocation } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _location$state, _answers$currentQuest, _answers$currentQuest2, _currentQuestion$opti, _currentQuestion$opti2, _answers$currentQuest5;\n  const navigate = useNavigate();\n  const userId = useUser().userId;\n  const prevQuestionResponses = useQuestionResponses();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.questionnaire;\n  useEffect(() => {\n    const questionId = questionnaire.questions[currentQuestionIndex].id;\n    console.log(\"prevQuestionResponses\", prevQuestionResponses.questionResponses);\n    for (let response of prevQuestionResponses.questionResponses) {\n      if (response.questionId === questionId) {\n        switch (response.type) {\n          case QuestionCategory.MultipleChoice:\n            setAnswers(prevAnswers => [...prevAnswers, {\n              userId: userId,\n              questionId: questionId,\n              type: QuestionCategory.MultipleChoice,\n              singleOptionId: response.singleOptionId,\n              multiOptionIds: null,\n              shortAnswer: null\n            }]);\n            break;\n          case QuestionCategory.MultipleChoiceSelectAll:\n            setAnswers(prevAnswers => [...prevAnswers, {\n              userId: userId,\n              questionId: questionId,\n              type: QuestionCategory.MultipleChoiceSelectAll,\n              singleOptionId: null,\n              multiOptionIds: response.multiOptionIds,\n              shortAnswer: null\n            }]);\n            break;\n          case QuestionCategory.ShortAnswer:\n            console.log(\"shortAnswer 1\", response.shortAnswer);\n            setAnswers(prevAnswers => [...prevAnswers, {\n              userId: userId,\n              questionId: questionId,\n              type: QuestionCategory.ShortAnswer,\n              singleOptionId: null,\n              multiOptionIds: null,\n              shortAnswer: response.shortAnswer\n            }]);\n            break;\n        }\n      }\n    }\n  }, [currentQuestionIndex,\n  // questionnaire,\n  // userId,\n  prevQuestionResponses\n  // navigate,\n  ]);\n  const handleAnswerChange = (questionId, answerType, singleOptionId, multiOptionId, shortAnswer) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n\n      // Clone the answers to avoid mutating state directly, will return empty array if there are no answers\n      const updatedAnswers = [...prevAnswers];\n\n      // Handle multi select questions\n      if (answerType === QuestionCategory.MultipleChoiceSelectAll && multiOptionId !== null) {\n        if (answerIndex > -1 && updatedAnswers[answerIndex].multiOptionIds) {\n          // Check if option is already selected\n          const optionIndex = updatedAnswers[answerIndex].multiOptionIds.indexOf(multiOptionId);\n          if (optionIndex > -1) {\n            // Remove the option if it's already selected\n            updatedAnswers[answerIndex].multiOptionIds = updatedAnswers[answerIndex].multiOptionIds.filter(id => id !== multiOptionId);\n          } else {\n            // Add the option if it's not already selected\n            updatedAnswers[answerIndex].multiOptionIds.push(multiOptionId);\n          }\n        } else {\n          // If the answer doesn't exist, create it with the selected option\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: [multiOptionId],\n            shortAnswer: null\n          });\n        }\n      }\n\n      // Handle single select questions\n      else if (answerType === QuestionCategory.MultipleChoice && singleOptionId != null) {\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].singleOptionId = singleOptionId;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null\n          });\n        }\n      }\n\n      // Handle short answer questions\n      else if (answerType === QuestionCategory.ShortAnswer && shortAnswer != null) {\n        console.log(\"shortAnswer 2\", shortAnswer);\n        const testa = updatedAnswers[answerIndex].shortAnswer;\n        console.log(\"testa\", testa);\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].shortAnswer = shortAnswer;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer\n          });\n        }\n      }\n      console.log(\"updatedAnswers\", updatedAnswers);\n      return updatedAnswers;\n    });\n    // Reset error if there was one\n    if (errors[questionId]) setErrors(prevErrors => ({\n      ...prevErrors,\n      [questionId]: \"\"\n    }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.type === QuestionCategory.ShortAnswer && (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) setCurrentQuestionIndex(currentQuestionIndex + 1);else handleSubmit();\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers).then(() => {\n      navigate(\"/questionnaire-home\");\n    });\n  };\n  const test = (_answers$currentQuest = answers[currentQuestionIndex]) === null || _answers$currentQuest === void 0 ? void 0 : _answers$currentQuest.shortAnswer;\n  console.log(\"test\", test);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === QuestionCategory.MultipleChoice ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: ((_answers$currentQuest2 = answers[currentQuestionIndex]) === null || _answers$currentQuest2 === void 0 ? void 0 : _answers$currentQuest2.singleOptionId) || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoice, Number(e.target.value), null, null),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.id,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this) : currentQuestion.type === QuestionCategory.MultipleChoiceSelectAll ? (_currentQuestion$opti2 = currentQuestion.options) === null || _currentQuestion$opti2 === void 0 ? void 0 : _currentQuestion$opti2.map(option => {\n          var _answers$currentQuest3, _answers$currentQuest4;\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: ((_answers$currentQuest3 = answers[currentQuestionIndex]) === null || _answers$currentQuest3 === void 0 ? void 0 : (_answers$currentQuest4 = _answers$currentQuest3.multiOptionIds) === null || _answers$currentQuest4 === void 0 ? void 0 : _answers$currentQuest4.includes(option.id)) || false,\n              onChange: () => handleAnswerChange(currentQuestion.id, QuestionCategory.MultipleChoiceSelectAll, null, option.id, null)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 19\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: ((_answers$currentQuest5 = answers[currentQuestionIndex]) === null || _answers$currentQuest5 === void 0 ? void 0 : _answers$currentQuest5.shortAnswer) || \"\",\n          onChange: e => {\n            handleAnswerChange(currentQuestion.id, QuestionCategory.ShortAnswer, null, null, e.target.value);\n          },\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"feZOVrDcHoywT9bSBXDS7o3G6qI=\", false, function () {\n  return [useNavigate, useUser, useQuestionResponses, useLocation];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useEffect","useState","Container","Typography","Checkbox","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useLocation","QuestionCategory","APIClient","useUser","useNavigate","useQuestionResponses","jsxDEV","_jsxDEV","Questionnaire","_s","_location$state","_answers$currentQuest","_answers$currentQuest2","_currentQuestion$opti","_currentQuestion$opti2","_answers$currentQuest5","navigate","userId","prevQuestionResponses","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","location","questionnaire","state","questionId","questions","id","console","log","questionResponses","response","type","MultipleChoice","prevAnswers","singleOptionId","multiOptionIds","shortAnswer","MultipleChoiceSelectAll","ShortAnswer","handleAnswerChange","answerType","multiOptionId","answerIndex","findIndex","answer","updatedAnswers","optionIndex","indexOf","filter","push","testa","prevErrors","validateAnswer","trim","length","handleNext","currentQuestion","handleSubmit","handlePrevious","progress","postQuestionResponse","then","test","children","variant","name","fileName","_jsxFileName","lineNumber","columnNumber","mt","sx","marginBottom","text","value","onChange","e","Number","target","options","map","option","control","label","_answers$currentQuest3","_answers$currentQuest4","checked","includes","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useLocation } from \"react-router-dom\";\nimport { QuestionCategory } from \"../../../types/enums/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponse } from \"../../../helpers/QuestionResponse\";\nimport { useUser } from \"../../../context/UserContextProvider\";\nimport { QuestionOption } from \"../../../types/domains/QuestionOption\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuestionResponses } from \"../../../hooks/useQuestionResponses\";\n\nexport const Questionnaire: React.FC = () => {\n  const navigate = useNavigate();\n\n  const userId = useUser().userId!;\n  const prevQuestionResponses = useQuestionResponses();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponse[]>([]);\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const location = useLocation();\n  const questionnaire = location.state?.questionnaire;\n\n  useEffect(() => {\n    const questionId = questionnaire!.questions[currentQuestionIndex].id;\n    console.log(\n      \"prevQuestionResponses\",\n      prevQuestionResponses.questionResponses\n    );\n    for (let response of prevQuestionResponses.questionResponses) {\n      if (response.questionId === questionId) {\n        switch (response.type) {\n          case QuestionCategory.MultipleChoice:\n            setAnswers((prevAnswers) => [\n              ...prevAnswers,\n              {\n                userId: userId,\n                questionId: questionId,\n                type: QuestionCategory.MultipleChoice,\n                singleOptionId: response.singleOptionId,\n                multiOptionIds: null,\n                shortAnswer: null,\n              },\n            ]);\n            break;\n          case QuestionCategory.MultipleChoiceSelectAll:\n            setAnswers((prevAnswers) => [\n              ...prevAnswers,\n              {\n                userId: userId,\n                questionId: questionId,\n                type: QuestionCategory.MultipleChoiceSelectAll,\n                singleOptionId: null,\n                multiOptionIds: response.multiOptionIds,\n                shortAnswer: null,\n              },\n            ]);\n            break;\n          case QuestionCategory.ShortAnswer:\n            console.log(\"shortAnswer 1\", response.shortAnswer);\n            setAnswers((prevAnswers) => [\n              ...prevAnswers,\n              {\n                userId: userId,\n                questionId: questionId,\n                type: QuestionCategory.ShortAnswer,\n                singleOptionId: null,\n                multiOptionIds: null,\n                shortAnswer: response.shortAnswer,\n              },\n            ]);\n            break;\n        }\n      }\n    }\n  }, [\n    currentQuestionIndex,\n    // questionnaire,\n    // userId,\n    prevQuestionResponses,\n    // navigate,\n  ]);\n\n  const handleAnswerChange = (\n    questionId: number,\n    answerType: QuestionCategory,\n    singleOptionId: number | null,\n    multiOptionId: number | null,\n    shortAnswer: string | null\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      // Clone the answers to avoid mutating state directly, will return empty array if there are no answers\n      const updatedAnswers: QuestionResponse[] = [...prevAnswers];\n\n      // Handle multi select questions\n      if (\n        answerType === QuestionCategory.MultipleChoiceSelectAll &&\n        multiOptionId !== null\n      ) {\n        if (answerIndex > -1 && updatedAnswers[answerIndex].multiOptionIds) {\n          // Check if option is already selected\n          const optionIndex =\n            updatedAnswers[answerIndex].multiOptionIds!.indexOf(multiOptionId);\n\n          if (optionIndex > -1) {\n            // Remove the option if it's already selected\n            updatedAnswers[answerIndex].multiOptionIds = updatedAnswers[\n              answerIndex\n            ].multiOptionIds!.filter((id) => id !== multiOptionId);\n          } else {\n            // Add the option if it's not already selected\n            updatedAnswers[answerIndex].multiOptionIds!.push(multiOptionId);\n          }\n        } else {\n          // If the answer doesn't exist, create it with the selected option\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: [multiOptionId],\n            shortAnswer: null,\n          });\n        }\n      }\n\n      // Handle single select questions\n      else if (\n        answerType === QuestionCategory.MultipleChoice &&\n        singleOptionId != null\n      ) {\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].singleOptionId = singleOptionId;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: singleOptionId,\n            multiOptionIds: null,\n            shortAnswer: null,\n          });\n        }\n      }\n\n      // Handle short answer questions\n      else if (\n        answerType === QuestionCategory.ShortAnswer &&\n        shortAnswer != null\n      ) {\n        console.log(\"shortAnswer 2\", shortAnswer);\n        const testa = updatedAnswers[answerIndex].shortAnswer;\n        console.log(\"testa\", testa);\n        if (answerIndex > -1) {\n          updatedAnswers[answerIndex].shortAnswer = shortAnswer;\n        } else {\n          updatedAnswers.push({\n            userId: userId,\n            questionId: questionId,\n            type: answerType,\n            singleOptionId: null,\n            multiOptionIds: null,\n            shortAnswer: shortAnswer,\n          });\n        }\n      }\n      console.log(\"updatedAnswers\", updatedAnswers);\n      return updatedAnswers;\n    });\n    // Reset error if there was one\n    if (errors[questionId])\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n  };\n\n  // No empty answers or white space only answers\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (\n      answer.type === QuestionCategory.ShortAnswer &&\n      (answer.shortAnswer === null || answer.shortAnswer.trim().length === 0)\n    ) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    )\n      return; // Prevent moving to the next question if validation fails\n\n    if (currentQuestionIndex < questionnaire!.questions.length - 1)\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    else handleSubmit();\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0)\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const currentQuestion = questionnaire!.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire!.questions.length) * 100;\n\n  const handleSubmit = () => {\n    APIClient.postQuestionResponse(answers).then(() => {\n      navigate(\"/questionnaire-home\");\n    });\n  };\n  const test = answers[currentQuestionIndex]?.shortAnswer;\n  console.log(\"test\", test);\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire!.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        <Box mt={2}>\n          {currentQuestion.type === QuestionCategory.MultipleChoice ? (\n            <RadioGroup\n              value={answers[currentQuestionIndex]?.singleOptionId || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.MultipleChoice,\n                  Number(e.target.value),\n                  null,\n                  null\n                )\n              }\n            >\n              {currentQuestion.options?.map((option: QuestionOption) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.id}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : currentQuestion.type ===\n            QuestionCategory.MultipleChoiceSelectAll ? (\n            currentQuestion.options?.map((option: QuestionOption) => (\n              <FormControlLabel\n                key={option.id}\n                control={\n                  <Checkbox\n                    checked={\n                      answers[currentQuestionIndex]?.multiOptionIds?.includes(\n                        option.id\n                      ) || false\n                    }\n                    onChange={() =>\n                      handleAnswerChange(\n                        currentQuestion.id,\n                        QuestionCategory.MultipleChoiceSelectAll,\n                        null,\n                        option.id,\n                        null\n                      )\n                    }\n                  />\n                }\n                label={option.text}\n              />\n            ))\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestionIndex]?.shortAnswer || \"\"}\n              onChange={(e) => {\n                handleAnswerChange(\n                  currentQuestion.id,\n                  QuestionCategory.ShortAnswer,\n                  null,\n                  null,\n                  e.target.value\n                );\n              }}\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire!.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}