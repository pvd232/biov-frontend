{"ast":null,"code":"var _jsxFileName = \"/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Typography, RadioGroup, Radio, FormControlLabel, Button, LinearProgress, Box, TextField } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { useUser } from \"../../../types/UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Questionnaire = () => {\n  _s();\n  var _currentQuestion$opti;\n  const user = useUser().user;\n  const {\n    id\n  } = useParams();\n  const questionnaires = useQuestionnaires();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(q => q.id === Number(id));\n  console.log(\"questionnaire\", questionnaire);\n  if (!questionnaire) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Questionnaire not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  const handleAnswerChange = (questionId, value, answerType, isChecked) => {\n    setAnswers(prevAnswers => {\n      const answerIndex = prevAnswers.findIndex(answer => answer.questionId === questionId);\n      if (typeof value === \"number\" && typeof isChecked === \"boolean\") {\n        // Handle multiple-choice (checkbox)\n        let updatedOptionIds = [];\n        if (answerIndex > -1) {\n          const existingAnswer = prevAnswers[answerIndex];\n          const currentOptionIds = existingAnswer.optionIds || [];\n          updatedOptionIds = isChecked ? [...currentOptionIds, value] : currentOptionIds.filter(id => id !== value);\n          const updatedAnswer = {\n            ...existingAnswer,\n            optionIds: updatedOptionIds\n          };\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          return [...prevAnswers, {\n            questionId,\n            shortAnswer: \"\",\n            optionIds: [value]\n          }];\n        }\n      } else if (typeof value === \"string\") {\n        var _user$id, _prevAnswers$answerIn;\n        // Handle short-response\n        const updatedAnswer = {\n          userId: (_user$id = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id !== void 0 ? _user$id : \"\",\n          // Replace with actual user ID\n          questionId: questionId,\n          shortAnswer: value,\n          optionIds: ((_prevAnswers$answerIn = prevAnswers[answerIndex]) === null || _prevAnswers$answerIn === void 0 ? void 0 : _prevAnswers$answerIn.optionIds) || []\n        };\n        if (answerIndex > -1) {\n          return [...prevAnswers.slice(0, answerIndex), updatedAnswer, ...prevAnswers.slice(answerIndex + 1)];\n        } else {\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"\"\n      }));\n    }\n  };\n  const validateAnswer = questionId => {\n    const answer = answers[questionId] || \"\";\n    if (answer.answer.trim().length === 0) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        [questionId]: \"This field cannot be empty nor can it be just whitespace.\"\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = () => {\n    return Object.keys(answers).map(questionId => {\n      var _user$id2, _question$options, _question$options$fin;\n      const question = questionnaire.questions.find(q => q.id === Number(questionId));\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n      const response = {\n        userId: (_user$id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user$id2 !== void 0 ? _user$id2 : \"\",\n        // Replace with actual user ID\n        questionId: question.id,\n        optionIds: question.type === \"mcq\" ? ((_question$options = question.options) === null || _question$options === void 0 ? void 0 : (_question$options$fin = _question$options.find(option => option.text === answers[question.id])) === null || _question$options$fin === void 0 ? void 0 : _question$options$fin.id) || 0 : 0,\n        // Set optionId for multiple choice questions\n        response: answers[question.id]\n      };\n      return response;\n    });\n  };\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (currentQuestion.type === QuestionCategory.ShortAnswer && !validateAnswer(currentQuestion.id)) {\n      return; // Prevent moving to the next question if validation fails\n    }\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress = (currentQuestionIndex + 1) / questionnaire.questions.length * 100;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Questionnaire: \", questionnaire.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: \"1vh\"\n        },\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: currentQuestion.type === \"mcq\" ? /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[currentQuestion.id] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, e.target.value),\n          children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option.text,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 28\n            }, this),\n            label: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          fullWidth: true,\n          value: answers[currentQuestion.id] || \"\",\n          onChange: e => handleAnswerChange(currentQuestion.id, e.target.value),\n          error: !!errors[currentQuestion.id],\n          helperText: errors[currentQuestion.id],\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handlePrevious,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 4,\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: `Progress: ${currentQuestionIndex + 1}/${questionnaire.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(Questionnaire, \"gREewYr41+kU2wZV4lpa9tvoqWQ=\", false, function () {\n  return [useUser, useParams, useQuestionnaires];\n});\n_c = Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","Container","Typography","RadioGroup","Radio","FormControlLabel","Button","LinearProgress","Box","TextField","useParams","useQuestionnaires","QuestionCategory","APIClient","useUser","jsxDEV","_jsxDEV","Questionnaire","_s","_currentQuestion$opti","user","id","questionnaires","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","errors","setErrors","questionnaire","find","q","Number","console","log","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","handleAnswerChange","questionId","value","answerType","isChecked","prevAnswers","answerIndex","findIndex","answer","updatedOptionIds","existingAnswer","currentOptionIds","optionIds","filter","updatedAnswer","slice","shortAnswer","_user$id","_prevAnswers$answerIn","userId","prevErrors","validateAnswer","trim","length","formatAnswersAsQuestionResponse","Object","keys","map","_user$id2","_question$options","_question$options$fin","question","questions","Error","response","type","options","option","text","handleSubmit","formattedAnswers","postQuestionResponse","handleNext","currentQuestion","ShortAnswer","handlePrevious","progress","name","mt","sx","marginBottom","onChange","e","target","control","label","fullWidth","error","helperText","required","display","justifyContent","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/machina/Developer/biov-frontend/src/pages/questionnaire-dashboard/questionnaire/Questionnaire.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Typography,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n  LinearProgress,\n  Box,\n  TextField,\n} from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuestionnaires } from \"../hooks/useQuestionnaires\";\nimport QuestionCategory from \"../types/QuestionCategory\";\nimport { APIClient } from \"../../../helpers/APIC\";\nimport { QuestionResponseType } from \"../types/QuestionResponseType\";\nimport { useUser } from \"../../../types/UserContextProvider\";\n\nexport const Questionnaire: React.FC = () => {\n  const user = useUser().user;\n  const { id } = useParams<{ id: string }>();\n  const questionnaires = useQuestionnaires();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<QuestionResponseType[]>([]);\n\n  const [errors, setErrors] = useState<Record<number, string>>({});\n\n  // Find the questionnaire using the ID from the URL after ensuring hooks are defined\n  const questionnaire = questionnaires.questionnaires.find(\n    (q) => q.id === Number(id)\n  );\n  console.log(\"questionnaire\", questionnaire);\n  if (!questionnaire) {\n    return (\n      <Container>\n        <Typography variant=\"h6\">Questionnaire not found</Typography>\n      </Container>\n    );\n  }\n\n  const handleAnswerChange = (\n    questionId: number,\n    value: number | string,\n    answerType: QuestionCategory,\n    isChecked?: boolean\n  ) => {\n    setAnswers((prevAnswers) => {\n      const answerIndex = prevAnswers.findIndex(\n        (answer) => answer.questionId === questionId\n      );\n\n      if (typeof value === \"number\" && typeof isChecked === \"boolean\") {\n        // Handle multiple-choice (checkbox)\n        let updatedOptionIds = [];\n\n        if (answerIndex > -1) {\n          const existingAnswer = prevAnswers[answerIndex];\n          const currentOptionIds = existingAnswer.optionIds || [];\n\n          updatedOptionIds = isChecked\n            ? [...currentOptionIds, value]\n            : currentOptionIds.filter((id) => id !== value);\n\n          const updatedAnswer: QuestionResponseType = {\n            ...existingAnswer,\n            optionIds: updatedOptionIds,\n          };\n\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          return [\n            ...prevAnswers,\n            { questionId, shortAnswer: \"\", optionIds: [value] },\n          ];\n        }\n      } else if (typeof value === \"string\") {\n        // Handle short-response\n        const updatedAnswer: QuestionResponseType = {\n          userId: user?.id ?? \"\", // Replace with actual user ID\n          questionId: questionId,\n          shortAnswer: value,\n          optionIds: prevAnswers[answerIndex]?.optionIds || [],\n        };\n\n        if (answerIndex > -1) {\n          return [\n            ...prevAnswers.slice(0, answerIndex),\n            updatedAnswer,\n            ...prevAnswers.slice(answerIndex + 1),\n          ];\n        } else {\n          return [...prevAnswers, updatedAnswer];\n        }\n      }\n\n      return prevAnswers;\n    });\n\n    // Reset error if there was one\n    if (errors[questionId]) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]: \"\",\n      }));\n    }\n  };\n\n  const validateAnswer = (questionId: number) => {\n    const answer = answers[questionId] || \"\";\n    if (answer.answer.trim().length === 0) {\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        [questionId]:\n          \"This field cannot be empty nor can it be just whitespace.\",\n      }));\n      return false;\n    }\n    return true;\n  };\n  const formatAnswersAsQuestionResponse = (): QuestionResponseType[] => {\n    return Object.keys(answers).map((questionId) => {\n      const question = questionnaire.questions.find(\n        (q) => q.id === Number(questionId)\n      );\n\n      if (!question) {\n        throw new Error(`Question with ID ${questionId} not found`);\n      }\n\n      const response: QuestionResponseType = {\n        userId: user?.id ?? \"\", // Replace with actual user ID\n        questionId: question.id,\n        optionIds:\n          question.type === \"mcq\"\n            ? question.options?.find(\n                (option) => option.text === answers[question.id]\n              )?.id || 0\n            : 0, // Set optionId for multiple choice questions\n        response: answers[question.id],\n      };\n\n      return response;\n    });\n  };\n\n  const handleSubmit = () => {\n    const formattedAnswers = formatAnswersAsQuestionResponse();\n    new APIClient().postQuestionResponse(formattedAnswers);\n  };\n\n  const handleNext = () => {\n    const currentQuestion = questionnaire.questions[currentQuestionIndex];\n    // Validate short answer questions\n    if (\n      currentQuestion.type === QuestionCategory.ShortAnswer &&\n      !validateAnswer(currentQuestion.id)\n    ) {\n      return; // Prevent moving to the next question if validation fails\n    }\n\n    if (currentQuestionIndex < questionnaire.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Submit the questionnaire\n      console.log(\"Submitting questionnaire\", answers);\n      handleSubmit();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const currentQuestion = questionnaire.questions[currentQuestionIndex];\n  const progress =\n    ((currentQuestionIndex + 1) / questionnaire.questions.length) * 100;\n\n  return (\n    <Container>\n      <Typography variant=\"h4\">Questionnaire: {questionnaire.name}</Typography>\n      <Box mt={4}>\n        <Typography variant=\"h6\" sx={{ marginBottom: \"1vh\" }}>\n          {currentQuestion.text}\n        </Typography>\n        {/* Add uniform spacing between question text and response area */}\n        <Box mt={2}>\n          {currentQuestion.type === \"mcq\" ? (\n            <RadioGroup\n              value={answers[currentQuestion.id] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(currentQuestion.id, e.target.value)\n              }\n            >\n              {currentQuestion.options?.map((option) => (\n                <FormControlLabel\n                  key={option.id}\n                  value={option.text}\n                  control={<Radio />}\n                  label={option.text}\n                />\n              ))}\n            </RadioGroup>\n          ) : (\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              value={answers[currentQuestion.id] || \"\"}\n              onChange={(e) =>\n                handleAnswerChange(currentQuestion.id, e.target.value)\n              }\n              error={!!errors[currentQuestion.id]}\n              helperText={errors[currentQuestion.id]}\n              required={true}\n            />\n          )}\n        </Box>\n      </Box>\n\n      <Box mt={4} display=\"flex\" justifyContent=\"space-between\">\n        <Button\n          variant=\"contained\"\n          onClick={handlePrevious}\n          disabled={currentQuestionIndex === 0}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\" onClick={handleNext}>\n          Next\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <LinearProgress variant=\"determinate\" value={progress} />\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {`Progress: ${currentQuestionIndex + 1}/${\n            questionnaire.questions.length\n          }`}\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}